/** Function > Main
    @author: Lapys Dev Team
    @description: LapysJS is a JavaScript library designed to challenge the status quo of the JavaScript language and its other related vendors.
    @version: 0.0.3
    @url: https://www.github.com/LapysDev/LapysJS

    --- NOTE ---
        #Lapys:
            - Returns 1 if there`s an error, returns 0 otherwise.
            - The rules of building the library also get to me too.

    --- WARN ---
        #Lapys:
            - No arrow functions... :'(
            - No spread syntax.
*/
(function Main(argc, argv) {
    // Update > Argument Count
    argc += argv.length;

    /* Global Data */
        // Author
        var AUTHOR = 'Lapys Dev Team',

        // Description
        DESCRIPTION = 'LapysJS is a JavaScript library designed to challenge the status quo of the JavaScript language and its other related vendors.',

        // URL
        URL = 'https://www.github.com/LapysDev/LapysJS',

        // Version
        VERSION = '0.0.4',

        // LapysJS Development Kit
        LapysJSDevelopmentKit = {
            // Allow Public Access
            allowPublicAccess: !1,

            // Components
            components: ['accordion', 'carousel', 'draggable', 'dropdown', 'dynamicText', 'dynamicTime', 'marquee', 'table', 'toast', 'tooltip'],

            // Features
            features: {
                // Active
                active: [],

                // Value Of
                valueOf: function valueOf() { return ['focus-attribute', 'script-attribute'] }
            },

            // Information
            info: {
                // Browser Incompatibility Error Message
                browserIncompatibilityErrorMessage: 'LapysJS is not compatible with this browser',

                // Current Phase
                currentPhase: null,

                // Error Message Prefix
                errorMessagePrefix: '[LapysJS v' + VERSION + '] => ',

                // Fullscreen Message
                fullscreenMessage: "Press the 'Esc' key to exit fullscreen"
            },

            // Storage
            storage: {
                // Functions
                functions: {
                    // Set Timeout
                    setTimeout: (function() {
                        /* Error Handling
                                --- NOTE --
                                    #Lapys: Just in case 'setTimeout' is corrupted.
                        */
                        try {
                            // Initialization > Set Timeout
                            var $setTimeout = setTimeout;

                            // Return
                            return function setTimeout(callback, delay) {
                                /* Return
                                        --- NOTE ---
                                            #Lapys: Because the global object has not been tested for yet,
                                                we can not refer to it directly.
                                */
                                return $setTimeout.call(undefined, callback, delay)
                            }
                        } catch (error) {}

                        // Return
                        return function setTimeout(callback, delay) { callback() }
                    })()
                },

                // Objects
                objects: {
                    // Coordinates
                    coordinates: [0, 0]
                }
            }
        };

    /* Logic
            [if statement]
    */
    if (typeof LapysJS == 'object') {
        // Initialization > Constructor
        var constructor = (window.LapysJS || {}).constructor;

        /* Logic
                [if statement]
        */
        if (typeof constructor == 'function' && typeof constructor.name == 'string')
            /* Logic
                    [if statement]
            */
            if (constructor.name != 'LapysJS') {
                // Modification > Lapys JS Development Kit
                    // Allow Public Access
                    LapysJSDevelopmentKit.allowPublicAccess = !!LapysJS.debugMode;

                    // Components
                    try { ('components' in LapysJS) && (LapysJS.components.constructor === window.Array) && (LapysJSDevelopmentKit.components = LapysJS.components) }
                    catch (error) {}

                // Modification > Window > LapysJS
                window.LapysJS = undefined;

                // Deletion
                delete window.LapysJS
            }
    }

    /* Logic
            [if statement]

            --- NOTE ---
                #Lapys: Do not re-install the library.
    */
    if (typeof LapysJS == 'undefined') {
        // Error Handling
        try {
            // Initialization > Debug Mode
            var debugMode = LapysJSDevelopmentKit.allowPublicAccess;

            /* {Requirements} Error Handling */
                // {Error Constructor}
                if (typeof Error != 'function')
                    throw "'Error' must be a constructor object.";

                // {Evaluation Function}
                if (typeof eval != 'function') {
                    // Initialization > (Message, Error)
                    var message = "'eval' must be a native function.",
                        error = new Error(message);

                    // Error
                    throw error.constructor == Error ? error : message
                }

                // {ECMAScript 2015 Class Objects}
                try { eval('(function(){class hello{}})()') }
                catch (error) {
                    // Function > LapysJS Error
                    function LapysJSError(message) { return Error.call(this, message) }

                    // Modification > LapysJS Error > Prototype (> Constructor)
                    LapysJSError.prototype = Object.create(Error.prototype);
                    LapysJSError.prototype.constructor = LapysJSError;

                    // Error
                    throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Keyword 'class' must be valid.");
                }

            /* Global Data
                    --- NOTE ---
                        #Lapys: Prevent the error names from being
                            redacted or truncated by compressors or minifiers
                            using evaluation strings.
            */
                // LapysJS Error
                var LapysJSError = eval("(class LapysJSError extends Error { constructor(message) { super(message); try { Error.captureStackTrace(this, LapysJSError) } catch (error) { this.name = 'LapysJSError' } } })"),

                // LapysJS Browser Incompatibility Error
                LapysJSBrowserIncompatibilityError = eval("(class LapysJSBrowserIncompatibilityError extends LapysJSError { constructor(message) { super(message); this.name = 'LapysJSBrowserIncompatibilityError' } })"),

                // LapysJS Phase Shift Error
                LapysJSPhaseShiftError = eval("(class LapysJSPhaseShiftError extends LapysJSError { constructor(message) { super(message); this.name = 'LapysJSPhaseShiftError' } })");

            /* {Requirements} Error Handling, Logic */
                // {Global Object Test}
                if (!window)
                    throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Can not find global object 'window'.");

                // {'const' and 'let' Keywords}
                try { eval('const a=0;let b=1') }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Keywords 'const' and 'let' must be valid syntaxes.") }

                // {'argument' Object}
                if ((function(){try{arguments}catch(error){return 1}})())
                    throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Function objects must have the locally-defined 'arguments' object.");

                // {'delete' Keyword}
                try { eval('delete ({}).a') }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Keyword 'delete' must be valid syntax.") }

                // {'in' Keyword}
                try { eval("'a'in {};for(a in {})continue") }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Keyword 'in' must be valid syntax.") }

                // {AND Operator}
                try { function error() { throw Error } !1 && error() }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Binary AND operator (&&) is not compatible with LapysJS.") }

                // {OR Operator}
                try { function error() { throw Error } !0 || error() }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Binary OR operator (||) is not compatible with LapysJS.") }

                // {Number Operator}
                try { if (typeof eval("+'a'") != 'number') throw Error }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": Number operator (+<non-numeric object>) must be valid syntax.") }

                // {'Object.getOwnPropertyDescriptors' Method}
                try { if (typeof Object.getOwnPropertyDescriptors({}) != 'object') throw Error }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": 'Object.getOwnPropertyDescriptors' must be a native method.") }

                // {'console' Object}
                try { if (typeof console != 'object' || (console + '' != '[object console]' && console + '' != '[object Console]' && console + '' != '[object Object]')) throw Error }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": 'console' object should not be altered or must be native to this development environment.") }

                // {'Math' Object}
                try { if (typeof Math != 'object' || Math + '' != '[object Math]') throw Error }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": 'Math' object should not be altered or must be native to this development environment.") }

                // {'performance' Object}
                try { if (typeof performance != 'object' || performance + '' != '[object Performance]') throw Error }
                catch (error) { throw new LapysJSError(LapysJSDevelopmentKit.info.errorMessagePrefix + LapysJSDevelopmentKit.info.browserIncompatibilityErrorMessage + ": 'performance' object should not be altered or must be native to this development environment.") }

            /* Global Data */
                // LapysJS Development Kit
                const LDK = LapysJSDevelopmentKit;

            /* Polyfills */
                // Object
                    /* Create
                            --- NOTE ---
                                #Lapys: Sourced from `https://gist.github.com/lavoiesl/6642066`.
                    */
                    'function'!=typeof Object.create&&(Object.create=function(){var a=arguments[0],b=arguments[1];function c(){}if(c.prototype=a,'object'==typeof b)for(d in b)b.hasOwnProperty(d)&&(c[d]=b[d]);return new c});

                    /* Define Property
                            --- NOTE ---
                                #Lapys: Sourced from `https://gist.github.com/afuggini/85b02644491f130879a8e789a5b1cea8`.
                    */
                    'function'!=typeof Object.defineProperty&&((function(a,b){'use strict';'function'==typeof define&&define.amd?define(b):'object'==typeof exports?module.exports=b():a.returnExports=b()})(this,function(){var f,g,h,i,a=Function.call,b=Object.prototype,c=a.bind(b.hasOwnProperty),d=a.bind(b.propertyIsEnumerable),e=a.bind(b.toString),j=c(b,'__defineGetter__');j&&(f=a.bind(b.__defineGetter__),g=a.bind(b.__defineSetter__),h=a.bind(b.__lookupGetter__),i=a.bind(b.__lookupSetter__));var k=function(F){return null==F||'object'!=typeof F&&'function'!=typeof F};Object.getPrototypeOf||(Object.getPrototypeOf=function(F){var G=F.__proto__;return G||null===G?G:'[object Function]'===e(F.constructor)?F.constructor.prototype:F instanceof Object?b:null});var l=function(F){try{return F.sentinel=0,0===Object.getOwnPropertyDescriptor(F,'sentinel').value}catch(G){return!1}};if(Object.defineProperty){var m=l({}),n='undefined'==typeof document||l(document.createElement('div'));if(!n||!m)var p=Object.getOwnPropertyDescriptor}if(!Object.getOwnPropertyDescriptor||p){Object.getOwnPropertyDescriptor=function(F,G){if(k(F))throw new TypeError('Object.getOwnPropertyDescriptor called on a non-object: '+F);if(p)try{return p.call(Object,F,G)}catch(M){}var H;if(!c(F,G))return H;if(H={enumerable:d(F,G),configurable:!0},j){var I=F.__proto__,J=F!==b;J&&(F.__proto__=b);var K=h(F,G),L=i(F,G);if(J&&(F.__proto__=I),K||L)return K&&(H.get=K),L&&(H.set=L),H}return H.value=F[G],H.writable=!0,H}}if(Object.getOwnPropertyNames||(Object.getOwnPropertyNames=function(F){return Object.keys(F)}),!Object.create){var r,s=!({__proto__:null}instanceof Object),t=function(){if(!document.domain)return!1;try{return!!new ActiveXObject('htmlfile')}catch(F){return!1}},u=function(){var F,G;G=new ActiveXObject('htmlfile');var H='script';return G.write('<'+H+'></'+H+'>'),G.close(),F=G.parentWindow.Object.prototype,G=null,F},v=function(){var H,F=document.createElement('iframe'),G=document.body||document.documentElement;return F.style.display='none',G.appendChild(F),F.src='javascript:',H=F.contentWindow.Object.prototype,G.removeChild(F),F=null,H};r=s||'undefined'==typeof document?function(){return{__proto__:null}}:function(){var E=t()?u():v();delete E.constructor,delete E.hasOwnProperty,delete E.propertyIsEnumerable,delete E.isPrototypeOf,delete E.toLocaleString,delete E.toString,delete E.valueOf;var F=function(){};return F.prototype=E,r=function(){return new F},new F},Object.create=function(F,G){var H,I=function(){};if(null===F)H=r();else{if(null!==F&&k(F))throw new TypeError('Object prototype may only be an Object or null');I.prototype=F,H=new I,H.__proto__=F}return void 0!==G&&Object.defineProperties(H,G),H}}var w=function(F){try{return Object.defineProperty(F,'sentinel',{}),'sentinel'in F}catch(G){return!1}};if(Object.defineProperty){var x=w({}),y='undefined'==typeof document||w(document.createElement('div'));if(!x||!y)var z=Object.defineProperty,A=Object.defineProperties}if(!Object.defineProperty||z){Object.defineProperty=function(F,G,H){if(k(F))throw new TypeError('Object.defineProperty called on non-object: '+F);if(k(H))throw new TypeError('Property description must be an object: '+H);if(z)try{return z.call(Object,F,G,H)}catch(L){}if(!('value'in H)){var J='get'in H,K='set'in H;if(!j&&(J||K))throw new TypeError('getters & setters can not be defined on this javascript engine');J&&f(F,G,H.get),K&&g(F,G,H.set)}else if(j&&(h(F,G)||i(F,G))){var I=F.__proto__;F.__proto__=b,delete F[G],F[G]=H.value,F.__proto__=I}else F[G]=H.value;return F}}(!Object.defineProperties||A)&&(Object.defineProperties=function(F,G){if(A)try{return A.call(Object,F,G)}catch(H){}return Object.keys(G).forEach(function(H){'__proto__'!==H&&Object.defineProperty(F,H,G[H])}),F}),Object.seal||(Object.seal=function(F){if(Object(F)!==F)throw new TypeError('Object.seal can only be called on Objects.');return F}),Object.freeze||(Object.freeze=function(F){if(Object(F)!==F)throw new TypeError('Object.freeze can only be called on Objects.');return F});try{Object.freeze(function(){})}catch(E){Object.freeze=function(F){return function(H){return'function'==typeof H?H:F(H)}}(Object.freeze)}Object.preventExtensions||(Object.preventExtensions=function(F){if(Object(F)!==F)throw new TypeError('Object.preventExtensions can only be called on Objects.');return F}),Object.isSealed||(Object.isSealed=function(F){if(Object(F)!==F)throw new TypeError('Object.isSealed can only be called on Objects.');return!1}),Object.isFrozen||(Object.isFrozen=function(F){if(Object(F)!==F)throw new TypeError('Object.isFrozen can only be called on Objects.');return!1}),Object.isExtensible||(Object.isExtensible=function(F){if(Object(F)!==F)throw new TypeError('Object.isExtensible can only be called on Objects.');for(var G='';c(F,G);)G+='?';F[G]=!0;var H=c(F,G);return delete F[G],H})}));

                    /* Assign
                            --- NOTE ---
                                #Lapys: Sourced from `https://gist.github.com/spiralx/68cf40d7010d829340cb`.
                    */
                    'function'!=typeof Object.assign&&(Object.defineProperty(Object,'assign',{enumerable:!1,configurable:!0,writable:!0,value:function(a){'use strict';if(a===void 0||null===a)throw new TypeError('Cannot convert first argument to object');for(var d,b=Object(a),c=1;c<arguments.length;c++)if(d=arguments[c],void 0!==d&&null!==d){d=Object(d);for(var e=Object.keys(Object(d)),f=0,g=e.length;f<g;f++){var h=e[f],j=Object.getOwnPropertyDescriptor(d,h);void 0!==j&&j.enumerable&&(b[h]=d[h])}}return b}}));

                    /* Is
                            --- NOTE ---
                                #Lapys: Sourced from `https://gist.github.com/matthewp/2036428`.
                    */
                    'function'!=typeof Object.is&&(Object.defineProperty(Object,'is',{value:function(a,b){return a===b?0!==a||1/a==1/b:a!==a&&b!==b},configurable:!0,enumerable:!1,writable:!0}));

                    /* Get Own Property Descriptor
                            --- NOTE ---
                                #Lapys: Sourced from `https://gist.github.com/jhermsmeier/9a34b06a107bbf5d2c91`.
                    */
                    'function'!=typeof Object.getOwnPropertyDescriptor&&(Object.getOwnPropertyDescriptor=function(a,b){var c='function'==typeof a.__lookupGetter__&&'function'==typeof a.__lookupSetter__,d=c?a.__lookupGetter__(b)||a.__lookupSetter__(b):null;return null==d?{configurable:!0,writable:!0,enumerable:!0,value:a[b]}:{configurable:!0,enumerable:!0,get:a.__lookupGetter__(b),set:a.__lookupSetter__(b)}});

                // Array
                    /* Index Of
                            --- NOTE ---
                                #Lapys: Sourced from `https://gist.github.com/revolunet/1908355`.
                    */
                    'function'!=typeof Array.prototype.indexOf&&(Array.prototype.indexOf=function(a){var b=this.length>>>0,c=+arguments[1]||0;for(c=0>c?Math.ceil(c):Math.floor(c),0>c&&(c+=b);c<b;c++)if(c in this&&this[c]===a)return c;return-1});

                    /* Last Index Of
                            --- NOTE ---
                                #Lapys: Sourced from `https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf#Polyfill`.
                    */
                    'function'!=typeof Array.prototype.lastIndexOf&&(Array.prototype.lastIndexOf=function(a){'use strict';if(void 0===this||null===this)throw new TypeError;var b,c,d=Object(this),e=d.length>>>0;if(0==e)return-1;for(b=e-1,1<arguments.length&&(b=+arguments[1],b==b?0!=b&&b!=1/0&&b!=-(1/0)&&(b=(0<b||-1)*Math.floor(Math.abs(b))):b=0),c=0<=b?Math.min(b,e-1):e-Math.abs(b);0<=c;c--)if(c in d&&d[c]===a)return c;return-1});

                // {Child Node} (...)
                    // Remove
                    (function(a){a.forEach(function(b){b.hasOwnProperty('remove')||Object.defineProperty(b,'remove',{configurable:!0,enumerable:!0,writable:!0,value:function(){null!==this.parentNode&&this.parentNode.removeChild(this)}})})})([Element.prototype,CharacterData.prototype,DocumentType.prototype]);

                // Document
                    // Current Script
                    (function(){function a(m){if("string"==typeof m&&m)for(var n=0,o=l.length;n<o;n++)if(l[n].src===m)return l[n]}function b(){for(var m,n=0,o=l.length;n<o;n++)if(!l[n].src){if(m)return;m=l[n]}return m}function c(m,n){var o,p,q,r="number"==typeof n;return n=r?n:"number"==typeof d.skipStackDepth?d.skipStackDepth:0,"string"==typeof m&&m&&(r?p=m.match(/((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/):(p=m.match(/^(?:|[^:@]*@|.+\)@(?=http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/),!(p&&p[1])&&(p=m.match(/\)@((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/),p&&p[1]&&(o=p[1]))),p&&p[1]&&(0<n?(q=m.slice(m.indexOf(p[0])+p[0].length),o=c(q,n-1)):o=p[1])),o}function d(){if(0!==l.length){if(1===l.length)return l[0];if("readyState"in l[0])for(var m=l.length;m--;)if("interactive"===l[m].readyState)return l[m];if("loading"===document.readyState)return l[l.length-1];if(j)try{throw new Error}catch(p){var n=c(p.stack),o=a(n);return o||n!==k||(o=b()),o}}}var f=!("currentScript"in document),g=document.__defineGetter__,h="function"==typeof Object.defineProperty&&function(){var m;try{Object.defineProperty(document,"_xyz",{value:"blah",enumerable:!0,writable:!1,configurable:!1}),m="blah"===document._xyz,delete document._xyz}catch(n){m=!1}return m}(),j=function(){var m=!1;try{throw new Error}catch(n){m="string"==typeof n.stack&&!!n.stack}return m}(),k=window.location.href,l=document.getElementsByTagName("script");d.skipStackDepth=1,document._currentScript=d,f&&(h?Object.defineProperty(document,"currentScript",{get:d,enumerable:!0,configurable:!1}):g&&document.__defineGetter__("currentScript",d))})();

                // Event Target
                    // Add Event Listener, Remove Event Listener
                    (function(){if(!Element.prototype.addEventListener){function b(c){c||(c=window.event);for(var d=0,e=0,f=a[c.type];e<f.aEls.length;e++)if(f.aEls[e]===this){for(d;d<f.aEvts[e].length;d++)f.aEvts[e][d].call(this,c);break}}var a={};Element.prototype.addEventListener=function(c,d){if(a.hasOwnProperty(c)){for(var e=a[c],f=-1,g=0;g<e.aEls.length;g++)if(e.aEls[g]===this){f=g;break}if(-1===f)e.aEls.push(this),e.aEvts.push([d]),this["on"+c]=b;else{var h=e.aEvts[f];this["on"+c]!==b&&(h.splice(0),this["on"+c]=b);for(var i=0;i<h.length;i++)if(h[i]===d)return;h.push(d)}}else a[c]={aEls:[this],aEvts:[[d]]},this["on"+c]=b},Element.prototype.removeEventListener=function(c,d){if(a.hasOwnProperty(c)){for(var e=a[c],f=-1,g=0;g<e.aEls.length;g++)if(e.aEls[g]===this){f=g;break}if(-1!==f)for(var h=0,i=e.aEvts[f];h<i.length;h++)i[h]===d&&i.splice(h,1)}}}})();

            /* Definition */
                // LapysJS Development Kit Experimental Features
                const LDKE = LDK.features,

                // LapysJS Development Kit Functions
                LDKF = LDK.storage.functions,

                // LapysJS Development Kit Objects
                LDKO = LDK.storage.objects;

            /* Modification */
                // LapysJS Development Kit
                    // Constants
                    LDK.constants = {
                        // Animation Tick Speed
                        animationTickSpeed: 1 / 60,

                        // Character Arrays
                        characterArrays: [
                            // Alpha-numerals
                            '0123456789abcdefghijklmnopqrstuvwxyz',

                            // Special Characters
                            '~!@#$%^&*()_{}|:"<>?[]\\;\',./*-+'
                        ],

                        // Clipboard
                        clipboard: {content: null},

                        // Metrics Table
                        metricsTable: {
                            // Angle
                            angle: [],

                            // CSS
                            css: [],

                            // Distance
                            distance: [],

                            // Frequency
                            frequency: [],

                            // Metric Prefixes
                            metricPrefixes: [],

                            // Resolution
                            resolution: [],

                            // Speed
                            speed: [],

                            // Temperature
                            temperature: [],

                            // Time
                            time: [],

                            // Volume
                            volume: [],

                            // Weight
                            weight: []
                        },

                        // Features
                        features: (function() {
                            // Initialization > LapysJS Features
                            let LapysJSFeatures = ['focus', 'script-attribute'];

                            // Modification > LapysJS Features > Active
                            LapysJSFeatures.active = [];

                            // Return
                            return LapysJSFeatures
                        })(),

                        // Random Element Tag Names
                        randomElementTagNames: ['a', 'audio', 'br', 'button', 'canvas', 'caption', 'div', 'dl', 'element', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'img', 'input', 'li', 'ol', 'p', 'q', 'script', 'style', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video', 'lapysjs-element'],

                        // Special Characters
                        specialCharacters: '�',

                        // Timeout Start
                        timeoutStart: LDKF.setTimeout(function() {}),

                        // Value Types
                        valueTypes: ['boolean', 'function', 'number', 'object', 'string', 'symbol']
                    };

                    // Global
                    LDK.global = {
                        // Author
                        AUTHOR: AUTHOR,

                        // Description
                        DESCRIPTION: DESCRIPTION,

                        // Uniform Resource Location
                        'URL': URL,

                        // Version
                        VERSION: VERSION
                    };

                    // Temporary Data
                    LDK.tmp = {
                        // Objects
                        objects: [],

                        // Value Of
                        valueOf: (function() {
                            // Initialization
                            let tmp = new (function() {});

                            // Return
                            return function valueOf() { return tmp }
                        })()
                    };

            /* Definition */
                // LapysJS Development Kit Constants
                const LDKC = LDK.constants,

                // LapysJS Development Kit Global
                LDKG = LDK.global,

                // LapysJS Development Kit Information
                LDKI = LDK.info,

                // Temporary Data
                tmp = LDK.tmp.valueOf(),

                // Temporary Object
                tmpObject = LDK.tmp.objects;

            /* {Debug Mode} Logic
                    [if statement]
            */
            if (debugMode) {
                window.LDK = LapysJSDevelopmentKit;
                window.LDKC = LDK.constants;
                window.LDKCO = LDK.components;
                window.LDKG = LDK.global;
                window.LDKE = LDK.features;
                window.LDKF = LDK.storage.functions;
                window.LDKI = LDK.info;
                window.LDKO = LDK.storage.objects;
                window.LDKT = tmp;
                window.LDKTO = tmpObject
            }

            /* Modification */
                // LapysJS Development Kit
                    // Temporary Data
                        // Objects
                            // Document Description
                            tmpObject.documentDescription = Object.getOwnPropertyDescriptor(window, 'document');

                            /* Event Reference List
                                    --- NOTE ---
                                        #Lapys: Allow for additional dynamic information
                                            to be added if needed, such as the `getEventListeners` command-line API
                                            in Google Chrome Developer Tools.
                            */
                            Object.defineProperty(tmpObject, 'eventReferenceList', (function() {
                                // Initialization > (List, Descriptor)
                                let list = [],
                                    descriptor = {
                                        // Configurable
                                        configurable: !1,

                                        // Enumerable
                                        enumerable: !0,

                                        // Get
                                        get: tmpObject.eventReferenceListGetter = function() {
                                            // Return
                                            return list
                                        }
                                    };

                                // Return
                                return descriptor
                            })());

                            // Freezer
                            tmpObject.freezer = [];

                            // Fullscreen Element
                            tmpObject.fullscreenElement = null;

                            // Location Description
                            tmpObject.locationDescription = Object.getOwnPropertyDescriptor(window, 'location');

                            // Navigator Description
                            tmpObject.navigatorDescription = Object.getOwnPropertyDescriptor(window, 'navigator');

                            // On DOM Element Added Watch List
                            tmpObject.onDOMElementAddedWatchList = [];

                            // On DOM Element Count Change Watch List
                            tmpObject.onDOMElementCountChangeWatchList = [];

                            // On DOM Element Removed Watch List
                            tmpObject.onDOMElementRemovedWatchList = [];

                            // On DOM HTML Change Watch List
                            tmpObject.onDOMHTMLChangeWatchList = [];

                            // On DOM Node Added Watch List
                            tmpObject.onDOMNodeAddedWatchList = [];

                            // On DOM Node Count Change Watch List
                            tmpObject.onDOMNodeCountChangeWatchList = [];

                            // On DOM Node Removed Watch List
                            tmpObject.onDOMNodeRemovedWatchList = [];

                            // On Element Added Watch List
                            tmpObject.onElementAddedWatchList = [];

                            // On Element Count Change Watch List
                            tmpObject.onElementCountChangeWatchList = [];

                            // On Element Removed Watch List
                            tmpObject.onElementRemovedWatchList = [];

                            // On HTML Change Watch List
                            tmpObject.onHTMLChangeWatchList = [];

                            // On Node Added Watch List
                            tmpObject.onNodeAddedWatchList = [];

                            // On Node Count Change Watch List
                            tmpObject.onNodeCountChangeWatchList = [];

                            // On Node Removed Watch List
                            tmpObject.onNodeRemovedWatchList = [];

                            // Performance Description
                            tmpObject.performanceDescription = Object.getOwnPropertyDescriptor(window, 'performance');

                            // Screen Description
                            tmpObject.screenDescription = Object.getOwnPropertyDescriptor(window, 'screen');

                            // Strictly Watched Elements
                            tmpObject.strictlyWatchedElements = [];

                            // Written Elements
                            tmpObject.writtenElements = [];

                    // Storage
                        // Functions
                            // Add Event
                            LDKF.addEvent = function addEvent() {
                                // Initialization > (Event Target, Arguments, Iterator, Length, Test)
                                let eventTarget = arguments[0],
                                    args = [eventTarget],
                                    iterator = 1,
                                    length = arguments.length,
                                    test = LDKF.addEventListenerEventTarget.valueOf();

                                /* Loop
                                        Index Arguments.

                                    > Update > Arguments
                                */
                                for (iterator; iterator != length; iterator += 1)
                                    LDKF.pushArray(args, iterator == 1 ? (test ? '' : 'on') + LDKF.string(arguments[iterator]) : arguments[iterator]);

                                // Return
                                return test ?
                                    LDKF.addEventListenerEventTarget.apply(LDKF, args) :
                                    LDKF.attachEvent(LDKF, args)
                            };

                            // All Node Nodes
                            LDKF.allNodeNodes = function allNodeNodes() {
                                // Initialization > (All Nodes, Node, Collection, Iterator, Node Collection)
                                let allNodes = !!arguments[1],
                                    node = arguments[0],
                                    collection = [],
                                    iterator = 0,
                                    nodeCollection = [];

                                // Function > Update
                                (function update() {
                                    // Initialization > (Array, Iterator, Nodes, Length)
                                    let array = LDKF.toArray(arguments[1]),
                                        iterator = 0,
                                        nodes = LDKF.get.nodeChildNodes(arguments[0]),
                                        length = LDKF.get.nodeListLength(nodes);

                                    // Update > Collection
                                    LDKF.$pushArray(collection, array);

                                    /* Loop
                                            Index Nodes.
                                    */
                                    for (iterator; iterator < length; iterator += 1) {
                                        // Initialization > Node
                                        let node = nodes[iterator];

                                        // Update
                                        update(node, LDKF.get.nodeChildNodes(node))
                                    }
                                })(node, LDKF.arrayFrom(LDKF.get.nodeChildNodes(node)));

                                // Initialization > Length
                                let length = collection.length;

                                /* Loop
                                        Index Collection.

                                        --- NOTE ---
                                            #Lapys: Ensure no duplicates.
                                */
                                for (iterator; iterator < length; iterator += 1) {
                                    // Initialization > Item
                                    let item = collection[iterator];

                                    // Update > Node Collection
                                    (LDKF.indexOfArray(nodeCollection, item) == -1) && LDKF.pushArray(nodeCollection, item)
                                }

                                /* Logic
                                        [if statement]

                                        --- NOTE ---
                                            #Lapys: Every node related as a descendant or part of Node
                                                is included in the `All Nodes` option.
                                */
                                if (allNodes) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (LDKF.isElement(node))
                                        // Update > Node Collection
                                        LDKF.$pushArray(nodeCollection, LDKF.arrayFrom(LDKF.get.elementAttributes(node)))
                                }

                                // Return
                                return nodeCollection
                            };

                            // Ancestor Query Selector
                            LDKF.ancestorQuerySelector = function ancestorQuerySelector() {
                                // Initialization > (Target, Parent (Nodes), Query)
                                let target = this,
                                    parent = LDKF.get.nodeParentNode(target),
                                    parentNodes = [parent],
                                    query = LDKF.string(arguments[0]);

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Error Handling
                                    try { LDKF.querySelectorDocument(query) }
                                    catch (error) {
                                        // Error
                                        (error.constructor == LDKO.domException) && LDKF.error(["'ancestorQuerySelector'", "'EventTarget'"], 'argument', "Invalid query: '" + query + "'")

                                        // Error
                                        throw error
                                    }

                                    // Loop > Update > Parent Nodes
                                    while (LDKF.get.nodeParentNode(parent))
                                        LDKF.pushArray(parentNodes, parent = LDKF.get.nodeParentNode(parent));

                                    // Initialization > (First Ancestor, Selection)
                                    let firstAncestor = parentNodes[parentNodes.length - 1],
                                        selection;

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isDocumentFragment(firstAncestor))
                                        // Update > Selection
                                        selection = LDKF.querySelectorAllDocumentFragment(firstAncestor, query);

                                    else if (LDKF.isHtmlDocument(firstAncestor))
                                        // Update > Selection
                                        selection = LDKF.$querySelectorAllDocument(firstAncestor, query);

                                    else if (LDKF.isElement(firstAncestor))
                                        // Update > Selection
                                        selection = LDKF.querySelectorAllElement(firstAncestor, query);

                                    else
                                        // Error
                                        LDKF.error(["'ancestorQuerySelector'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                    // Update > Parent
                                    parent = parentNodes[0];

                                    // Initialization > Iterator
                                    let iterator = selection.length;

                                    /* Loop
                                            Index Selection.
                                    */
                                    while (iterator) {
                                        // Initialization > Selection Item
                                        let selectionItem = selection[iterator -= 1];

                                        // Logic > Return
                                        if (parent === selectionItem)
                                            return selectionItem
                                    }

                                    // Return
                                    return null
                                }

                                else
                                    // Error
                                    LDKF.error(["'ancestorQuerySelector'", "'EventTarget'"], 'argument', 'No query given')
                            };

                            // Ancestor Query Selector All
                            LDKF.ancestorQuerySelectorAll = function ancestorQuerySelectorAll() {
                                // Initialization > (Target, Parent (Nodes), Query)
                                let target = this,
                                    parent = LDKF.get.nodeParentNode(target),
                                    parentNodes = [parent],
                                    query = LDKF.string(arguments[0]);

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Error Handling
                                    try { LDKF.querySelectorDocument(query) }
                                    catch (error) {
                                        // Error
                                        (error.constructor == LDKO.domException) && LDKF.error(["'ancestorQuerySelectorAll'", "'EventTarget'"], 'argument', "Invalid query: '" + query + "'")

                                        // Error
                                        throw error
                                    }

                                    // Loop > Update > Parent Nodes
                                    while (LDKF.get.nodeParentNode(parent))
                                        LDKF.pushArray(parentNodes, parent = LDKF.get.nodeParentNode(parent));

                                    // Initialization > (First Ancestor, Selection)
                                    let firstAncestor = parentNodes[parentNodes.length - 1],
                                        selection;

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isDocumentFragment(firstAncestor))
                                        // Update > Selection
                                        selection = LDKF.querySelectorAllDocumentFragment(firstAncestor, query);

                                    else if (LDKF.isHtmlDocument(firstAncestor))
                                        // Update > Selection
                                        selection = LDKF.$querySelectorAllDocument(firstAncestor, query);

                                    else if (LDKF.isElement(firstAncestor))
                                        // Update > Selection
                                        selection = LDKF.querySelectorAllElement(firstAncestor, query);

                                    else
                                        // Error
                                        LDKF.error(["'ancestorQuerySelectorAll'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                    // Initialization > Iterator
                                    let iterator = (selection = LDKF.arrayFrom(selection)).length;

                                    /* Loop
                                            Index Selection
                                    */
                                    while (iterator) {
                                        // Initialization > Selection Item
                                        let selectionItem = selection[iterator -= 1];

                                        /* Logic
                                                [if statement]

                                            > Update > (Selection, Iterator)
                                        */
                                        if (selectionItem && (function() {
                                            // Initialization > Iterator
                                            let iterator = parentNodes.length;

                                            /* Loop
                                                    Index Parent Nodes.

                                                > Logic > Return
                                            */
                                            while (iterator)
                                                if (selectionItem === parentNodes[iterator -= 1])
                                                    return !1;

                                            // Return
                                            return !0
                                        })()) {
                                            LDKF.spliceArray(selection, iterator, 1);
                                            iterator += 1
                                        }
                                    }

                                    // Return
                                    return selection
                                }

                                else
                                    // Error
                                    LDKF.error(["'ancestorQuerySelectorAll'", "'EventTarget'"], 'argument', 'No query given')
                            };

                            // Cancel Animation Frame
                            LDKF.cancelAnimationFrame = (function() {
                                // Initialization > Method
                                let method = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame;

                                // Return
                                return function cancelAnimationFrame() { return method.call(window, arguments[0]) }
                            })();

                            // Clear Interval
                            LDKF.clearInterval = (function() {
                                // Initialization > Method
                                let method = window.clearInterval;

                                // Return
                                return function clearInterval() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Clear Timeout
                            LDKF.clearTimeout = (function() {
                                // Initialization > Method
                                let method = window.clearTimeout;

                                // Return
                                return function clearTimeout() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Clone Object
                            LDKF.cloneObject = function cloneObject() {
                                // Initialization > Object
                                let object = arguments[0];

                                // Logic > Return
                                if (LDKF.isNonConstructible(object))
                                    return LDKF.isNull(object) ? null : undefined;

                                // Initialization > (Object Constructor (Name), Clone)
                                let objectConstructor = object.constructor,
                                    objectConstructorName = objectConstructor.name,
                                    clone = LDKF.customObject(objectConstructorName);

                                // Function
                                    // Clone Array
                                    function cloneArray() {
                                        /* Initialization > (Object, Clone)
                                                --- NOTE ---
                                                    #Lapys: I resorted to doing this
                                                        to deep clone arrays. All-in-all, arrays aren`t unlike objects anyways.
                                        */
                                        let object = arguments[0],
                                            clone = cloneObject(object);

                                        // Return
                                        return clone
                                    }

                                    // Clone Boolean
                                    function cloneBoolean() {
                                        // Initialization > (Object, Clone)
                                        let object = arguments[0],
                                            clone = !!object;

                                        // Return
                                        return clone
                                    }

                                    // Clone Function
                                    function cloneFunction() {
                                        // Initialization > (Object, Clone)
                                        let object = arguments[0],
                                            clone;

                                        // Error Handling > Update > Clone
                                        try { clone = LDKF.bindFunction(object) }
                                        catch (error) { clone = LDKF.$func(object.name, object.parameters, object.body, !0) }

                                        // Return
                                        return clone
                                    }

                                    // Clone Number
                                    function cloneNumber() {
                                        // Initialization > (Object, Clone)
                                        let object = arguments[0],
                                            clone = object - 0;

                                        // Return
                                        return clone
                                    }

                                    // Clone Object
                                    function cloneObject() {
                                        // Initialization > Object
                                        let object = arguments[0];

                                        // Error Handling
                                        try {
                                            // Initialization > (Clone, Assigned Clone, Iterator, Object Property Descriptors (Keys (Length)))
                                            let clone = LDKF.customObject(objectConstructorName),
                                                assignedClone = LDKF.objectAssign({}, object),
                                                iterator = 0,
                                                objectPropertyDescriptors = LDKF.objectGetOwnPropertyDescriptors(object),
                                                objectPropertyDescriptorsKeys = LDKF.objectKeys(objectPropertyDescriptors),
                                                objectPropertyDescriptorsKeysLength = objectPropertyDescriptorsKeys.length;

                                            /* Loop
                                                    Iterate over Object Property Descriptors Keys Length.
                                            */
                                            for (iterator = 0; iterator < objectPropertyDescriptorsKeysLength; iterator += 1) {
                                                // Initialization > Object Property Descriptors Key
                                                let objectPropertyDescriptorsKey = objectPropertyDescriptorsKeys[iterator];

                                                // Error Handling
                                                try {
                                                    // Modification > Assigned Clone > [Object Property Descriptors Key]
                                                    LDKF.objectDefineProperty(assignedClone, objectPropertyDescriptorsKey, objectPropertyDescriptors[objectPropertyDescriptorsKey])
                                                } catch (error) {
                                                    // Warn
                                                    LDKF.warn("Could not clone property '" + objectPropertyDescriptorsKey + "'")
                                                }
                                            }

                                            // Initialization > Assigned Clone Descriptors (Keys (Length))
                                            let assignedCloneDescriptors = LDKF.objectGetOwnPropertyDescriptors(assignedClone),
                                                assignedCloneDescriptorsKeys = LDKF.objectKeys(assignedCloneDescriptors),
                                                assignedCloneDescriptorsKeysLength = assignedCloneDescriptorsKeys.length;

                                            /* Loop
                                                    Iterate over Assigned Clone Descriptors Key Length.
                                            */
                                            for (iterator = 0; iterator < assignedCloneDescriptorsKeysLength; iterator += 1) {
                                                // Initialization > Assigned Clone Descriptors Key
                                                let assignedCloneDescriptorsKey = assignedCloneDescriptorsKeys[iterator];

                                                // Modification > Clone > [Assigned Clone Descriptors Key]
                                                LDKF.objectDefineProperty(clone, assignedCloneDescriptorsKey, assignedCloneDescriptors[assignedCloneDescriptorsKey])
                                            }

                                            // Modification > Clone > (Constructor > Prototype)
                                            clone.__proto__ = LDKF.objectCreate(objectConstructor.prototype);

                                            // Return
                                            return clone
                                        } catch (error) {}

                                        // Error Handling
                                        try {
                                            // Initialization > Clone
                                            let clone = clonePrototype(object);

                                            // Return
                                            return clone
                                        } catch (error) {}

                                        // Error
                                        LDKF.error(["'clone'", "'" + objectConstructorName + "'"], 'argument')
                                    }

                                    // Clone Prototype
                                    function clonePrototype() {
                                        // Initialization > (Object, Clone, Code, Iterator, Prototypes)
                                        let object = arguments[0],
                                            clone = object,
                                            code = 'new(class ' + objectConstructorName,
                                            iterator = 0,
                                            prototypes = [],
                                            $prototypes = LapysJS.tmp.prototypes;

                                        // Function > Generate Property Descriptors Code
                                        function generatePropertyDescriptorsCode() {
                                            // Initialization > (Code, Iterator, Prototype (Descriptor (Keys (Length))))
                                            let code = 'let that=this;',
                                                iterator = 0,
                                                prototype = arguments[0],
                                                prototypeDescriptor = LDKF.objectGetOwnPropertyDescriptors(prototype),
                                                prototypeDescriptorKeys = LDKF.objectKeys(prototypeDescriptor),
                                                prototypeDescriptorKeysLength = prototypeDescriptorKeys.length;

                                            /* Loop
                                                    Iterate over Prototype Descriptor Keys Length.
                                            */
                                            for (iterator; iterator < prototypeDescriptorKeysLength; iterator += 1) {
                                                // Initialization > Prototype Descriptor Key
                                                let prototypeDescriptorKey = prototypeDescriptorKeys[iterator];

                                                // Update > Code
                                                code += "try{LDKF.objectDefineProperty(that,'" + prototypeDescriptorKey + "',LDKF.objectGetOwnPropertyDescriptor(LapysJS.tmp.prototypes[" + (function() {
                                                    // Initialization > (Index, Prototypes, Prototypes Length)
                                                    let index = 0,
                                                        prototypes = $prototypes,
                                                        prototypesLength = prototypes.length;

                                                    /* Loop
                                                            Index Prototypes.
                                                    */
                                                    for (index; index < prototypesLength; index += 1)
                                                        // Logic > Return
                                                        if (prototypes[index] === prototype)
                                                            return index
                                                })() + "],'" + prototypeDescriptorKey + "'))}catch(error){}"
                                            }

                                            // Update > Code
                                            code += 'return that';

                                            // Return
                                            return code
                                        }

                                        /* Loop
                                                [while statement]

                                            > Update > Prototypes
                                        */
                                        while (clone)
                                            prototypes[prototypes.length] = clone = clone.__proto__;

                                        // Initialization > Prototypes Length
                                        let prototypesLength = (prototypes.length -= 1) - 1;

                                        /* Loop
                                                Index Prototypes Length.

                                            > Update > Code
                                        */
                                        for (iterator; iterator < prototypesLength; iterator += 1) {
                                            let prototype = prototypes[iterator];
                                            code += ' extends(class ' + prototype.constructor.name
                                        }

                                        // Update > Prototypes
                                        $prototypes = LapysJS.tmp.prototypes = [object];
                                        LDKF.$pushArray($prototypes, prototypes);

                                        // Update > Code
                                        code += '{constructor(){' + (function() {
                                            // Initialization > Prototypes Length
                                            let prototypesLength = prototypes.length;

                                            /* Logic
                                                    [if:else if:else statement]
                                            */
                                            if (!prototypesLength)
                                                // Return
                                                return '';

                                            else if (prototypesLength == 1)
                                                // Return
                                                return generatePropertyDescriptorsCode(object);

                                            else {
                                                // Initialization > Prototype
                                                let prototype = prototypes[prototypes.length - 2];

                                                // Logic > Return
                                                if (prototype.constructor.name != 'Object')
                                                    return generatePropertyDescriptorsCode(prototype)
                                            }
                                        })() + '}})';

                                        /* Loop
                                                Iterate over Prototypes Length.

                                            > Update > Code
                                        */
                                        for (iterator = 0; iterator < prototypesLength; iterator += 1)
                                            code += '{constructor(){super();' + generatePropertyDescriptorsCode(prototypes[prototypesLength - iterator - 2] || object) + '}})';

                                        // Update > Clone
                                        clone = LDKF.eval(code);

                                        // Modification > LapysJS > Temporary Data > Prototypes
                                        LapysJS.tmp.prototypes = [];

                                        // Return
                                        return clone
                                    }

                                    // Clone Regular Expression
                                    function cloneRegex() {
                                        // Initialization > (Object, Clone)
                                        let object = arguments[0],
                                            clone = LDKF.regex(LDKF.get.regexSource(object), LDKF.get.regexFlags(object));

                                        // Return
                                        return clone
                                    }

                                    // Clone String
                                    function cloneString() {
                                        // Initialization > (Object, Clone)
                                        let object = arguments[0],
                                            clone = '';

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (object) {
                                            // Initialization > Object Length
                                            let objectLength = object.length,
                                                $objectLength = objectLength + 1;

                                            /* Loop
                                                    [while statement]

                                                > Update > Clone
                                            */
                                            while ($objectLength != 1)
                                                clone += object[objectLength - ($objectLength -= 1)]
                                        }

                                        // Return
                                        return clone
                                    }

                                    // Clone Symbol
                                    function cloneSymbol() {
                                        // Initialization > (Object, Clone)
                                        let object = arguments[0],
                                            clone = LDKF.symbol(LDKF.sliceString(LDKF.string(object), 'Symbol('.length, -')'.length));

                                        // Return
                                        return clone
                                    }

                                /* Logic
                                        [if:else statement]
                                */
                                if (LDKF.isNode(object))
                                    // Error Handling > Update > Clone
                                    try { clone = LDKF.cloneNode(object, !0) }
                                    catch (error) { clone = clonePrototype(object) }

                                else {
                                    // Initialization > (Detect JavaScript Value Type, Iterator, LapysJS Development Kit Objects Keys (Length))
                                    let detectJavaScriptValueType = !0,
                                        iterator = 0,
                                        LDKO_Keys = LDKF.objectKeys ? LDKF.objectKeys(LDKO) : LDKO.object.keys(LDKO),
                                        LDKO_KeysLength = LDKO_Keys.length;

                                    /* Loop
                                            Iterate over LapysJS Development Kit Objects Keys while
                                            Detect JavaScript Value Type is still truthy.
                                    */
                                    for (iterator = 0; iterator < LDKO_KeysLength && detectJavaScriptValueType; iterator += 1) {
                                        // Initialization > (LapysJS Development Kit Objects Key (Length))
                                        let LDKO_Key = LDKO_Keys[iterator],
                                            LDKO_KeyLength = LDKO_Key.length;

                                        /* Logic
                                                If
                                                    the current indexed key is a presumed prototype-valued property.
                                        */
                                        if (
                                            LDKO_Key[LDKO_KeyLength - 5] == 'P' &&
                                            LDKO_Key[LDKO_KeyLength - 4] == 'r' &&
                                            LDKO_Key[LDKO_KeyLength - 3] == 'o' &&
                                            LDKO_Key[LDKO_KeyLength - 2] == 't' &&
                                            LDKO_Key[LDKO_KeyLength - 1] == 'o'
                                        )
                                            /* Logic
                                                    If
                                                        the Object is the prototype we`ve stored in LapysJS Development Kit Objects.

                                                > Error Handling
                                            */
                                            if (object === LDKO[LDKO_Key])
                                                try {
                                                    // Update > (Detect JavaScript Value Type, Clone)
                                                    detectJavaScriptValueType = !1;
                                                    clone = clonePrototype(object)
                                                } catch (error) {
                                                    throw error;
                                                    // Error
                                                    LDKF.error(["'clone'", "'" + objectConstructorName + ".prototype'"], 'argument')
                                                }
                                    }

                                    /* Logic
                                            [if statement]
                                    */
                                    if (detectJavaScriptValueType)
                                        /* Logic
                                                [if:else if:else statement]

                                            > (Update > Clone | Error)
                                        */
                                            // {Array}
                                            if (LDKF.isArray(object))
                                                clone = cloneArray(object);

                                            // {Boolean}
                                            else if (LDKF.isBoolean(object))
                                                clone = cloneBoolean(object);

                                            // {Function}
                                            else if (LDKF.isFunction(object))
                                                clone = cloneFunction(object);

                                            // {Number}
                                            else if (LDKF.isNumber(object))
                                                clone = cloneNumber(object);

                                            // {Regular Expression}
                                            else if (LDKF.isRegex(object))
                                                clone = cloneRegex(object);

                                            // {String}
                                            else if (LDKF.isString(object))
                                                clone = cloneString(object);

                                            // {Symbol}
                                            else if (LDKF.isSymbol(object))
                                                clone = cloneSymbol(object);

                                            // {Object}
                                            else if (LDKF.isObject(object))
                                                clone = cloneObject(object);

                                            else
                                                // Error
                                                LDKF.error(["'clone'", "'" + objectConstructorName + "'"], 'argument', 'JavaScript object type not determinable')
                                }

                                // Return
                                return clone
                            };

                            // Create Element
                            LDKF.createElement = function createElement() {
                                // Initialization > (Element, Content, Properties, Selector, Tag Name, Length, Random Element Tag Names)
                                let element = null,
                                    content = '',
                                    properties = {},
                                    selector = '',
                                    tagName = LDKF.string(arguments[0]),
                                    length = arguments.length,
                                    randomElementTagNames = LDKC.randomElementTagNames;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    /* Logic
                                            [if:else statement]

                                        > Update > (Content, Properties, Selector, Tag Name) | (Content, Properties, Selector)
                                    */
                                    if (tagName[tagName.length - 1] == ':') {
                                        content = length > 1 ? LDKF.string(arguments[1]) : '';
                                        properties = length > 2 ? LDKF.object(arguments[2]) : {};
                                        selector = '';
                                        tagName = LDKF.sliceString(tagName, 0, -1)
                                    }

                                    else {
                                        content = length > 2 ? LDKF.string(arguments[2]) : '';
                                        properties = length > 3 ? LDKF.object(arguments[3]) : {};
                                        selector = length > 1 ? LDKF.string(arguments[1]) : ''
                                    }

                                    // Update > Tag Name
                                    (tagName == '*') && (tagName = randomElementTagNames[LDKF.numberParseInt(LDKF.mathRandom() * randomElementTagNames.length)]);

                                    // Error Handling
                                    try {
                                        // Update > Element
                                        element = LDKF.createElementDocument(tagName)
                                    } catch (error) {
                                        // Error
                                        LDKF.error("'createElement'", 'argument', 'The tag name provided ' + LDKF.debugMessage("'" + tagName + "'", ['not', 'a'], 'valid name'))
                                    }

                                    // Modification > Element > (Inner HTML, Selector)
                                    LDKF.set.elementInnerHTML(element, content);
                                    LDKF.set.htmlElementSelector(element, selector);

                                    // LapysJS Development Kit Function > Iterate Object
                                    LDKF.iterateObject(function(key, value) {
                                        // Modification > Element > Key
                                        element[key] = value
                                    }, properties)
                                }

                                // Return
                                return element
                            };

                            // Crush Array
                            LDKF.crushArray = function crushArray() {
                                // Initialization > (Array, Iterator)
                                let array = arguments[0],
                                    iterator = array.length;

                                // Loop > Update > (Iterator, Array)
                                while (iterator) {
                                    iterator -= 1;
                                    LDKF.hasOwnPropertyObject(array, iterator) || LDKF.spliceArray(array, iterator, 1)
                                }

                                // Return
                                return array
                            };

                            // Custom Array
                            LDKF.customArray = function customArray() {
                                // Initialization > (Array, Items, Length, Properties)
                                let array = LDKF.customObject.call(customArray, arguments[0], {}, LDKO.arrayProto),
                                    items = LDKF.toArray(arguments[1]),
                                    length = arguments.length,
                                    properties = LDKF.object(arguments[2]);

                                // LapysJS Development Kit Functions
                                    // Push Array
                                    LDKF.pushArray(array);
                                    (length > 1) && LDKF.$pushArray(array, items);

                                    // Iterate Object
                                    (length > 2) && LDKF.iterateObject(function(key, value, description) {
                                        // Modification > Array > [Key]
                                        LDKF.objectDefineProperty(array, key, description)
                                    }, properties);

                                // Return
                                return array
                            };

                            // Custom Object
                            LDKF.customObject = function customObject() {
                                // Initialization > (Length, Name, Object, Properties, Prototype, Target)
                                let length = arguments.length,
                                    name = arguments[0],
                                    object = {},
                                    properties = arguments[1],
                                    prototype = arguments[2],
                                    that = this;

                                // Error Handling > ((Update > Object) | Error)
                                try { object = new (eval('(function ' + name + '(){})')) }
                                catch (error) { LDKF.error(that == LDKF.customArray ? "'customArray'" : "'customObject'", 'argument', LDKF.debugMessage("'" + LDKF.string(name) + "'", ['must', 'a'], 'valid constructor name')) }

                                // Modification > Object > (Constructor > Prototype)
                                (length > 2) && (object.__proto__ = LDKF.objectCreate(prototype));

                                /* Logic
                                        [if statement]
                                */
                                if (length > 1) {
                                    // Update > Properties
                                    properties = LDKF.object(properties);

                                    // LapysJS Development Kit Functions > Iterate Object
                                    LDKF.iterateObject(function(key, value, description) {
                                        // Modification > Object > [Key]
                                        LDKF.objectDefineProperty(object, key, description)
                                    }, properties)
                                }

                                // Return
                                return object
                            };

                            // Debug Message
                            LDKF.debugMessage = function debugMessage() {
                                // Initialization > (Affix, Length, Message, Format)
                                let affix = arguments[3],
                                    length = arguments.length,
                                    message = arguments[0],
                                    format = [message, arguments[1], arguments[2]];

                                /* Logic
                                        [if statement]
                                */
                                if (length == 1)
                                    // Return
                                    return LDKF.string(message);

                                else {
                                    // Update > Format
                                    LDKF.isArray(format[0]) || (format[0] = [format[0]]);
                                    LDKF.isArray(format[1]) || (format[1] = [format[1]]);
                                    LDKF.isArray(format[2]) || (format[2] = [format[2]]);

                                    // LapysJS Development Kit Functions > Error
                                    format[0].length || LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 0', ['must', 'a'], 'non-empty array')));
                                    format[1].length || LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 1', ['must', 'a'], 'non-empty array')));
                                    format[2].length || LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 2', ['must', 'a'], 'non-empty array')));

                                    // LapysJS Development Kit Functions > Iterate Array
                                    LDKF.iterateArray(function(key, value) {
                                        // Modification > Target > Key
                                        this[key] = LDKF.string(value)
                                    }, format[0], format[1], format[2]);

                                    /* Function > Argument Format Prefix
                                            --- NOTE ---
                                                #Lapys:
                                                    - Prevent repetition of code.
                                                    - Inject these functions where needed as necessary.
                                    */
                                    function argumentFormatPrefix() {
                                        // LapysJS Development Kit Functions > Error
                                        (format[0].length > 2) && LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 0', 'only', ['string', 'single-unit array', 'dual-unit array'])));

                                        // Update > Message
                                        message = 'Failed to execute ' + (format[0].length == 1 ? format[0][0] : format[0][0] + ' on ' + format[0][1])
                                    }

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (length == 2) {
                                        /* Logic
                                                [if:else statement]
                                        */
                                            // {Argument}
                                            if (format[1][0] == 'argument') {
                                                // Argument Format Prefix
                                                argumentFormatPrefix();

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (format[1].length == 2)
                                                    /* Logic
                                                            [switch:case statement]

                                                        > Update > Message
                                                    */
                                                    switch (format[1][1]) {
                                                        // Required
                                                        case 'required':
                                                            message += ': Number of arguments required is ' + join(format[2], ',', 'or')
                                                    }
                                            }

                                        else
                                            // LapysJS Development Kit Functions > Error
                                            LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 1', ['only', 'values'], ["'argument'"])))
                                    }

                                    else if (length > 2) {
                                        // Function
                                            // Is Alphabet
                                            function isAlphabet() {
                                                /* Function > Test
                                                        --- NOTE ---
                                                            #Lapys: This is an extreme example of strictly avoiding
                                                                prototype methods and properties.
                                                */
                                                let character = arguments[0];

                                                // Return
                                                return character == 'a' || character == 'A' ||
                                                    character == 'b' || character == 'B' ||
                                                    character == 'c' || character == 'C' ||
                                                    character == 'd' || character == 'D' ||
                                                    character == 'e' || character == 'E' ||
                                                    character == 'f' || character == 'F' ||
                                                    character == 'g' || character == 'G' ||
                                                    character == 'h' || character == 'H' ||
                                                    character == 'i' || character == 'I' ||
                                                    character == 'j' || character == 'J' ||
                                                    character == 'k' || character == 'K' ||
                                                    character == 'l' || character == 'L' ||
                                                    character == 'm' || character == 'M' ||
                                                    character == 'n' || character == 'N' ||
                                                    character == 'o' || character == 'O' ||
                                                    character == 'p' || character == 'P' ||
                                                    character == 'q' || character == 'Q' ||
                                                    character == 'r' || character == 'R' ||
                                                    character == 's' || character == 'S' ||
                                                    character == 't' || character == 'T' ||
                                                    character == 'u' || character == 'U' ||
                                                    character == 'v' || character == 'V' ||
                                                    character == 'w' || character == 'W' ||
                                                    character == 'x' || character == 'X' ||
                                                    character == 'y' || character == 'Y' ||
                                                    character == 'z' || character == 'Z'
                                            }

                                            // Is Vowel
                                            function isVowel() {
                                                // Initialization > Character
                                                let character = LDKF.string(arguments[0]);

                                                /* Loop
                                                        [while statement]

                                                        --- NOTE ---
                                                            #Lapys: Alternative to trimming leading text.

                                                    > Update > Character
                                                */
                                                while (!isAlphabet(character[0]) && character)
                                                    character = (function() {
                                                        // Initialization > (Character Length, Iterator, String)
                                                        let characterLength = character.length,
                                                            iterator = 1,
                                                            string = '';

                                                        /* Loop
                                                                --- NOTE ---
                                                                    #Lapys: Alternative to slicing text.

                                                            > Update > String
                                                        */
                                                        for (iterator = 1; iterator < characterLength; iterator += 1)
                                                            string += character[iterator];

                                                        // Return
                                                        return string
                                                    })();

                                                // Update > Character
                                                character = character[0];

                                                // Return
                                                return character == 'a' || character == 'A' ||
                                                    character == 'e' || character == 'E' ||
                                                    character == 'i' || character == 'I' ||
                                                    character == 'o' || character == 'O' ||
                                                    character == 'u' || character == 'U'
                                            }

                                            // Join
                                            function join() {
                                                // Initialization > (Length, Array, Grammatical Terminator, Iterator, Separation Character, String)
                                                let length = arguments.length,
                                                    array = arguments[0],
                                                    grammaticalTerminator = length > 2 ? LDKF.string(arguments[2]) : '',
                                                    iterator = 1,
                                                    separationCharacter = length > 1 ? LDKF.string(arguments[1]) : '',
                                                    string = '';

                                                // LapysJS Development Kit Functions > Error
                                                LDKF.isArray(array) || LDKF.error(debugMessage(["'join'", "'debugMessage'"], 'argument', debugMessage('Argument 0', 'must', 'array')));

                                                // Initialization > (Decremented) Array Length
                                                let arrayLength = array.length,
                                                    decrementedArrayLength = arrayLength - 1;

                                                // Update > String
                                                string += array[0];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (arrayLength > 1) {
                                                    /* Loop
                                                            Iterate over Decremented Array Length.

                                                        > Update > String
                                                    */
                                                    for (iterator = 1; iterator < decrementedArrayLength; iterator += 1)
                                                        string += separationCharacter + ' ' + array[iterator];

                                                    // Update > String
                                                    string += ' ' + grammaticalTerminator + ' ' + array[decrementedArrayLength]
                                                }

                                                // Return
                                                return string
                                            }

                                        // LapysJS Development Kit Functions > Error
                                        (format[1].length > 2) && LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 1', 'only', ['string', 'single-unit array', 'dual-unit array'])));

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                            // {Argument}
                                            if (format[1][0] == 'argument') {
                                                // Argument Format Prefix
                                                argumentFormatPrefix();

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (format[1].length == 2)
                                                    /* Logic
                                                            [switch:case statement]

                                                        > Update > Message
                                                    */
                                                    switch (format[1][1]) {
                                                        // Required
                                                        case 'required':
                                                            message += ': Number of arguments required is ' + join(format[2], ',', 'or')
                                                    }

                                                else {
                                                    // LapysJS Development Kit Functions > Error
                                                    (format[2].length > 2) && LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 2', 'only', ['string', 'single-unit array', 'dual-unit array'])));

                                                    // Update > Message
                                                    message += ': ';

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (format[2].length == 1)
                                                        // Update > Message
                                                        message += format[2][0];

                                                    else {
                                                        // Initialization > (Expectation, Reality)
                                                        let expectation = format[2][0],
                                                            reality = format[2][1];

                                                        // Function > Anglicize Numeral
                                                        function anglicizeNumeral() {
                                                            // Initialization > Numeral
                                                            let numeral = arguments[0];

                                                            /* Logic
                                                                    [if statement]

                                                                > Return
                                                            */
                                                            if (LDKF.isNumber(numeral))
                                                                return numeral < 0 ? 'negative ' + LDKF.abs(numeral) : numeral;

                                                            // Return
                                                            return numeral
                                                        }

                                                        // Update > Message
                                                        message += anglicizeNumeral(expectation) + ' argument' + (+expectation+'' == 'NaN' ? ' set' : (+expectation > 1 ? 's' : (+expectation < -1 ? 's' : ''))) + ' required, but only ' + anglicizeNumeral(reality) + ' present'
                                                    }
                                                }
                                            }

                                            // {Must}
                                            else if (format[1][0] == 'must') {
                                                // Initialization > Format Type
                                                let formatType = format[1][1];

                                                // Update > Message
                                                message = join(format[0], ',', 'and') + ' must be ';

                                                /* Logic
                                                        [if statement]

                                                    > Update > Message
                                                */
                                                    // {Vowel Prefix}
                                                    if (formatType == 'a' || formatType == 'an')
                                                        message += isVowel(format[2][0]) ? 'an ' : (isAlphabet(format[2][0][0]) ? 'a ' : '');

                                                // Update > Message
                                                message += join(format[2], ',', 'or')
                                            }

                                            // {Not}
                                            else if (format[1][0] == 'not') {
                                                // Initialization > Format Type
                                                let formatType = format[1][1];

                                                // Update > Message
                                                message = join(format[0], ',', 'and') + ' is not ';

                                                /* Logic
                                                        [if statement]

                                                    > Update > Message
                                                */
                                                    // {Vowel Prefix}
                                                    if (formatType == 'a' || formatType == 'an')
                                                        message += isVowel(format[2][0]) ? 'an ' : (isAlphabet(format[2][0][0]) ? 'a ' : '');

                                                // Update > Message
                                                message += join(format[2], ',', 'or')
                                            }

                                            // {Only}
                                            else if (format[1][0] == 'only') {
                                                // Initialization > Format Type
                                                let formatType = format[1][1];

                                                // Update > Message
                                                message = join(format[0], ',', 'and') + ' can only be ';

                                                /* Logic
                                                        [if:else statement]

                                                    > Update > Message
                                                */
                                                    // {Vowel Prefix}
                                                    if (formatType == 'a' || formatType == 'an')
                                                        message += isVowel(format[2][0]) ? 'an ' : (isAlphabet(format[2][0][0]) ? 'a ' : '');

                                                    // {Value Specifier}
                                                    else if (formatType == 'values')
                                                        message += 'of values ';

                                                // Update > Message
                                                message += join(format[2], ',', 'and')
                                            }

                                            else
                                                // LapysJS Development Kit Functions > Error
                                                LDKF.error(debugMessage("'debugMessage'", 'argument', debugMessage('Argument 1', ['only', 'values'], ["'argument'", "'must'", "'not'", "'only'"])))
                                    }

                                    else
                                        // Return
                                        return '';

                                    // Update > Message
                                    (length == 4) && (message += LDKF.string(affix));

                                    // Return
                                    return message
                                }
                            };

                            // Decode URI
                            LDKF.decodeURI = (function() {
                                // Initialization > Method
                                let method = window.decodeURI;

                                // Return
                                return function decodeURI() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Decode URI Component
                            LDKF.decodeURIComponent = (function() {
                                // Initialization > Method
                                let method = window.decodeURIComponent;

                                // Return
                                return function decodeURIComponent() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Delete Event
                            LDKF.delEvent = function delEvent() {
                                // Initialization > (Event Target, Arguments, Iterator, Length, Test)
                                let eventTarget = arguments[0],
                                    args = [eventTarget],
                                    iterator = 1,
                                    length = arguments.length,
                                    test = LDKF.removeEventListenerEventTarget.valueOf();

                                /* Loop
                                        Index Arguments.

                                    > Update > Arguments
                                */
                                for (iterator; iterator != length; iterator += 1)
                                    LDKF.pushArray(args, iterator == 1 ? (test ? '' : 'on') + LDKF.string(arguments[iterator]) : arguments[iterator]);

                                // Return
                                return test ?
                                    LDKF.removeEventListenerEventTarget.apply(LDKF, args) :
                                    LDKF.detachEvent(LDKF, args)
                            };

                            // Descendant Query Selector
                            LDKF.descendantQuerySelector = function descendantQuerySelector() {
                                // Initialization > (Target, Child Nodes, Query)
                                let target = this,
                                    childNodes = LDKF.get.nodeChildNodes(target),
                                    query = LDKF.string(arguments[0]);

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Error Handling
                                    try { LDKF.querySelectorDocument(query) }
                                    catch (error) {
                                        // Error
                                        (error.constructor == LDKO.domException) && LDKF.error(["'descendantQuerySelector'", "'EventTarget'"], 'argument', "Invalid query: '" + query + "'")

                                        // Error
                                        throw error
                                    }

                                    // Initialization > (Children, Descendants)
                                    let children = LDKF.toArray(childNodes),
                                        descendants = [];

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isDocumentFragment(target))
                                        // Update > Descendants
                                        descendants = LDKF.querySelectorAllDocumentFragment(target, query);

                                    else if (LDKF.isHtmlDocument(target))
                                        // Update > Descendants
                                        descendants = LDKF.$querySelectorAllDocument(target, query);

                                    else if (LDKF.isElement(target))
                                        // Update > Descendants
                                        descendants = LDKF.querySelectorAllElement(target, query);

                                    else
                                        // Error
                                        LDKF.error(["'descendantQuerySelector'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                    // Initialization > (Iterator, Length)
                                    let iterator = 0,
                                        length = descendants.length;

                                    /* Loop
                                            Index Descendants.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Descendant
                                        let descendant = descendants[iterator];

                                        /* Logic
                                                [if statement]

                                            > Update > Descendants
                                        */
                                        if (LDKF.includesArray(children, descendant))
                                            return descendant
                                    }

                                    // Return
                                    return null
                                }

                                else
                                    // Error
                                    LDKF.error(["'descendantQuerySelector'", "'EventTarget'"], 'argument', 'No query given')
                            };

                            // Descendant Query Selector All
                            LDKF.descendantQuerySelectorAll = function descendantQuerySelectorAll() {
                                // Initialization > (Target, Child Nodes, Query)
                                let target = this,
                                    childNodes = LDKF.get.nodeChildNodes(target),
                                    query = LDKF.string(arguments[0]);

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Error Handling
                                    try { LDKF.querySelectorDocument(query) }
                                    catch (error) {
                                        // Error
                                        (error.constructor == LDKO.domException) && LDKF.error(["'descendantQuerySelectorAll'", "'EventTarget'"], 'argument', "Invalid query: '" + query + "'")

                                        // Error
                                        throw error
                                    }

                                    // Initialization > (Children, Descendants)
                                    let children = LDKF.toArray(childNodes),
                                        descendants = [];

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isDocumentFragment(target))
                                        // Update > Descendants
                                        descendants = LDKF.querySelectorAllDocumentFragment(target, query);

                                    else if (LDKF.isHtmlDocument(target))
                                        // Update > Descendants
                                        descendants = LDKF.$querySelectorAllDocument(target, query);

                                    else if (LDKF.isElement(target))
                                        // Update > Descendants
                                        descendants = LDKF.querySelectorAllElement(target, query);

                                    else
                                        // Error
                                        LDKF.error(["'descendantQuerySelectorAll'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                    // Initialization > Iterator
                                    let iterator = (descendants = LDKF.arrayFrom(descendants)).length;

                                    /* Loop
                                            Index Descendants.
                                    */
                                    while (iterator) {
                                        // Initialization > Descendant
                                        let descendant = descendants[iterator -= 1];

                                        /* Logic
                                                [if statement]

                                            > Update > (Descendants, Iterator)
                                        */
                                        if (descendant && !LDKF.includesArray(children, descendant)) {
                                            LDKF.spliceArray(descendants, iterator, 1);
                                            iterator += 1
                                        }
                                    }

                                    // Return
                                    return descendants
                                }

                                else
                                    // Error
                                    LDKF.error(["'descendantQuerySelectorAll'", "'EventTarget'"], 'argument', 'No query given')
                            };

                            // Encode URI
                            LDKF.encodeURI = (function() {
                                // Initialization > Method
                                let method = window.encodeURI;

                                // Return
                                return function encodeURI() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Encode URI Component
                            LDKF.encodeURIComponent = (function() {
                                // Initialization > Method
                                let method = window.encodeURIComponent;

                                // Return
                                return function encodeURIComponent() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Error
                            LDKF.error = function error() {
                                // Error
                                throw new LapysJSError(LDK.info.errorMessagePrefix + LDKF.debugMessage.apply(LDKF, LDKF.toArray(arguments)))
                            };

                            // Escape
                            LDKF.escape = (function() {
                                // Initialization > Method
                                let method = window.escape;

                                // Return
                                return function escape() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            // Evaluate
                            LDKF.eval = (function() {
                                // Initialization > Method
                                let method = eval;

                                // Return
                                return function Eval() { return method.call(window, arguments[0]) }
                            })();

                            LDKF.$eval = (function() {
                                // Initialization > Method
                                let method = eval;

                                // Return
                                return function Eval() { return method.call(this, arguments[0]) }
                            })();

                            // Function
                            LDKF.$func = function Function() {
                                // Initialization > (Length, (...), Format)
                                let length = arguments.length,
                                    $0 = arguments[0],
                                    $1 = arguments[1],
                                    $2 = arguments[2],
                                    $3 = arguments[3],
                                    format = {
                                        // Body
                                        body: (function() {
                                            /* Logic
                                                    [switch:case:default statement]

                                                > Return
                                            */
                                            switch (length) {
                                                case 1: return $0; break;
                                                case 2: return $1; break;
                                                case 3: return $2; break;
                                                case 4: return $2; break;
                                                default: return ''
                                            }
                                        })(),

                                        // Name
                                        name: (function() {
                                            /* Logic
                                                    [switch:case:default statement]

                                                > Return
                                            */
                                            switch (length) {
                                                case 3: return $0; break;
                                                case 4: return $0; break;
                                                default: return ''
                                            }
                                        })(),

                                        // Parameters
                                        parameters: (function() {
                                            /* Logic
                                                    [switch:case:default statement]

                                                > Return
                                            */
                                            switch (length) {
                                                case 2: return $0; break;
                                                case 3: return $1; break;
                                                case 4: return $1; break;
                                                default: return ''
                                            }
                                        })(),

                                        // Type
                                        type: (function() {
                                            /* Logic
                                                    [switch:case:default statement]

                                                > Return
                                            */
                                            switch (length) {
                                                case 4: return $3;
                                                default: return !1
                                            }
                                        })()
                                    };

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Error
                                    (length > 4) && LDKF.error("'Function'", ['argument', 'required'], [1, 2, 3, 4]);

                                    // Initialization > (Body, Name, Parameters, Type, Code)
                                    let body = format.body,
                                        name = format.name,
                                        parameters = format.parameters,
                                        type = format.type,
                                        code = type ? '=>' : '(function';

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isNativeFunction(body))
                                        // LapysJS Development Kit Functions > Error
                                        LDKF.error("'Function'", 'argument', 'Can not query the source code of native functions');

                                    else {
                                        // Update
                                            // Body
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (LDKF.isFunction(body)) {
                                                    // Update > Body
                                                    body = LDKF.get.functionBody(body);

                                                    // Initialization > (Body, Trimmed (Leading, Trailing))
                                                    let $body = body,
                                                        trimmedLeading = !1,
                                                        trimmedTrailing = !1;

                                                    // (Loop > Update > Body), (Update > Body)
                                                    while ($body[0] == ' ' || $body[0] == '\n') $body = LDKF.sliceString($body, 1);
                                                    ($body[0] == '=' && $body[1] == '>') && ($body = LDKF.sliceString($body, '=>'.length));
                                                    while ($body[0] == ' ' || $body[0] == '\n') $body = LDKF.sliceString($body, 1);

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if ($body[0] == '{') {
                                                        /* Loop
                                                                [while statement]

                                                            > Update > (Body, Trimmed Leading)
                                                        */
                                                        while ($body[0] == '{' && !trimmedLeading) {
                                                            $body = LDKF.sliceString($body, 1);
                                                            trimmedLeading = !0
                                                        }

                                                        /* Loop
                                                                [while statement]

                                                            > Update > (Body, Trimmed Trailing)
                                                        */
                                                        while ($body[$body.length - 1] && !trimmedTrailing) {
                                                            ($body[$body.length - 1] == '}') && (trimmedTrailing = !0);
                                                            $body = LDKF.sliceString($body, 0, -1)
                                                        }
                                                    }

                                                    // (...)
                                                    body = $body
                                                }

                                                else
                                                    // (...)
                                                    body = LDKF.isString(body) ? (
                                                        body[0] == 'f' && body[1] == 'u' && body[2] == 'n' && body[3] == 'c' && body[4] == 't' && body[5] == 'i' && body[6] == 'o' && body[7] == 'n' ?
                                                            '(' + body + ')' :
                                                            body
                                                    ) : 'return ' + LDKF.string(body);

                                            // Name
                                            LDKF.isFunction(name) && (name = name.name);
                                            name = LDKF.string(name);

                                            // Parameters
                                            LDKF.isFunction(parameters) && (parameters = LDKF.get.functionParameters(parameters));
                                            LDKF.isArray(parameters) && (parameters = (function(a){let $a=a.length,_a=$a-1,b='';for(let c=0;c<$a;c+=1){let d=a[c],e='';b+=(e=LDKF.isObject(d)?('address'in d?LDKF.string(d.address):'')+('value'in d?'='+LDKF.string(d.value):''):LDKF.string(d));e&&(b+=c==_a?'':', ')};return b})(parameters));
                                            parameters = LDKF.string(parameters);

                                            // Code
                                            code = type ? '(' + parameters + ') ' + code : code + (name ? ' ' + name : '') + '(' + parameters + ') ';
                                            code += type ? ((function(a){let $a=a.length,d=!0;for(let b=0;b<$a;b+=1){let e=a[b];(d&&e!=' ')&&(d=!1);if(!d&&e==' ')return!0}return!1})(body) ? ' {' + body + '}' : body) : '{' + body + '}';
                                            code = type ? '(' + code + ')' : code + ')';

                                        // Return
                                        return LDKF.eval(code)
                                    }
                                }

                                else
                                    // Return
                                    return (function() {})
                            };

                            // Get Computed Style
                            LDKF.getComputedStyle = (function() {
                                // Initialization > Method
                                let method = window.getComputedStyle || (LDKO.$document.defaultView || {getComputedStyle: function() {}}).getComputedStyle;

                                // Return
                                return function getComputedStyle() { return method.call(window, arguments[0]) }
                            })();

                            // Get Elements Of Type From Array
                            LDKF.getElementsOfTypeFromArray = function getElementsOfTypeFromArray() {
                                // Initialization > (Array, Type (Iterator, Length), Types, Iterator, Name)
                                let array = arguments[0],
                                    type = arguments[1],
                                    typeIterator = 0,
                                    typeLength = type.length,
                                    types = LDKC.valueTypes,
                                    iterator = types.length,
                                    name = arguments.length > 2 ? arguments[2] : 'getElementsOfType';

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    /* Loop
                                            Index Type.
                                    */
                                    for (typeIterator; typeIterator != typeLength; typeIterator += 1) {
                                        // Initialization > (Type, Is Valid Type)
                                        let $type = type[typeIterator],
                                            isValidType = !1;

                                        // Update > Iterator
                                        iterator = types.length;

                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator)
                                            /* Logic
                                                    [if statement]
                                            */
                                            if ($type == types[iterator -= 1]) {
                                                // Update > Is Valid Type
                                                isValidType = !0;

                                                // Break
                                                break
                                            }

                                        // Error
                                        isValidType || LDKF.error(["'" + name + "'", "'Array'"], 'argument', LDKF.debugMessage("'" + $type + "'", ['must', 'a'], 'valid data type'))
                                    }

                                    // Update > (Iterators, Types)
                                    iterator = array.length;
                                    types = [];

                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Item
                                        let item = array[iterator -= 1];

                                        // Update > Types
                                        (function() {
                                            // Update > Type Iterator
                                            typeIterator = type.length;

                                            // Loop > Logic > Return
                                            while (typeIterator)
                                                if (typeof item == type[typeIterator -= 1])
                                                    return !0
                                        })() && LDKF.spliceArray(types, 0, 0, item)
                                    }

                                    // Return
                                    return types
                                }

                                else
                                    // Error
                                    LDKF.error(["'" + name + "'", "'Array'"], 'argument', [1, 0])
                            };

                            // Get Falsy Elements From Array
                            LDKF.getFalsyElementsFromArray = function getFalsyElementsFromArray() {
                                // Initialization > (Array, Falsies, Iterator)
                                let array = arguments[0],
                                    falsies = [],
                                    iterator = array.length;

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    // Update > Falsies
                                    item || LDKF.spliceArray(falsies, 0, 0, item)
                                }

                                // Return
                                return falsies
                            };

                            // Get Frequencies From Array
                            LDKF.getFrequenciesFromArray = function getFrequenciesFromArray() {
                                // Initialization > (Array, Occurrences, Iterator, Length)
                                let array = arguments[0],
                                    occurrences = [],
                                    iterator = 0,
                                    length = array.length;

                                /* Loop
                                        Index Array.

                                        --- NOTE ---
                                            #Lapys: Get the quantitative occurrences of each
                                                element in the array.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > (Item, Occurrences Iterator)
                                    let item = array[iterator],
                                        occurrencesIterator = occurrences.length;

                                    // Update > Occurrences
                                    (function() {
                                        // Loop > Logic > Return
                                        while (occurrencesIterator)
                                            if (occurrences[occurrencesIterator -= 1].item === item)
                                                return !0
                                    })() ?
                                        (occurrences.length > occurrencesIterator) && (occurrences[occurrencesIterator].occurrence += 1) :
                                        LDKF.pushArray(occurrences, {occurrence: 1, item: item})
                                }

                                // Return
                                return occurrences
                            };

                            // Get Highest Occurring Elements From Array
                            LDKF.getHighestOccurringElementsFromArray = function getHighestOccurringElementsFromArray() {
                                // Initialization > (Array, Occurrences, Iterator, Length, Maximum (Occurrence, Occurring Elements))
                                let array = arguments[0],
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = 0,
                                    length = occurrences.length,
                                    maximumOccurrence = 0,
                                    maximumOccurringElements = [];

                                // Loop > Update > Maximum Occurrence
                                for (iterator = 0; iterator != length; iterator += 1)
                                    (maximumOccurrence < occurrences[iterator].occurrence) && (maximumOccurrence = occurrences[iterator].occurrence);

                                // Loop > Update > Maximum Occurring Elements
                                while (iterator)
                                    (occurrences[iterator -= 1].occurrence === maximumOccurrence) && LDKF.spliceArray(maximumOccurringElements, 0, 0, occurrences[iterator].item);

                                // Return
                                return maximumOccurringElements
                            };

                            /* Get Iterators
                                    --- NOTE ---
                                        #Lapys:
                                            - HTML entities are more than escape characters.
                                            - Escape characters are somewhat faster to process.
                            */
                            LDKF.getIterators = function getIterators() {
                                // Initialization > (Iterator, Iterators, Length, Use Escape Characters)
                                let iterator = 0,
                                    iterators = '',
                                    length = arguments.length ? arguments[0] : LDKC.maximumCallStackSize,
                                    useEscapeCharacters = !!arguments[1];

                                /* Logic
                                        [if:else statement]
                                */
                                if (useEscapeCharacters) {
                                    // Initialization > Limit
                                    let limit = 4;

                                    /* Loop
                                            [for statement]
                                    */
                                    for (iterator; iterator < length; iterator += 1) {
                                        // Initialization > Index
                                        let index = LDKF.string(iterator);

                                        // Loop > Update > Index
                                        while (index.length < limit) index = '0' + index;

                                        // Error Handling
                                        try {
                                            // Execution
                                            LDKF.$eval('var \\u' + index);

                                            // Update > Iterators
                                            iterators += LDKF.$eval("'\\u" + index + "'");
                                        } catch (error) {
                                            // Update > Length
                                            length += 1
                                        }
                                    }
                                }

                                else {
                                    // Initialization > Element
                                    let element = LDKC.element;

                                    /* Loop
                                            [for statement]
                                    */
                                    for (iterator; iterator < length; iterator += 1) {
                                        // Modification > Element > Inner HTML
                                        LDKF.set.elementInnerHTML(element, '&#' + iterator + ';');

                                        // Initialization > Variable
                                        let variable = LDKF.get.elementInnerHTML(element);

                                        // Error Handling
                                        try {
                                            // Execution
                                            LDKF.$eval('var ' + variable);

                                            // Update > Iterators
                                            iterators += variable
                                        } catch (error) {
                                            // Update > Length
                                            length += 1
                                        }

                                        // Modification > Element > Inner HTML
                                        LDKF.set.elementInnerHTML(element, '')
                                    }
                                }

                                // Return
                                return iterators
                            };

                            // Get Lowest Occurring Elements From Array
                            LDKF.getLowestOccurringElementsFromArray = function getLowestOccurringElementsFromArray() {
                                // Initialization > (Array, Occurrences, Iterator, Length, Minimum (Occurrence, Occurring Elements))
                                let array = arguments[0],
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = 0,
                                    length = occurrences.length,
                                    minimumOccurrence = (occurrences[0] || {occurrence: LDKO.numberMaxSafeInteger}).occurrence,
                                    minimumOccurringElements = [];

                                // Loop > Update > Minimum Occurrence
                                for (iterator = 0; iterator != length; iterator += 1)
                                    (minimumOccurrence > occurrences[iterator].occurrence) && (minimumOccurrence = occurrences[iterator].occurrence);

                                // Loop > Update > Minimum Occurring Elements
                                while (iterator)
                                    (occurrences[iterator -= 1].occurrence === minimumOccurrence) && LDKF.spliceArray(minimumOccurringElements, 0, 0, occurrences[iterator].item);

                                // Return
                                return minimumOccurringElements
                            };

                            // Get Object Depth
                            LDKF.getObjectDepth = function getObjectDepth() {
                                // Initialization > (Object, Constructor, Prototype, (Constructor > Prototype), Symbol)
                                let object = arguments[0],
                                    constructor = object.constructor,
                                    prototype = constructor.prototype,
                                    __proto__ = object.__proto__,
                                    symbol = LDKO.symbol;

                                // Function
                                    // Match
                                    function match(match) {
                                        // Initialization > Result
                                        let result = !1;

                                        // Logic > Error Handling > Update > Result
                                        if (LDKF.isConstructible(match))
                                            try {
                                                (
                                                    match.constructor === constructor &&
                                                    match.constructor.prototype === prototype &&
                                                    match.__proto__ === __proto__
                                                ) && (result = !0)
                                            } catch (error) {}

                                        // Return
                                        return result
                                    }

                                    // Iterate Object
                                    function iterateObject(object, depthLevel, depthTree, index) {
                                        // Update > Object
                                        (typeof object == 'object') || (object = LDKF.object(object));

                                        // Initialization > ((Descriptors) Keys, Keys, Symbol Descriptors (Keys), Iteration (Keys, List), Distinct, Iterator, Length)
                                        let descriptors = LDKF.objectGetOwnPropertyDescriptors(object),
                                            descriptorsKeys = LDKF.objectKeys(descriptors),
                                            keys = LDKF.objectKeys(object),
                                            symbolDescriptors = LDKF.objectGetOwnPropertyDescriptors(symbol),
                                            symbolDescriptorsKeys = LDKF.objectKeys(symbolDescriptors),
                                            iterationKeys = [],
                                            iterationList = [],
                                            distinct = [],
                                            iterator = 0,
                                            length = symbolDescriptorsKeys.length;

                                        /* Loop
                                                Index Object.

                                            > Update > Iteration Keys
                                        */
                                        for (let key in object)
                                            LDKF.pushArray(iterationKeys, key);

                                        /* Loop
                                                Index Symbol Descriptors Keys.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Symbol Descriptor
                                            let symbolDescriptor = symbolDescriptors[symbolDescriptorsKeys[iterator]];

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if ('value' in symbolDescriptor) {
                                                // Initialization > Symbol Descriptor Value
                                                let symbolDescriptorValue = symbolDescriptor.value;

                                                // Error Handling > Update > Symbol Descriptor Keys
                                                try { (symbolDescriptorValue in object) || (symbolDescriptorsKeys[iterator] = void 0) }
                                                catch (error) { symbolDescriptorsKeys[iterator] = void 0 }
                                            }

                                            else
                                                // Update > Symbol Descriptor Keys
                                                symbolDescriptorsKeys[iterator] = void 0
                                        }

                                        // Update > (Symbol Descriptor Keys, Distinct)
                                        symbolDescriptorsKeys = LDKF.filterArray(symbolDescriptorsKeys, function(item) { return !LDKF.isUndefined(item) });
                                        LDKF.$pushArray(distinct, descriptorsKeys);
                                        LDKF.$pushArray(distinct, iterationKeys);
                                        LDKF.$pushArray(distinct, keys);

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = symbolDescriptorsKeys.length;

                                        /* Loop
                                                Index Symbol Descriptors Keys.

                                            > Update > Distinct
                                        */
                                        for (iterator; iterator != length; iterator += 1)
                                            LDKF.pushArray(distinct, symbolDescriptors[symbolDescriptorsKeys[iterator]].value);

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = distinct.length;

                                        /* Loop
                                                Index Distinct.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Distinct Item
                                            let distinctItem = distinct[iterator];

                                            // Update > Iteration List
                                            (function() {
                                                // Initialization > Iterator
                                                let iterator = iterationList.length;

                                                /* Loop
                                                        Index Iteration List.
                                                */
                                                while (iterator) {
                                                    // Initialization > Iteration List Item
                                                    let iterationListItem = iterationList[iterator -= 1];

                                                    // Error Handling > Logic > Return
                                                    try { if (iterationListItem == distinctItem) return !0 }
                                                    catch (error) {}
                                                }
                                            })() || LDKF.pushArray(iterationList, distinctItem)
                                        }

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = iterationList.length;

                                        /* Loop
                                                Index Iteration List.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Iteration List Item
                                            let iterationListItem = iterationList[iterator];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.includesArray(descriptorsKeys, iterationListItem)) {
                                                // Initialization > Descriptor
                                                let descriptor = descriptors[iterationListItem];

                                                // Update > Iteration List
                                                ('value' in descriptor) || (iterationList[iterator] = void 0)
                                            }
                                        }

                                        // Update > Iterator
                                        iterator = length = (iterationList = LDKF.filterArray(iterationList, function(item) { return !LDKF.isUndefined(item) })).length;

                                        /* Logic
                                                If the Main Depth Tree has been indexed.
                                        */
                                        if (depthTree.length && !LDKF.isNull(index)) {
                                            // Initialization > Sub Depth Tree
                                            let subDepthTree = new LDKF.array(length);

                                            // Loop > Update > Sub Depth Tree
                                            while (iterator)
                                                subDepthTree[iterator -= 1] = depthLevel;

                                            /* Loop
                                                    Index Iteration List.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Iteration List Item
                                                let iterationListItem = object[iterationList[iterator]];

                                                // Update > Sub Depth Tree
                                                match(iterationListItem) && (subDepthTree[iterator] += 1)
                                            }

                                            // Update > Iterator
                                            iterator = 0;

                                            /* Loop
                                                    Index Sub Depth Tree.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Sub Depth Branch
                                                let subDepthBranch = subDepthTree[iterator];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (subDepthBranch == depthLevel + 1) {
                                                    // Initialization > Sub Object
                                                    let sub_object = object[iterationList[iterator]];

                                                    // Update > Depth Tree
                                                    depthTree[index] += 1;

                                                    // Iterate Object > Sub Object
                                                    iterateObject(sub_object, 0, depthTree, index)
                                                }
                                            }
                                        }

                                        else {
                                            // Update > Depth Tree
                                            depthTree.length = length;

                                            // Loop > Update > Depth Tree
                                            while (iterator)
                                                depthTree[iterator -= 1] = depthLevel;

                                            /* Loop
                                                    Index Iteration List.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Iteration List Item
                                                let iterationListItem = object[iterationList[iterator]];

                                                // Update > Depth Tree
                                                match(iterationListItem) && (depthTree[iterator] += 1)
                                            }

                                            // Update > Iterator
                                            iterator = 0;

                                            /* Loop
                                                    Index Depth Tree.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Depth Branch
                                                let depthBranch = depthTree[iterator];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (depthBranch == depthLevel + 1) {
                                                    // Initialization > Sub Object
                                                    let sub_object = object[iterationList[iterator]];

                                                    /* Iterate Object > Sub Object
                                                            --- NOTE ---
                                                                #Lapys: Continue deep-searching.
                                                    */
                                                    iterateObject(sub_object, 0, depthTree, iterator)
                                                }
                                            }

                                            // Return
                                            return depthTree
                                        }
                                    }

                                /* Logic
                                        [if:else statement]

                                        --- NOTE ---
                                            #Lapys: Some objects are recursively infinite as
                                                they could have properties that point to themselves.
                                */
                                if (
                                    LDKF.isFunction(object) ||
                                    (LDKF.isString(object) && object.length) ||
                                    (function isRecursive() {
                                        // Initialization > Descriptors
                                        let descriptors = LDKF.objectGetOwnPropertyDescriptors(object);

                                        /* Loop
                                                Index Descriptors.
                                        */
                                        for (let descriptorKey in descriptors) {
                                            // Initialization > Descriptor
                                            let descriptor = descriptors[descriptorKey];

                                            // Logic > Error Handling > Logic > Return
                                            if ('value' in descriptor)
                                                try {
                                                    if (descriptor.value === object)
                                                        return !0
                                                } catch (error) {}
                                        }
                                    })()
                                )
                                    // Return
                                    return LDKO.numberPositiveInfinity;

                                else {
                                    // Error Handling
                                    try {
                                        // Initialization > Depth (Tree), Iterator
                                        let depth = 0,
                                            depthTree = iterateObject(object, 0, [], null),
                                            iterator = depthTree.length;

                                        /* Loop
                                                Index Depth Tree.
                                        */
                                        while (iterator) {
                                            // Initialization > Depth Branch
                                            let depthBranch = depthTree[iterator -= 1];

                                            // Update > Depth
                                            (depth < depthBranch) && (depth = depthBranch)
                                        }

                                        // Return
                                        return depth + 1
                                    } catch (error) {}

                                    // Return
                                    return LDKO.numberPositiveInfinity
                                }
                            };

                            // Get Regular Expression Characters
                            LDKF.getRegexChars = function getRegexChars() {
                                // Initialization > (String, Iterator, Stream)
                                let string = arguments[0],
                                    iterator = string.length,
                                    stream = '';

                                /* Loop
                                        Index String.
                                */
                                while (iterator) {
                                    // Initialization > Character
                                    let character = string[iterator -= 1];

                                    // Error Handling > Update > Stream
                                    try { (LDKF.matchString(character, LDKF.regex(character)) || []).length || (stream += character) }
                                    catch (error) { stream += character }
                                }

                                // Return
                                return stream
                            };

                            // Get Replicated Elements From Array
                            LDKF.getReplicatedElementsFromArray = function getReplicatedElementsFromArray() {
                                // Initialization > (Array, Iterator, Replicates, Originals)
                                let array = arguments[0],
                                    iterator = array.length,
                                    replicates = [],
                                    originals = [];

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    // Update > (Replicates | Original) > Item
                                    LDKF.pushArray((function() {
                                        // Initialization > Iterator
                                        let iterator = originals.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (originals[iterator -= 1] === item)
                                                return !0
                                    })() ? replicates : originals, item)
                                }

                                // Update > (Length, Originals)
                                iterator = replicates.length;
                                originals = [];

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = replicates[iterator -= 1];

                                    // Update > Originals > Item
                                    (function() {
                                        // Initialization > Iterator
                                        let iterator = originals.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (originals[iterator -= 1] === item)
                                                return !0
                                    })() || LDKF.pushArray(originals, item)
                                }

                                // Return
                                return originals
                            };

                            // Get Truthy Elements From Array
                            LDKF.getTruthyElementsFromArray = function getTruthyElementsFromArray() {
                                // Initialization > (Array, Truthies, Iterator)
                                let array = arguments[0],
                                    truthies = [],
                                    iterator = array.length;

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    // Update > Falsies
                                    item && LDKF.spliceArray(truthies, 0, 0, item)
                                }

                                // Return
                                return truthies
                            };

                            // Is Array
                            LDKF.isArray = function isArray() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Initialization > Value Constructor
                                    let valueConstructor = LDKF.isConstructible(value) ? value.constructor : null;

                                    // Update > Result
                                    (
                                        result &&
                                        (valueConstructor == LDKO.array && test(value) == '[object Array]') &&
                                        typeof value == 'object'
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Array-Like
                            LDKF.isArrayLike = function isArrayLike() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Initialization > Value Constructor
                                    let valueConstructor = LDKF.isConstructible(value) ? value.constructor : null;

                                    // Update > Result
                                    (
                                        result &&
                                        (
                                            (valueConstructor == LDKO.array && test(value) == '[object Array]') ||
                                            LDKF.isStrictlyArrayLike(value)
                                        ) &&
                                        (typeof value == 'object' || typeof value == 'undefined')
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Attribute
                            LDKF.isAttr = function isAttr() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.attrProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Boolean
                            LDKF.isBoolean = function isBoolean() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && typeof value != 'boolean') && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Character Data
                            LDKF.isCharacterData = function isCharacterData() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.characterDataProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Constructible
                            LDKF.isConstructible = function isConstructible() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        (test(value) == '[object Null]' || test(value) == '[object Undefined]') &&
                                        (typeof value == 'object' || typeof value == 'undefined')
                                    ) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Document
                            LDKF.isDocument = function isDocument() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.documentProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Document Fragment
                            LDKF.isDocumentFragment = function isDocumentFragment() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.documentFragmentProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Document Type
                            LDKF.isDocumentType = function isDocumentType() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.documentTypeProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Element
                            LDKF.isElement = function isElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.elementProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Evaluation String
                            LDKF.isEvaluationString = function isEvaluationString() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.toArray(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        !(function() {
                                            // Initialization > Data
                                            let data = !1;

                                            // Logic > Error Handling
                                            if (LDKF.isString(value))
                                                try {
                                                    // Execution
                                                    LDKF.eval('(function(){' + value + '})');

                                                    // Update > Data
                                                    data = !0
                                                } catch (error) {
                                                    // Error Handling
                                                    try {
                                                        // Execution
                                                        LDKF.eval('(function(){(' + value + ')})');

                                                        // Update > Data
                                                        data = !0
                                                    } catch (error) {}
                                                }

                                            // Return
                                            return data
                                        })()
                                    ) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Event Target
                            LDKF.isEventTarget = function isEventTarget() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.eventTargetProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Executable
                            LDKF.isExecutable = function isExecutable() {
                                // Initialization > (Data, Test In Sandbox, Sandbox Properties (Test))
                                let data = arguments[0],
                                    testInSandbox = !!arguments[1],
                                    sandboxProperties = arguments[2],
                                    sandboxPropertiesTest = {
                                        // Window
                                        window: LDKF.isWindow(sandboxProperties)
                                    };

                                // Initialization > (Evaluation, Length)
                                let evaluation = {completed: !1, feedback: null, value: null},
                                    length = arguments.length;

                                // Logic
                                if (length) {
                                    // Initialization > Code
                                    let code = LDKF.string(data);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (testInSandbox) {
                                        /* Initialization > Sandbox
                                                --- NOTE ---
                                                    #Lapys: Try to hide the new window.
                                        */
                                        let sandbox = LDKF.openWindow(window, 'about:blank', '', 'alwaysLowered=yes,alwaysRaised=no,chrome=yes,close=no,dialog=yes,fullscreen=no,left=0,height=1,menubar=no,outerWidth=0,resizable=no,scrollbars=no,status=no,titlebar=no,toolbar=no,top=0,width=1');

                                        // LapysJS Development Kit Functions
                                            /* (Blur, Focus, Stop) > (Sandbox | Window)
                                                    --- NOTE ---
                                                        #Lapys: Try to keep the executing window in focus.
                                            */
                                            LDKF.blurWindow(sandbox);
                                            LDKF.focusWindow(window);
                                            LDKF.stopWindow(sandbox);

                                        // Modification > Sandbox > Evaluation
                                        sandbox.evaluation = {completed: !1, feedback: null, value: !1};

                                        // LapysJS Development Kit Functions > Iterate Object
                                        (length > 2) && LDKF.iterateObject(function(key, value, description) {
                                            // Modification > Sandbox > [Key]
                                            (
                                                'value' in description &&
                                                sandboxPropertiesTest.window &&
                                                key == 'top' || key == 'window'
                                            ) || LDKF.objectDefineProperty(sandbox, key, description)
                                        }, sandboxProperties, !0, !1, function(key, description) {
                                            // Modification > Sandbox > [Key]
                                            LDKF.objectDefineProperty(sandbox, key, description)
                                        });

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isFunction(data)) {
                                            // Modification > Sandbox > Evaluation Test
                                            sandbox.evaluationTest = (function() { return data.call(sandbox) });

                                            // LapysJS Development Kit Functions > Write > (...)
                                            LDKF.writeDocument(
                                                LDKF.get.windowDocument(sandbox),

                                                // Document
                                                '<!DOCTYPE html>' +
                                                '<html hidden>' +
                                                    '<head>' +
                                                        // Stylesheets
                                                            // Document Stylesheet
                                                            '<style media=all type=text/css>' +
                                                                // All
                                                                '* {' +
                                                                    'cursor: none !important;' +
                                                                    'display: none !important;' +
                                                                    'filter: opacity(0) !important;' +
                                                                    'opacity: 0 !important;' +
                                                                    'pointer-events: none !important;' +
                                                                    'touch-action: none !important;' +
                                                                    'user-drag: none !important;' +
                                                                    'user-select: none !important;' +
                                                                    'visibility: hidden !important' +
                                                                '}' +
                                                            '</style>' +

                                                        // Scripts
                                                            // Document Script
                                                            '<script language=javascript type=text/javascript>' +
                                                                // Error Handling
                                                                'try {' +
                                                                    // Modification > Evaluation > (Feedback, Value)
                                                                    'evaluation.value = !0;' +
                                                                    'evaluation.feedback = window.evaluationTest()' +
                                                                '} catch (error) {' +
                                                                    // Modification > Evaluation > (Feedback, Value)
                                                                    'evaluation.feedback = error;' +
                                                                    'evaluation.value = !1' +
                                                                '}' +

                                                                // Modification > Evaluation > Completed
                                                                'evaluation.completed = !0' +
                                                            '</script>' +

                                                            // Document Script
                                                            '<script language=javascript type=text/javascript> window.close() </script>' +
                                                    '</head>' +
                                                '</html>'
                                            )
                                        }

                                        else
                                            // LapysJS Development Kit Functions > Write > (...)
                                            LDKF.writeDocument(
                                                LDKF.get.windowDocument(sandbox),

                                                // Document
                                                '<!DOCTYPE html>' +
                                                '<html hidden>' +
                                                    '<head>' +
                                                        // Stylesheets
                                                            // Document Stylesheet
                                                            '<style media=all type=text/css>' +
                                                                // All
                                                                '* {' +
                                                                    'cursor: none !important;' +
                                                                    'display: none !important;' +
                                                                    'filter: opacity(0) !important;' +
                                                                    'opacity: 0 !important;' +
                                                                    'pointer-events: none !important;' +
                                                                    'touch-action: none !important;' +
                                                                    'user-drag: none !important;' +
                                                                    'user-select: none !important;' +
                                                                    'visibility: hidden !important' +
                                                                '}' +
                                                            '</style>' +

                                                        // Scripts
                                                            // Document Script
                                                            '<script language=javascript type=text/javascript>' +
                                                                // Error Handling
                                                                'try {' +
                                                                    // Modification > Evaluation > (Feedback, Value)
                                                                    'evaluation.feedback = null;' +
                                                                    'evaluation.value = !0;' +

                                                                    // (...)
                                                                    code +
                                                                '} catch (error) {' +
                                                                    // Modification > Evaluation > (Feedback, Value)
                                                                    'evaluation.feedback = error;' +
                                                                    'evaluation.value = !1' +
                                                                '}' +

                                                                // Modification > Evaluation > Completed
                                                                'evaluation.completed = !0' +
                                                            '</script>' +

                                                            // Document Script
                                                            '<script language=javascript type=text/javascript>' +
                                                                /* Logic
                                                                        [if statement]
                                                                */
                                                                'if (!evaluation.completed) {' +
                                                                    // Error Handling
                                                                    'try {' +
                                                                        // Modification > Evaluation > (Feedback, Value)
                                                                        'evaluation.feedback = null;' +
                                                                        'evaluation.value = !0;' +

                                                                        // Execution
                                                                        "window.eval('" + LDKF.replaceString(code, /'/g, "\\'") + "')" +
                                                                    '} catch (error) {' +
                                                                        // Modification > Evaluation > (Feedback, Value)
                                                                        'evaluation.feedback = error;' +
                                                                        'evaluation.value = !1' +
                                                                    '}' +

                                                                    // Modification > Evaluation > Completed
                                                                    'evaluation.completed = !0' +
                                                                '}' +
                                                            '</script>' +

                                                            // Document Script
                                                            '<script language=javascript type=text/javascript> window.close() </script>' +
                                                    '</head>' +
                                                '</html>'
                                            );

                                        // Update > Evaluation
                                        evaluation = sandbox.evaluation
                                    }

                                    else
                                        // Error Handling
                                        try {
                                            // Execution
                                            LDKF.$eval('(function(){' + code + '})');

                                            // Update > Evaluation
                                            evaluation = {completed: !0, feedback: null, value: !0}
                                        } catch (error) {
                                            // Update > Evaluation
                                            evaluation = {completed: !0, feedback: error, value: !1}
                                        }
                                }

                                // Return
                                return LDKF.customObject('Evaluation', evaluation, {valueOf: function valueOf() { return evaluation.value }})
                            };

                            // Is False Boolean
                            LDKF.isFalseBoolean = function isFalseBoolean() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !value && typeof value == 'boolean') || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Finite
                            LDKF.isFinite = function isFinite() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        LDKF.numberIsFinite(value) &&
                                        LDKF.isNumber(value)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Function
                            LDKF.isFunction = function isFunction() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && typeof value != 'function') && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML All Collection
                            LDKF.isHtmlAllCollection = function isHtmlAllCollection() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlAllCollectionProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Collection
                            LDKF.isHtmlCollection = function isHtmlCollection() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlCollectionProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Element
                            LDKF.isHtmlElement = function isHtmlElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlElementProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Body Element
                            LDKF.isHtmlBodyElement = function isHtmlBodyElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlBodyElementProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Document
                            LDKF.isHtmlDocument = function isHtmlDocument() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlDocumentProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Head Element
                            LDKF.isHtmlHeadElement = function isHtmlHeadElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlHeadElementProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Input Element
                            LDKF.isHtmlInputElement = function isHtmlInputElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlInputElementProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is HTML Textarea Element
                            LDKF.isHtmlTextareaElement = function isHtmlTextareaElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.htmlTextareaElementProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Infinite
                            LDKF.isInfinite = function isInfinite() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        !LDKF.numberIsFinite(value) &&
                                        LDKF.isNumber(value)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Input Element
                            LDKF.isInputElement = function isInputElement() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (
                                                !result &&
                                                (
                                                    value == LDKO.htmlInputElementProto ||
                                                    value == LDKO.htmlTextareaElementProto
                                                )
                                            ) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Iterable
                            LDKF.isIterable = function isIterable() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.toArray(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        (LDKF.isConstructible(value) ?
                                            LDKF.isNull(value) ? !1 : LDKF.isNativeFunction(value[LDKO.symbolIterator]) :
                                            !1)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is JSON-Like Object
                            LDKF.isJSONLikeObject = function isJSONLikeObject() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.toArray(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        (LDKF.isConstructible(value) ? value.constructor === LDKO.object : !1)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Mobile Viewport
                            LDKF.isMobileViewport = function isMobileViewport() {
                                // Logic > Return
                                if (
                                    window.orientation > -1 ||
                                    LDKF.testRegex(/Android|BB|BlackBerry|IEMobile|iPad|iPhone|iPod|Kindle|Opera Mini|PlayBook|Silk|webOS|Windows Phone/i, LDKF.get.navigatorUserAgent(LDKO.$navigator))
                                )
                                    return !0;

                                // Return
                                return !1
                            };

                            // Is Native Function
                            LDKF.isNativeFunction = function isNativeFunction() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        !(function() {
                                            // Initialization > (Allow Parsing, Code (Iterator, Length), Matches (Iterator, Length), Parse-Lock Character, Stream, Strikes, Word)
                                            let allowParsing = !0,
                                                code = LDKF.isFunction(value) ? LDKF.toFunctionString(value) : '',
                                                codeIterator = 0,
                                                codeLength = code.length,
                                                matches = ['[Command Line API]', '[native code]'],
                                                matchesIterator = 0,
                                                matchesLength = matches.length,
                                                parseLockCharacter = '',
                                                stream = '',
                                                strikes = 0,
                                                word = '';

                                            // Logic > Return
                                            if (!codeLength)
                                                return !1;

                                            /* Loop
                                                    Index Matches.
                                            */
                                            for (matchesIterator; matchesIterator < matchesLength; matchesIterator += 1)
                                                /* Logic
                                                        [if statement]
                                                */
                                                if (codeLength < matches[matchesIterator].length) {
                                                    // Update > Strikes
                                                    strikes += 1;

                                                    // Logic > Return
                                                    if (strikes == matchesLength)
                                                        return !1
                                                }

                                            /* Loop
                                                    Index Matches.
                                            */
                                            for (matchesIterator = 0; matchesIterator < matchesLength; matchesIterator += 1) {
                                                // Initialization > Match (Length)
                                                let match = matches[matchesIterator],
                                                    matchLength = match.length;

                                                /* Update > Stream
                                                        --- NOTE ---
                                                            #Lapys: The Stream variable is unnecessary to this code.
                                                */
                                                stream && (stream += '\n');

                                                /* Loop
                                                        Iterate through the Code.
                                                */
                                                for (codeIterator = 0; codeIterator < codeLength; codeIterator += 1) {
                                                    // Initialization > ((Next) Character, Match Iterator)
                                                    let character = code[codeIterator],
                                                        nextCharacter = code[codeIterator + 1],
                                                        matchIterator = 0;

                                                    /* Logic
                                                            [if:else if statement]
                                                    */
                                                    if (allowParsing) {
                                                        // Update > Stream
                                                        stream += character;

                                                        // Logic > Update
                                                            // Allow Parsing
                                                            if (
                                                                character == '/' &&
                                                                (nextCharacter == '*' || nextCharacter == '/')
                                                            )
                                                                allowParsing = !1;

                                                            // Allow Parsing, Parse-Lock Character
                                                            if (character == '"' || character == "'" || character == '`') {
                                                                allowParsing = !1;
                                                                parseLockCharacter = character
                                                            }

                                                        // Logic > Return
                                                        if (word == match)
                                                            return !0;

                                                        /* Logic
                                                                Iterate through the current Match.
                                                        */
                                                        for (matchIterator; matchIterator < matchLength; matchIterator += 1) {
                                                            // Initialization > Match Character
                                                            let matchCharacter = match[matchIterator];

                                                            // Update > Word
                                                            (character == matchCharacter && word == LDKF.sliceString(match, 0, matchIterator)) && (word += match[word.length])
                                                        }
                                                    }

                                                    else if (
                                                        character == '\n' ||
                                                        (character == '*' && nextCharacter == '/') ||
                                                        (
                                                            (character == '"' || character == "'" || character == '`') &&
                                                            character == parseLockCharacter
                                                        )
                                                    )
                                                        // Update > Allow Parsing
                                                        allowParsing = !0
                                                }
                                            }

                                            /* Return
                                                    --- NOTE ---
                                                        #Lapys: The return value here is also not necessary.
                                            */
                                            return !1
                                        })()
                                    ) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Not a Number
                            LDKF.isNaN = function isNaN() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        LDKF.numberIsNaN(value) &&
                                        LDKF.isNumber(value)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Node
                            LDKF.isNode = function isNode() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.nodeProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Node List
                            LDKF.isNodeList = function isNodeList() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.nodeListProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Non-Constructible
                            LDKF.isNonConstructible = function isNonConstructible() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        (test(value) == '[object Null]' || test(value) == '[object Undefined]') &&
                                        (typeof value == 'object' || typeof value == 'undefined')
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Null
                            LDKF.isNull = function isNull() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        test(value) == '[object Null]' &&
                                        typeof value == 'object'
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Number
                            LDKF.isNumber = function isNumber() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && typeof value != 'number') && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Object
                            LDKF.isObject = function isObject() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        (
                                            LDKF.isArray(value) || LDKF.isBoolean(value) || LDKF.isFunction(value) ||
                                            LDKF.isNumber(value) || LDKF.isRegex(value) || LDKF.isString(value) || LDKF.isSymbol(value) ||
                                            LDKF.isNonConstructible(value)
                                        )
                                    ) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Regular Expression
                            LDKF.isRegex = function isRegex() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Initialization > Value Constructor
                                    let valueConstructor = LDKF.isConstructible(value) ? value.constructor : null;

                                    // Update > Result
                                    (
                                        result &&
                                        (valueConstructor == LDKO.regex && test(value) == '[object RegExp]') &&
                                        typeof value == 'object'
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Safe Integer
                            LDKF.isSafeInteger = function isSafeInteger() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        LDKF.numberIsSafeInteger(value) &&
                                        LDKF.isNumber(value)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Safe Number
                            LDKF.isSafeNumber = function isSafeNumber() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        LDKF.isFinite(value) &&
                                        LDKF.isNumber(value)
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Strictly Array-Like
                            LDKF.isStrictlyArrayLike = function isStrictlyArrayLike() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Initialization > Value Constructor
                                    let valueConstructor = LDKF.isConstructible(value) ? value.constructor : null;

                                    // Update > Result
                                    (
                                        result &&
                                        (
                                            (valueConstructor == LDKO.htmlAllCollection && test(value) == '[object HTMLAllCollection]') ||
                                            (valueConstructor == LDKO.htmlCollection && test(value) == '[object HTMLCollection]') ||
                                            (valueConstructor == LDKO.nodeList && test(value) == '[object NodeList]')
                                        ) &&
                                        (typeof value == 'object' || typeof value == 'undefined')
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is String
                            LDKF.isString = function isString() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && typeof value != 'string') && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Symbol
                            LDKF.isSymbol = function isSymbol() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Initialization > Value Constructor
                                    let valueConstructor = LDKF.isConstructible(value) ? value.constructor : null;

                                    // Update > Result
                                    (
                                        result &&
                                        (valueConstructor == LDKO.symbol && test(value) == '[object Symbol]') &&
                                        typeof value == 'symbol'
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is True Boolean
                            LDKF.isTrueBoolean = function isTrueBoolean() {
                                // Initialization > (Arguments, Result)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && value && typeof value == 'boolean') || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Undefined
                            LDKF.isUndefined = function isUndefined() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.arrayFrom(arguments),
                                    result = !0,
                                    test = LDKF.toObjectString;

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (
                                        result &&
                                        test(value) == '[object Undefined]' &&
                                        typeof value == 'undefined'
                                    ) || (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is Window
                            LDKF.isWindow = function isWindow() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.windowProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            // Is XML HTTP Request Event Target
                            LDKF.isXmlHttpRequestEventTarget = function isXmlHttpRequestEventTarget() {
                                // Initialization > (Arguments, Result, Test)
                                let args = LDKF.toArray(arguments),
                                    result = !0,
                                    test = (function() {
                                        // Initialization > (Object, Result)
                                        let object = arguments[0],
                                            result = !1;

                                        // Logic > Return
                                        if (LDKF.isNonConstructible(object))
                                            return result;

                                        // Initialization > Result
                                        let results = [object.__proto__];

                                        /* Loop
                                                [while statement]
                                        */
                                        while (!LDKF.isNull(results[results.length - 1])) {
                                            // Update > (Object, Results)
                                            object = object.__proto__;
                                            results[results.length] = object.__proto__
                                        }

                                        // LapysJS Development Kit Functions > Iterate Array
                                        LDKF.iterateArray(function(key, value) {
                                            // Update > Result
                                            (!result && value == LDKO.xmlHttpRequestEventTargetProto) && (result = !0)
                                        }, results);

                                        // Return
                                        return result
                                    });

                                // Logic > Return
                                if (!args.length)
                                    return !1;

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Update > Result
                                    (result && !test(value)) && (result = !1)
                                }, args);

                                // Return
                                return result
                            };

                            /* Iterate Array
                                    --- NOTE ---
                                        #Lapys: The only downsides to this method:
                                            - Slower than syntax-wise approaches using keywords.
                                            - Can not be stopped without an error.
                            */
                            LDKF.iterateArray = function iterateArray() {
                                // Initialization > (Arrays, Callback)
                                let arrays = LDKF.sliceArray || LDKO.arrayProto.slice,
                                    callback = arguments[0];

                                // Update > Arrays
                                arrays = arrays == LDKO.arrayProto.slice ? arrays.call(LDKF.arrayFrom(arguments), 1) : arrays(LDKF.arrayFrom(arguments), 1);

                                /* Function > Iterate
                                        --- NOTE ---
                                            #Lapys: Iterate one array.
                                */
                                function iterate() {
                                    // Initialization > (Array (Length), Callback, Iterator)
                                    let array = arguments[1],
                                        arrayLength,
                                        callback = arguments[0],
                                        iterator = 0;

                                    // Error Handling
                                    try { arrayLength = LDKO.string(array) }
                                    catch (error) { arrayLength = 0 }

                                    // Update > Array (Length)
                                    arrayLength = arrayLength == 'null' || arrayLength == 'undefined' ? 0 : array.length;
                                    (typeof arrayLength == 'number') || (arrayLength = 0);
                                    (
                                        LDKF.toObjectString(array) == '[object Array]' ||
                                        LDKF.toObjectString(array) == '[object HTMLAllCollection]' ||
                                        LDKF.toObjectString(array) == '[object HTMLCollection]' ||
                                        LDKF.toObjectString(array) == '[object NodeList]'
                                    ) || (array = []);

                                    // Function > Call
                                    function call() {
                                        // Return
                                        return callback.call(array, arguments[0], arguments[1])
                                    }

                                    /* Loop
                                            Iterate over Array Length.

                                        > Call
                                    */
                                    for (iterator = 0; iterator < arrayLength; iterator += 1)
                                        call(iterator, array[iterator]);

                                    /* Loop
                                            Index Array.

                                        > Call
                                    */
                                    for (iterator in array)
                                        (+iterator+'' == 'NaN') && call(iterator, array[iterator])
                                }

                                // Iterate
                                iterate(function(key, value) {
                                    // Iterate
                                    iterate(callback, value)
                                }, arrays)
                            };

                            /* Iterate Object
                                    --- NOTE ---
                                        #Lapys: The only downsides to this method:
                                            - Slower than syntax-wise approaches using keywords.
                                            - Can not be stopped without an error.
                            */
                            LDKF.iterateObject = function iterateObject() {
                                // Initialization > (Allow Error Messages, Callback, Force Iteration, Getter Property Values Alternative Callback (Is Function), Objects)
                                let allowErrorMessages = !!arguments[3],
                                    callback = arguments[0],
                                    forceIteration = !!arguments[2],
                                    getterPropertyValuesAlternativeCallback = arguments[4],
                                    getterPropertyValuesAlternativeCallbackIsFunction = LDKF.isFunction(getterPropertyValuesAlternativeCallback),
                                    objects = LDKF.sliceArray(LDKF.toArray(arguments), 1);

                                // Function > Iterate
                                function iterate() {
                                    // Initialization > (Callback, Iterator, Object (Property Descriptors (Keys (Length))))
                                    let callback = arguments[0],
                                        iterator = 0,
                                        object = LDKF.object(arguments[1]),
                                        objectPropertyDescriptors = LDKF.objectGetOwnPropertyDescriptors(object),
                                        objectPropertyDescriptorsKeys = LDKF.objectKeys(objectPropertyDescriptors),
                                        objectPropertyDescriptorsKeysLength = objectPropertyDescriptorsKeys.length;

                                    // Function > Call
                                    function call() {
                                        // Return
                                        return callback.apply(object, LDKF.toArray(arguments))
                                    }

                                    /* Loop
                                            Iterate over Object Property Descriptors Keys Length.
                                    */
                                    for (iterator = 0; iterator < objectPropertyDescriptorsKeysLength; iterator += 1) {
                                        // Initialization > (Object Property (Descriptors Key, Description), Value)
                                        let objectPropertyDescriptorsKey = objectPropertyDescriptorsKeys[iterator],
                                            objectPropertyDescription = objectPropertyDescriptors[objectPropertyDescriptorsKey],
                                            value;

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isNonConstructible(objectPropertyDescription.get) && LDKF.isNonConstructible(objectPropertyDescription.set))
                                            // Update > Value
                                            value = objectPropertyDescription.value;

                                        else
                                            // Error Handling
                                            try {
                                                // (...)
                                                getterPropertyValuesAlternativeCallbackIsFunction ?
                                                    getterPropertyValuesAlternativeCallback.call(object, objectPropertyDescriptorsKey, objectPropertyDescription) :
                                                    value = objectPropertyDescription.get.call(object)
                                            } catch (error) {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (forceIteration)
                                                    // Warn
                                                    allowErrorMessages && LDKF.warn('Error in iterating object property:\n\t' + error.message);

                                                else
                                                    // Logic > Error
                                                    if (allowErrorMessages)
                                                        LDKF.error("'iterateObject'", 'argument', 'Unable to iterate through object:\n\t' + error.message);

                                                    else
                                                        throw new LapysJSError
                                            }

                                        // Call
                                        call(objectPropertyDescriptorsKey, value, objectPropertyDescription)
                                    }
                                }

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Iterate
                                    iterate(callback, value)
                                }, objects)
                            };

                            /* Match Object Property
                                    --- NOTE ---
                                        #Lapys:
                                            - Searching deeper than the first layer of objects takes longer time than
                                                searching the first layer.
                                            - Searching properties not within the object are a pain because it
                                                recursively searches all current existing properties before deciding the result.
                                            - Searching global objects deeper than the first layer takes forever
                                                and depending on the machine, may or may not produce a result.
                            */
                            LDKF.matchObjectProperty = function matchObjectProperty() {
                                // Initialization > (Object, Property (Is Regular Expression), Sequence, Symbol, Data)
                                let object = arguments[0],
                                    property = arguments[1],
                                    propertyIsRegex = LDKF.isRegex(property),
                                    sequence = [],
                                    symbol = LDKO.symbol,
                                    data = {key: null, object: null, value: null};

                                // Function
                                    // Get Prototypes
                                    function getProtos(object) {
                                        // Initialization > Proto(s)
                                        let proto = object.__proto__,
                                            protos = [];

                                        // Loop > Update > Protos
                                        while (object.__proto__)
                                            LDKF.pushArray(protos, object = object.__proto__);

                                        // Return
                                        return protos
                                    }

                                    // Get Object Prototypes Keys
                                    function getObjectProtoKeys(object) {
                                        // Initialization > (Distinct, Keys, Descriptors, Prototypes, Iterator, Length)
                                        let distinct = [],
                                            keys = [],
                                            descriptors = LDKF.objectGetOwnPropertyDescriptors(object),
                                            protos = getProtos(object),
                                            iterator = 0,
                                            length = protos.length;

                                        /* Loop
                                                Index Prototypes.

                                            > Update > Keys
                                        */
                                        for (iterator; iterator != length; iterator += 1)
                                            LDKF.$pushArray(keys, getObjectKeys(protos[iterator]));

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = keys.length;

                                        /* Loop
                                                Index Keys.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Key
                                            let key = keys[iterator];

                                            // Update > Distinct
                                            LDKF.includesArray(distinct, key) || LDKF.pushArray(distinct, key)
                                        }

                                        // Return
                                        return distinct
                                    }

                                    // Get Object Keys
                                    function getObjectKeys(object) {
                                        // Initialization > (Object, Descriptors (Keys), Keys, Symbol Descriptors (Keys), Iterator, Length)
                                        let $object = LDKF.object(object),
                                            descriptors = LDKF.objectGetOwnPropertyDescriptors(object),
                                            descriptorsKeys = LDKF.objectKeys(descriptors),
                                            keys = LDKF.objectKeys(object),
                                            symbolDescriptors = LDKF.objectGetOwnPropertyDescriptors(symbol),
                                            symbolDescriptorsKeys = LDKF.objectKeys(symbolDescriptors),
                                            iterator = 0,
                                            length = keys.length;

                                        /* Loop
                                                Index Keys.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Key
                                            let key = keys[iterator];

                                            // Update > Descriptors Keys
                                            LDKF.includesArray(descriptorsKeys, key) || LDKF.pushArray(descriptorsKeys, key)
                                        }

                                        // Update > Keys
                                        keys = [];

                                        // Error Handling
                                        try {
                                            // Loop > Update > Keys
                                            for (let key in object)
                                                LDKF.pushArray(keys, key)
                                        } catch (error) {
                                            // Loop > Update > Keys
                                            for (let key in $object)
                                                LDKF.pushArray(keys, key)
                                        }

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = keys.length;

                                        /* Loop
                                                Index Keys.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Key
                                            let key = keys[iterator];

                                            // Update > Descriptors Keys
                                            LDKF.includesArray(descriptorsKeys, key) || LDKF.pushArray(descriptorsKeys, key)
                                        }

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = symbolDescriptorsKeys.length;

                                        /* Loop
                                                Index Symbol Descriptors Keys.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Symbol Descriptor
                                            let symbolDescriptor = symbolDescriptors[symbolDescriptorsKeys[iterator]];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if ('value' in symbolDescriptor) {
                                                // Initialization > Symbol Descriptor Value
                                                let symbolDescriptorValue = symbolDescriptor.value;

                                                // Error Handling
                                                try {
                                                    // Error Handling > Update > Descriptors Keys
                                                    try { (symbolDescriptorValue in object) && LDKF.pushArray(descriptorsKeys, symbolDescriptorValue) }
                                                    catch (error) { (symbolDescriptorValue in $object) && LDKF.pushArray(descriptorsKeys, symbolDescriptorValue) }
                                                } catch (error) {}
                                            }
                                        }

                                        //  Return
                                        return descriptorsKeys
                                    }

                                    // Index Prototypes
                                    function indexProtos(callback, object) {
                                        // Initialization > (Prototypes, Iterator, Length)
                                        let protos = getProtos(object),
                                            iterator = 0,
                                            length = protos.length;

                                        /* Loop
                                                Index Prototypes.

                                            > Callback
                                        */
                                        for (iterator; iterator != length; iterator += 1)
                                            callback.call(object, protos[iterator])
                                    }

                                    // Match
                                    function match(key, match) {
                                        // Return
                                        return propertyIsRegex ? (LDKF.isSymbol(key) ? !1 : (LDKF.matchString(key, match) || []).length) : key == match
                                    }

                                    // Set Value
                                    function setValue() {
                                        // Error Handling
                                        try {
                                            // Error Handling > Modification > Data > Value
                                            try { data.value = data.key in object ? object[data.key] : data.object[data.key] }
                                            catch (error) { data.value = LDKF.hasOwnPropertyObject(object, data.key) ? object[data.key] : data.object[data.key] }
                                        } catch (error) { data.value = error }

                                        // Return
                                        return data.value
                                    }

                                    // Search
                                    function search(object) {
                                        // Initialization > (Prototypes, Keys, Prototype Keys, Iterator, Length)
                                        let protos = getProtos(object),
                                            keys = getObjectKeys(object),
                                            protoKeys = getObjectProtoKeys(object),
                                            iterator = 0,
                                            length = protoKeys.length;

                                        /* Loop
                                                Index the Object`s prototypes for the property.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Prototype Key
                                            let protoKey = protoKeys[iterator];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (match(protoKey, property)) {
                                                // Modification > Data > (Key, Object)
                                                data.key = protoKey;
                                                data.object = (function() {
                                                    // Initialization > Prototype Object
                                                    let protoObject;

                                                    // Index Prototypes
                                                    indexProtos(function(proto) {
                                                        // Update > Prototype Object
                                                        protoObject || (LDKF.hasOwnPropertyObject(proto, protoKey) && (protoObject = proto))
                                                    }, object);

                                                    // Return
                                                    return protoObject
                                                })();

                                                // Set Value
                                                setValue();

                                                // Return
                                                return data
                                            }
                                        }

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = keys.length;

                                        /* Loop
                                                Index the Object itself for the property.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Key
                                            let key = keys[iterator];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (match(key, property)) {
                                                // Modification > Data > (Key, Object)
                                                data.key = key;
                                                data.object = object;

                                                // Set Value
                                                setValue();

                                                // Return
                                                return data
                                            }
                                        }

                                        // Initialization > (Maximum Call Stack Size, (Object, Source) Prototype)
                                        let maximumCallStackSize = LDKC.maximumCallStackSize,
                                            objectProto = LDKO.objectProto,
                                            sourceProto = protos[protos.length - 1];

                                        // Update > Iterator
                                        iterator = 0;

                                        /* Loop
                                                Repeat the search but with the Object`s properties.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > (Key, Value, Result)
                                            let key = keys[iterator],
                                                value, result;

                                            // Error Handling
                                            try {
                                                // Update > (Value, Result)
                                                value = object[key]
                                                result = (function deepSearch(key, sub_object) {
                                                    /* Logic
                                                            [if statement]

                                                            --- NOTE ---
                                                                #Lapys: Protect against edge cases.
                                                    */
                                                    if (!(
                                                        (key == 'constructor' && LDKF.isFunction(sub_object)) ||
                                                        sub_object === deepSearch ||
                                                        sub_object === matchObjectProperty ||
                                                        sub_object === object ||
                                                        sub_object === objectProto ||
                                                        sub_object === sourceProto ||
                                                        LDKF.includesArray(sequence, sub_object) ||
                                                        LDKF.getObjectDepth(sub_object) == maximumCallStackSize
                                                    )) {
                                                        // Update > Sequence
                                                        LDKF.pushArray(sequence, sub_object);
                                                        (sequence.length == maximumCallStackSize) && LDKF.spliceArray(sequence, 0, 1);

                                                        // Return
                                                        return search(sub_object)
                                                    }
                                                })(key, value)
                                            } catch (error) {}

                                            // Logic > Return
                                            if (result)
                                                return data = result
                                        }
                                    }

                                // Return
                                return search(object) || null
                            };

                            // Number
                            LDKF.$number = function parseNumber() {
                                // Initialization > Object
                                let object = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (
                                        LDKF.isFalseBoolean(object) ||
                                        (LDKF.isInfinite(object) && object < 0) ||
                                        LDKF.isNaN(object) || LDKF.isNonConstructible(object) || LDKF.isSymbol(object)
                                    )
                                        // Return
                                        return 0;

                                    else if (
                                        (LDKF.isInfinite(object) && object > 0) ||
                                        LDKF.isTrueBoolean(object)
                                    )
                                        // Return
                                        return 1;

                                    else if (LDKF.isNumber(object) || LDKF.isString(object)) {
                                        /* Initialization > (Evaluation (Length), Iterator)
                                                --- NOTE ---
                                                    #Lapys: For the `parseFloat` and `parseInt` methods,
                                                        strings are parsed as numbers.
                                        */
                                        let evaluation = LDKF.string(object),
                                            evaluationLength = evaluation.length,
                                            iterator = 0;

                                        /* Logic
                                                Iterate through Evaluation.

                                            > Logic > Return
                                        */
                                        for (iterator; iterator < evaluationLength; iterator += 1)
                                            if (evaluation[iterator] == 'x')
                                                return LDKF.numberParseInt(object);

                                        // Return
                                        return LDKF.numberParseFloat(object)
                                    }

                                    else if (LDKF.isArray(object))
                                        // Return
                                        return object.length;

                                    else if (LDKF.isStrictlyArrayLike(object)) {
                                        /* Logic
                                                [if:else if statement]

                                            > Return
                                        */
                                        if (LDKF.isHtmlAllCollection(object))
                                            return LDKF.get.htmlAllCollectionLength(object);

                                        else if (LDKF.isHtmlCollection(object))
                                            return LDKF.get.htmlCollectionLength(object);

                                        else if (LDKF.isNodeList(object))
                                            return LDKF.get.nodeListLength(object)
                                    }

                                    else if (LDKF.isObject(object)) {
                                        // Initialization > Count
                                        let count = 0;

                                        // LapysJS Development Kit Functions > Iterate Object
                                        LDKF.iterateObject(function() { count += 1 }, object, !0, !1);

                                        // Return
                                        return count
                                    }

                                    else if (LDKF.isFunction(object))
                                        // Return
                                        return LDKF.get.functionParameters(object).length
                                }

                                else
                                    // Return
                                    return NaN
                            };

                            // Performance Now
                            LDKF.performanceNow = function performanceNow() {
                                // Return
                                return LDKF.performanceProtoNow.call(LDKO.$performance)
                            };

                            // Query Event References
                            LDKF.queryEventReferences = function queryEventReferences() {
                                // Initialization > (Target, Event References, Iterator, Length)
                                let target = this,
                                    eventReferences = [],
                                    iterator = 0,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (LDKF.isJSONLikeObject(arguments[0]))
                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Argument
                                        let argument = arguments[iterator];

                                        // Error Handling > Update > Argument
                                        try { argument = LDKF.cloneObject(argument) }
                                        catch (error) {}

                                        // Error
                                        LDKF.isJSONLikeObject(argument) || LDKF.error(LDKF.debugMessage(argument, ['must', 'a'], 'readable EventOptions object'));

                                        // Modification > Argument > Options
                                        'useCapture' in argument ?
                                            ('options' in argument ? argument.options = {capture: !!argument.useCapture, once: argument.options.capture, passive: argument.options.passive} : argument.options = {capture: !!argument.useCapture, once: !1, passive: !1}) :
                                            ('options' in argument ? argument.options = {capture: !!argument.options.capture, once: !!argument.options.once, passive: !!argument.options.passive} : argument.options = {capture: !1, once: !1, passive: !1});

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if ('listeners' in argument || 'types' in argument) {
                                            // Modification > Argument > (Listeners, Types)
                                            ('listeners' in argument) || ('listener' in argument ? argument.listeners = [argument.listener] : LDKF.error('No listeners found on EventOptions object'));
                                            ('types' in argument) || ('type' in argument ? argument.types = [argument.type] : LDKF.error('No types found on EventOptions object'));

                                            // Error
                                            (!LDKF.isArray(argument.listeners) && !LDKF.isArray(argument.types)) && LDKF.error("Both 'listeners' and 'types' properties found in EventOptions object must be arrays of event listeners or event types");

                                            // Initialization > (Iterator, Length)
                                            let iterator = 0,
                                                length = LDKF.isArray(argument.listeners) ? LDKF.max(argument.listeners.length, argument.types.length) : argument.types.length;

                                            // Modification > Argument > (Listeners, Types)
                                            LDKF.isArray(argument.listeners) || (argument.listeners = [argument.listeners]);
                                            LDKF.isArray(argument.types) || (argument.types = [argument.types]);

                                            // Initialization > (Listeners (Iterator, Length), Types (Iterator, Length))
                                            let listenersIterator = 0,
                                                listenersLength = argument.listeners.length,
                                                typesIterator = 0,
                                                typesLength = argument.types.length;

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (length)
                                                /* Loop
                                                        [for statement]
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Update > (Listeners, Types) Iterator
                                                    listenersIterator = typeIterator = iterator;
                                                    (listenersIterator > listenersLength) && (listenersIterator = 0);
                                                    (typesIterator > typesLength) && (typesIterator = 0);

                                                    // Initialization > (Listener, Type)
                                                    let listener = argument.listeners[listenersIterator],
                                                        type = LDKF.string(argument.types[typesIterator]);

                                                    // Update > Listener
                                                    LDKF.isEvaluationString(listener) && (listener = LDKF.$func('event', listener));

                                                    // Error
                                                    LDKF.isFunction(listener) || LDKF.error(LDKF.debugMessage("Object in 'listeners' property in EventOptions object", ['must', 'a'], ['evaluation string', 'listener function']));

                                                    // Update > Event References
                                                    LDKF.pushArray(eventReferences, {listener: listener, options: argument.options, type: type})
                                                }

                                            else
                                                // Error
                                                LDKF.error('No listeners or types found on EventOptions object')
                                        }

                                        else {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if ('listener' in argument) {
                                                // Modification > Argument > Listener
                                                LDKF.isEvaluationString(argument.listener) && (argument.listener = LDKF.$func('event', argument.listener));

                                                //  Error
                                                LDKF.isFunction(argument.listener) || LDKF.error(LDKF.debugMessage("'listener' property in EventOptions object", ['must', 'a'], ['evaluation string', 'listener function']))
                                            }

                                            else
                                                // Error
                                                LDKF.error("missing 'listener' property in EventOptions object");

                                            // Modification > Argument > Type
                                            argument.type = LDKF.string(argument.type);

                                            // Update > Event References
                                            LDKF.pushArray(eventReferences, {listener: argument.listener, options: argument.options, type: argument.type})
                                        }
                                    }

                                else {
                                    // Initialization
                                        // (Listeners, Options, Types)
                                        let listeners = arguments.length > 1 ? (LDKF.isArray(arguments[1]) ? arguments[1] : [arguments[1]]) : [],
                                            options = arguments.length > 2 ? (LDKF.isArray(arguments[2]) ? arguments[2] : [arguments[2]]) : [{capture: !1, once: !1, passive: !1}],
                                            types = arguments.length ? (LDKF.isArray(arguments[0]) ? arguments[0] : [arguments[0]]) : [];

                                        // Initialization > (Listeners, Options, Types) (Iterator, Length)
                                        let listenersIterator = 0,
                                            listenersLength = listeners.length,
                                            optionsIterator = 0,
                                            optionsLength = options.length,
                                            typesIterator = 0,
                                            typesLength = types.length;

                                        // Length
                                        let length = LDKF.max(listenersLength, optionsLength, typesLength);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (listenersLength || typesLength)
                                        /* Loop
                                                [for statement]
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Update > (Listeners, Options, Types) Iterator
                                            listenersIterator = optionsIterator = typesIterator = iterator;
                                            (listenersIterator > listenersLength) && (listenersIterator = 0);
                                            (optionsIterator > optionsLength) && (optionsIterator = 0);
                                            (typesIterator > typesLength) && (typesIterator = 0);

                                            // Initialization > (Listener, Option, Type)
                                            let listener = listeners[listenersIterator],
                                                option = options[optionsIterator],
                                                type = LDKF.string(types[typesIterator]);

                                            // Update > Listener
                                            LDKF.isEvaluationString(listener) && (listener = LDKF.$func('event', listener));

                                            // Error
                                            LDKF.isFunction(listener) || LDKF.error(LDKF.debugMessage(listener, ['must', 'a'], ['evaluation string', 'function']));

                                            // Update > (Option, Event References)
                                            (LDKF.isBoolean(option) || !LDKF.isJSONLikeObject(option)) && (option = {capture: !!option, once: !1, passive: !1});
                                            LDKF.pushArray(eventReferences, {listener: listener, options: option, type: type})
                                        }

                                    else
                                        // Error
                                        LDKF.error('No listeners or types found')
                                }

                                // Return
                                return eventReferences
                            };

                            // Query Event Target
                            LDKF.queryEventTarget = function queryEventTarget(event) {
                                // Return
                                return LDKF.get.eventTarget(event) || LDKF.get.eventSrcElement(event) || LDKF.get.eventOriginalTarget(event)
                            };

                            // Query Input Element Caret Position
                            LDKF.queryInputElementCaretPosition = function queryInputElementCaretPosition() {
                                // Initialization > (Initial Caret Position, Input, Is HTML Input Element, Selection Start)
                                let initialCaretPosition = 0,
                                    input = arguments[0],
                                    isHtmlInputElement = LDKF.isHtmlInputElement(input),
                                    selectionStart = isHtmlInputElement ? LDKF.get.htmlInputElementSelectionStart(input) : LDKF.get.htmlTextareaElementSelectionStart(input);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKO.documentSelection) {
                                    LDKF.focusHtmlElement(input);

                                    let range = LDKF.createRangeDocumentSelection(LDKO.documentSelection);

                                    range.moveStart('character', -(isHtmlInputElement ? LDKF.get.htmlInputElementValue(input) : LDKF.get.htmlTextareaElementValue(input)).length)
                                    initialCaretPosition = range.text.length
                                }

                                else if (LDKF.isSafeInteger(selectionStart))
                                    // Update > Initial Caret Position
                                    initialCaretPosition = selectionStart;

                                // Return
                                return initialCaretPosition
                            };

                            /* Query Line
                                    --- UPDATE REQUIRED ---
                                        #Lapys: Modify for other browsers as well.
                                            Modification still pending:
                                                - Internet Explorer
                                                - Opera
                                                - Safari
                            */
                            LDKF.queryLine = function queryLine() {
                                // Initialization > (Error (Message, Stack), Iterator, Line, Protocol)
                                let browser = LDKO.browser.valueOf(),
                                    errorMessage = '',
                                    errorStack = '',
                                    iterator = 0,
                                    line = '',
                                    protocol = LDKO.locationProtocol;

                                // Error Handling
                                try {
                                    // Error
                                    throw new LDKO.error
                                } catch (error) {
                                    /* Initialization > Stack
                                            --- WARN ---
                                                #Lapys: Stack should be equivocal to Chrome`s `Error` object stack.
                                                    This is if the browser is not Chrome of course.
                                    */
                                    let stack = error.stack;

                                    // Update > (Error (Message, Stack), Line)
                                    errorMessage = error.constructor.name + ': ' + error.message;
                                    errorStack = line = stack
                                }

                                // Logic
                                if (browser != 'chrome')
                                    /* Logic
                                            [switch:case statement]

                                        > Update > Line
                                    */
                                    switch (browser) {
                                        // Firefox
                                        case 'firefox':
                                            line = errorMessage + '\n' + LDKF.sliceString(LDKF.replaceString('\n' + line, /\n[^@]{0,}@/g, function(match) {
                                                return '\n    at ' + LDKF.replaceString(LDKF.sliceString(match, '\n'.length), '@', '') + ' '
                                            }), '\n'.length)
                                    }

                                // Initialization > (Line Length, (Detect) Newline Quantity, Stream)
                                let lineLength = line.length,
                                    detectNewlineQuantity = 0,
                                    newlineQuantity = 0,
                                    stream = '';

                                // Logic > Update > Line
                                while (line[line.length - 1] == '\n') line = LDKF.sliceString(line, 0, -1);

                                /* Loop
                                        Iterate through Line.

                                    > Update > Newline Quantity
                                */
                                for (iterator; iterator < lineLength; iterator += 1)
                                    (line[iterator] == '\n') && (newlineQuantity += 1);

                                // Update > Newline Quantity
                                newlineQuantity -= 1;

                                /* Loop
                                        Iterate through Line.
                                */
                                for (iterator = 0; iterator < lineLength; iterator += 1) {
                                    // Initialization > Character
                                    let character = line[iterator];

                                    // Update > (Stream, Detect Newline Quantity)
                                    character && (detectNewlineQuantity > newlineQuantity) && (stream += character);
                                    (character == '\n') && (detectNewlineQuantity += 1)
                                }

                                // (Loop > Update > Stream, Update > Stream)
                                while (stream[0] == ' ') stream = LDKF.sliceString(stream, 1);
                                stream = LDKF.sliceString(stream, 'at'.length);
                                while (stream[0] == ' ') stream = LDKF.sliceString(stream, 1);
                                while (stream[stream.length - 1] == '\n') stream = LDKF.sliceString(stream, 0, -1);

                                /* Logic
                                        [if statement]
                                */
                                if (
                                    browser == 'edge' &&
                                    (
                                        stream[0] != 'e' && stream[1] != 'v' && stream[2] != 'a' && stream[3] != 'l' &&
                                        stream[4] != ' ' &&
                                        stream[5] != 'c' && stream[6] != 'o' && stream[7] != 'd' && stream[8] != 'e'
                                    )
                                ) {
                                    // Loop > Update > Stream
                                    while (
                                        stream &&
                                        (function() {
                                            // Initialization > (Iterator, Protocol Length)
                                            let iterator = 0,
                                                protocolLength = protocol.length;

                                            /* Loop
                                                    Iterate through Protocol.

                                                > Logic > Return
                                            */
                                            for (iterator; iterator < protocolLength; iterator += 1)
                                                if (stream[iterator] != protocol[iterator])
                                                    return !0;

                                            // Return
                                            return !1
                                        })()
                                    ) stream = LDKF.sliceString(stream, 1);
                                    while (stream[stream.length - 1] == ')') stream = LDKF.sliceString(stream, 0, -1)
                                }

                                // Initialization > (Stream Length, Row-Column, Allow Parsing, Source Code)
                                let streamLength = stream.length,
                                    rowColumn = (function() {
                                        // Initialization > (Decremented Stream Length, Reverse Stream, Match, Row-Column)
                                        let decrementedStreamLength = streamLength - 1,
                                            reverseStream = '',
                                            match = '',
                                            rowColumn = '';

                                        /* Loop
                                                Iterate through Stream.

                                            > Update > Reverse Stream
                                        */
                                        for (iterator = decrementedStreamLength; iterator > -1; iterator -= 1)
                                            reverseStream += stream[iterator];

                                        // Initialization > Reverse Stream Length
                                        let reverseStreamLength = reverseStream.length;

                                        /* Loop
                                                Iterate through Reverse Stream.
                                        */
                                        for (iterator = 0; iterator < reverseStreamLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = reverseStream[iterator];

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (
                                                character == '0' || character == '1' || character == '2' || character == '3' || character == '4' || character == '5' || character == '6' || character == '7' || character == '8' || character == '9' ||
                                                character == ':'
                                            )
                                                // Update > Match
                                                match += character;

                                            else
                                                // Break
                                                break
                                        }

                                        // Initialization > Decremented Match Length
                                        let decrementedMatchLength = match.length - 1;

                                        /* Loop
                                                Iterate through Match.

                                            > Update > Row Column.
                                        */
                                        for (iterator = decrementedMatchLength; iterator > -1; iterator -= 1)
                                            (iterator == decrementedMatchLength) || (rowColumn += match[iterator]);

                                        // Initialization > (Array, Split, Row-Column Length)
                                        let array = ['', ''],
                                            split = !1,
                                            rowColumnLength = rowColumn.length;

                                        /* Loop
                                                Iterate through Row-Column.
                                        */
                                        for (iterator = 0; iterator < rowColumnLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = rowColumn[iterator];

                                            // Update > (Split, Array)
                                            (character == ':') && (split = !0);
                                            array[split ? 1 : 0] += character
                                        }

                                        // Update > Array
                                        array[0] = +array[0];
                                        array[1] = +LDKF.sliceString(array[1], 1);

                                        // Return
                                        return array
                                    })(), allowParsing = !0,
                                    sourceCode = '';

                                /* Loop
                                        Iterate through Stream.
                                */
                                for (iterator = 0; iterator < streamLength; iterator += 1) {
                                    // Initialization > Character
                                    let character = stream[iterator];

                                    // Update > (Allow Parsing, Source Code)
                                    (
                                        allowParsing && character == ':' &&
                                        (function() {
                                            // Initialization > (Row Column (Iterator, Length))
                                            let rowColumnIterator = 0,
                                                $rowColumn = ':' + rowColumn[0] + ':' + rowColumn[1],
                                                rowColumnLength = rowColumn.length;

                                            /* Loop
                                                    Iterate through Row Column.

                                                > Logic > Return
                                            */
                                            for (rowColumnIterator; rowColumnIterator < rowColumnLength; rowColumnIterator += 1)
                                                if (stream[iterator + rowColumnIterator] != $rowColumn[rowColumnIterator])
                                                    return !1;

                                            // Return
                                            return !0
                                        })()
                                    ) && (allowParsing = !1);
                                    allowParsing && (sourceCode += character)
                                }

                                // Update > (Source Code, Line)
                                sourceCode = sourceCode == '<anonymous>' || sourceCode == 'debugger eval code' ? null : LDKF.requestFile('GET', sourceCode, {}, !1);
                                line = LDKF.customObject('Line', new (function Object() {
                                    // Initialization > Target
                                    let that = this;

                                    // Modification > Target
                                        // Code
                                        LDKF.objectDefineProperty(that, 'code', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Get
                                            get: function Code() {
                                                // Initialization > (Allow Parsing, Code (Length), Iterator, Newline (Index, Quantity), Stream)
                                                let allowParsing = !1,
                                                    code = LDKF.isNull(sourceCode) ? '' : (sourceCode.constructor == LDKO.xmlHttpRequest ? LDKF.get.xmlHttpRequestResponseText(sourceCode) : LDKF.get.xDomainRequestResponseText(sourceCode)),
                                                    codeLength = code.length,
                                                    iterator = 0,
                                                    newlineIndex = rowColumn[0] - 1,
                                                    newlineQuantity = 0,
                                                    stream = '';

                                                /* Loop
                                                        Iterate through Code.
                                                */
                                                for (iterator; iterator < codeLength; iterator += 1) {
                                                    // Initialization > Character
                                                    let character = code[iterator];

                                                    // Update > Newline Quantity
                                                    (character == '\n') && (newlineQuantity += 1);

                                                    // Logic > Return
                                                    if (newlineQuantity > newlineIndex)
                                                        return stream;

                                                    /* Logic
                                                            [if:else if statement]

                                                        > Update
                                                    */
                                                    if (allowParsing)
                                                        // Stream
                                                        stream += character;

                                                    else if (newlineQuantity == newlineIndex)
                                                        // Allow Parsing
                                                        allowParsing = !0
                                                }

                                                // Return
                                                return stream
                                            }
                                        });

                                        // Column
                                        that.column = rowColumn[1];

                                        // Row
                                        that.row = rowColumn[0];

                                        // Source
                                        that.src = stream;

                                        // Stack
                                        that.stack = (function(a){while(a[0]=='\n')a=LDKF.sliceString(a,1);while(a[a.length-1]=='\n')a=LDKF.sliceString(a,0,-1);return a})(LDKF.replaceString(errorStack,errorMessage,''));

                                    // Return
                                    return that
                                }), new (function() {
                                    // Initialization > Target
                                    let that = this;

                                    // Modification > Target > Value Of
                                    LDKF.objectDefineProperty(that, 'valueOf', {value: function valueOf() { return sourceCode }});

                                    // Return
                                    return that
                                }));

                                // Return
                                return line
                            };

                            // Request Animation Frame
                            LDKF.requestAnimationFrame = (function() {
                                // Initialization > Method
                                let method = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

                                // Return
                                return function requestAnimationFrame() { return method.call(window, arguments[0]) }
                            })();

                            // Request File
                            LDKF.requestFile = function requestFile() {
                                // Initialization > (Allow (Request, Warnings), Browser, Length, Host (Name), Properties, Protocol, Protocol Schemes, Match Protocol, Source, Request (Type))
                                let allowRequest = !0,
                                    allowWarnings = !arguments[3],
                                    browser = LDKO.browser.valueOf(),
                                    length = arguments.length,
                                    host = LDKO.locationHost,
                                    hostName = LDKO.locationHostname,
                                    properties = length > 2 ? LDKF.objectAssign({}, LDKF.object(arguments[2])) : {},
                                    protocol = LDKF.replaceString(LDKO.locationProtocol, /[^a-zA-Z]/g, ''),
                                    protocolSchemes = ['about', 'data', 'http', 'https'],
                                    matchProtocol = LDKF.indexOfArray(protocolSchemes, protocol) == -1 ? !1 : !0,
                                    source = length > 1 ? LDKF.string(arguments[1]) : '#',
                                    requestType = LDKF.string(arguments[0]),
                                    request = new LDKO.xmlHttpRequest;

                                /* Logic
                                        [if statement]
                                */
                                if (
                                    (
                                        matchProtocol ||
                                        (!matchProtocol && (browser == 'edge' || browser == 'ie'))
                                    ) &&
                                    !(
                                        browser == 'edge' &&
                                        (
                                            (host == 'localhost' || hostName == '127.0.0.1') ||
                                            (hostName == 'localhost' || hostName == '127.0.0.1')
                                        )
                                    )
                                ) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (length) {
                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (LDKF.isBoolean(request.withCredentials))
                                            // LapysJS Development Kit Functions > Open XML HTTP Request
                                            LDKF.openXmlHttpRequest(request, requestType, source, !0);

                                        else if (LDKF.isFunction(window.XDomainRequest) || LDKF.isObject(window.XDomainRequest))
                                            // LapysJS Development Kit Functions > Open X Domain Request
                                            LDKF.openXDomainRequest(request = new LDKO.xDomainRequest, requestType, source, !0);

                                        else {
                                            // Update > (Allow) Request
                                            allowRequest = !1;
                                            request = new LDKO.xmlHttpRequest;

                                            // Warn
                                            LDKF.warn('Cross-origin Resource Sharing (CORS) is not supported by this browser.')
                                        }

                                        /* Logic
                                                [if statement]
                                        */
                                        if (allowRequest) {
                                            // LapysJS Development Kit Functions
                                                // Iterate Object
                                                LDKF.iterateObject(function(key, value, description) {
                                                    // Modification > Request > [Key]
                                                    'value' in description && (request[key] = value)
                                                }, properties);

                                                // Send (XML HTTP, X Domain) Request
                                                request.constructor == LDKO.xmlHttpRequest ? LDKF.sendXmlHttpRequest(request) : LDKF.sendXDomainRequest(request)
                                        }

                                        // Return
                                        return request
                                    }
                                }

                                else
                                    // Warn
                                    allowWarnings || LDKF.warn("'requestFile'", 'argument', "The current protocol must match the following ones: " + (function(a){a=LDKF.cloneObject(a);let $a=a.length,_a=$a-1,__a=_a-1,b=0,c='';for(b;b<$a;b+=1)c+="'"+a[b]+"'"+(b==_a?'':(b==__a?' and ':', '));return c})(protocolSchemes) + '; Or the server may understand the request and not support it');

                                // Return
                                return null
                            };

                            // Reset Array
                            LDKF.resetArray = function resetArray() {
                                // Initialization > (New) Array
                                let array = arguments[0],
                                    newArray = arguments[1];

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, newArray);

                                // Return
                                return array
                            };

                            // Set Interval
                            LDKF.setInterval = (function() {
                                // Initialization > Method
                                let method = window.setInterval;

                                // Return
                                return function setInterval() { return method.apply(window, LDKF.toArray(arguments)) }
                            })();

                            /* Sort List
                                    --- NOTE ---
                                        #Lapys: Use this method to sort array or string lists.
                            */
                            LDKF.sortList = function sortList() {
                                // Initialization > (List, Sorted)
                                let list = arguments[0],
                                    sorted = [];

                                /* Logic
                                        [if:else statement]
                                */
                                if (LDKF.isString(list)) {
                                    // Initialization > (Index, Iterator, Length)
                                    let index = 0,
                                        iterator = 0,
                                        length = list.length;

                                    /* Loop
                                            Iterate through List.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Character
                                        let character = list[iterator];

                                        // Update > (Index, Sorted)
                                        (character == ' ') && (index += 1);
                                        index in sorted ? sorted[index] += character : sorted[index] = character
                                    }
                                }

                                else {
                                    // Initialization > Iterator
                                    let iterator = list.length;

                                    // Update > List
                                    list = LDKF.arrayFrom(list);

                                    // Loop > Update > List
                                    while (iterator)
                                        list[iterator -= 1] = LDKF.string(list[iterator]);

                                    // Update > Sorted
                                    sorted = list
                                }

                                // Update > Iterator
                                iterator = sorted.length;

                                /* Loop
                                        Index Sorted.
                                */
                                while (iterator) {
                                    // Initialization > (Item, (Allow) Stream, Trailing Space, Item (Iterator, Length))
                                    let item = sorted[iterator -= 1],
                                        allowStream = !1,
                                        stream = '',
                                        trailingSpace = '',
                                        itemIterator = 0,
                                        itemLength = (item || []).length;

                                    /* Logic
                                            [if statement]
                                    */
                                    if (item) {
                                        /* Loop
                                                Iterate through Item.
                                        */
                                        for (itemIterator; itemIterator != itemLength; itemIterator += 1) {
                                            // Initialization > Character
                                            let character = item[itemIterator];

                                            // Update > (Allow) Stream
                                            allowStream || ((character == ' ') || (allowStream = !0));
                                            allowStream && (stream += character)
                                        }

                                        /* Loop
                                                Iterate through Item.
                                        */
                                        while (itemIterator) {
                                            // Initialization > Character
                                            let character = item[itemIterator -= 1];

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (character == ' ')
                                                // Update > Trailing Space
                                                trailingSpace += character;

                                            else
                                                // Break
                                                break
                                        }

                                        // Initialization > Trailing Space Length
                                        let trailingSpaceLength = trailingSpace.length;

                                        // Update > (Stream, Sorted)
                                        trailingSpaceLength && (stream = LDKF.sliceString(stream, 0, -trailingSpaceLength));
                                        sorted[iterator] = (function isSparse() {
                                            // Initialization > Iterator
                                            let iterator = item.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item[iterator -= 1] != ' ')
                                                    return !1;

                                            // Return
                                            return !0
                                        })() ? void 0 : stream
                                    }
                                }

                                // Update > Sorted
                                sorted = LDKF.filterArray(sorted, function(item) { return !LDKF.isUndefined(item) });

                                // Return
                                return sorted
                            };

                            // String
                            LDKF.$string = function String() {
                                // Initialization > (Iterator, Length, String)
                                let iterator = 0,
                                    length = arguments.length,
                                    string = '';

                                /* Loop
                                        Index Arguments.

                                    > Update > String
                                */
                                for (iterator; iterator < length; iterator += 1)
                                    string += LDKF.string(arguments[iterator]);

                                // Return
                                return string
                            };

                            // To Array
                            LDKF.toArray = function toArray() {
                                // Initialization > (Array, Arguments)
                                let array = [],
                                    args = LDKF.arrayFrom(arguments);

                                // LapysJS Development Kit Functions > Iterate Array
                                LDKF.iterateArray(function(key, value) {
                                    // Logic > Error Handling > Update > Value
                                    if (!LDKF.isArrayLike(value))
                                        try { value = LDKF.arrayFrom(value) }
                                        catch (error) { value = [value] }

                                    // LapysJS Development Kit Functions > Iterate Array
                                    LDKF.iterateArray(function(key, value) {
                                        // Modification > Array > (Key, Array > Length)
                                        array[+key+'' == 'NaN' ? key : array.length] = value
                                    }, value)
                                }, args);

                                // Return
                                return array
                            };

                            // To Function String
                            LDKF.toFunctionString = function toFunctionString() {
                                // Initialization > (Data, Parser, String)
                                let data = arguments[0],
                                    parser = LDKF.funcProtoToString || LDKO.$funcProto.toString,
                                    string = LDKF.string(data),
                                    $string = LDKF.replaceString(LDKF.replaceString(string, /'[^']{0,}'|"[^"]{0,}"|`[^`]{0,}`|\/\/[^\n]{0,}\n|(\/\*[^\*]{0,}\*\/|\/\*[^\/]{0,}\*\/)/g, ''), /'[^']{0,}'|"[^"]{0,}"|`[^`]{0,}`|\/\/[^\n]{0,}\n|(\/\*[^\*]{0,}\*\/|\/\*[^\/]{0,}\*\/)/g, '');

                                // Function > Parse
                                function parse() { return parser.call(data) }

                                /* Logic
                                        [if:else statement]

                                        --- NOTE ---
                                            #Lapys: Not the best test for if the function is native or not, but it will do.
                                */
                                if (
                                    LDKF.indexOfString(parse(), '[native code]') != -1 ||
                                    (
                                        LDKF.indexOfString($string, '[Command Line API]') != -1 ||
                                        LDKF.indexOfString($string, '[native code]') != -1
                                    )
                                )
                                    // Error Handling
                                    try {
                                        // Update > String
                                        string = LDKF.eval(string);
                                        string = typeof string == 'function' ? LDKF.string(string) : parse()
                                    }

                                    catch (error) {
                                        // Update > String
                                        string = LDKF.string(data);

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (error.constructor === LDKO.syntaxError) {
                                            // Initialization > ((Allow, Continued, Stopped) Parsing, Iterator, Stream, String Length)
                                            let allowParsing = !0,
                                                iterator = 0,
                                                continuedParsing = iterator,
                                                stoppedParsing = iterator,
                                                stream = '',
                                                stringLength = string.length;

                                            /* Loop
                                                    Iterate through String.
                                            */
                                            for (iterator; iterator < stringLength; iterator += 1) {
                                                // Initialization > (Next, Previous) Character
                                                let character = string[iterator],
                                                    nextCharacter = string[iterator + 1],
                                                    previousCharacter = string[iterator - 1];

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (allowParsing) {
                                                    // Logic > Update
                                                        // (Allow, Stopped) Parsing
                                                        if (
                                                            character == '/' &&
                                                            (nextCharacter == '*' || nextCharacter == '/')
                                                        ) {
                                                            allowParsing = !1;
                                                            stoppedParsing += 1
                                                        }

                                                        // (Allow, Stopped) Parsing, Parse-Lock Character
                                                        if (character == '"' || character == "'" || character == '`') {
                                                            allowParsing = !1;
                                                            parseLockCharacter = character;
                                                            stoppedParsing += 1
                                                        }

                                                    /* Update > Stream
                                                            --- NOTE ---
                                                                #Lapys: Prevent ignored & delimited code such as
                                                                    comments and strings to be added to Stream.
                                                    */
                                                    (
                                                        continuedParsing == stoppedParsing &&
                                                        (character != '/' && previousCharacter != '*')
                                                    ) && (stream += character)
                                                }

                                                else if (
                                                    character == '\n' ||
                                                    (character == '*' && nextCharacter == '/') ||
                                                    (
                                                        (character == '"' || character == "'" || character == '`') &&
                                                        character == parseLockCharacter
                                                    )
                                                ) {
                                                    // Update > Allow Parsing
                                                    allowParsing = !0;
                                                    continuedParsing += 1
                                                }
                                            }

                                            // Update > String
                                            string = stream;

                                            // Error Handling
                                            try {
                                                // Execution
                                                LDKF.eval(string);

                                                // Update > String
                                                string = LDKF.string(string)
                                            } catch (error) {
                                                // Update > String
                                                string = error.constructor === LDKO.syntaxError && error.message == 'Unexpected identifier' ? LDKF.string(string) : parse()
                                            }
                                        }

                                        else
                                            // Update > String
                                            string = parse()
                                    }

                                else
                                    // Error Handling > Update > String
                                    try {
                                        string = LDKF.eval(string);
                                        string = typeof string == 'function' ? LDKF.string(string) : parse()
                                    } catch (error) { string = parse() }

                                // Return
                                return string
                            };

                            // To Object String
                            LDKF.toObjectString = function toObjectString() {
                                // Initialization > Data
                                let data = arguments[0];

                                // Return
                                return (LDKF.objectProtoToString || LDKO.$objectProto.toString).call(data)
                            };

                            // Warn
                            LDKF.warn = function warn() {
                                // Error
                                LDKF.consoleWarn(LDK.info.errorMessagePrefix + LDKF.debugMessage.apply(LDKF, LDKF.toArray(arguments)))
                            };

                        /* Objects
                                --- NOTE ---
                                    #Lapys: Backup all necessary objects and methods.
                        */
                            // Array
                            LDKO.array = Array;
                                // Prototype
                                LDKO.arrayProto = LDKO.array.prototype;
                                LDKO.$arrayProto = LDKO.arrayProto;
                                LDKF.setTimeout(function() { LDKO.$arrayProto = LDKF.cloneObject(LDKO.$arrayProto) });

                            // Attribute
                            LDKO.attr = Attr;
                                // Prototype
                                LDKO.attrProto = LDKO.attr.prototype;
                                LDKO.$attrProto = LDKO.attrProto;
                                LDKF.setTimeout(function() { LDKO.$attrProto = LDKF.cloneObject(LDKO.$attrProto) });

                            // Boolean
                            LDKO.boolean = Boolean;
                                // Prototype
                                LDKO.booleanProto = LDKO.boolean.prototype;

                            // Character Data
                            LDKO.characterData = CharacterData;
                                // Prototype
                                LDKO.characterDataProto = LDKO.characterData.prototype;

                            // CSS Style Declaration
                            LDKO.cssStyleDeclaration = CSSStyleDeclaration;
                                // Prototype
                                LDKO.cssStyleDeclarationProto = LDKO.cssStyleDeclaration.prototype;

                            // Custom Element Registry
                            LDKO.customElementRegistry = window.CustomElementRegistry;

                            // Custom Elements
                            LDKO.customElements = window.customElements;

                            // Document
                            LDKO.document = Document;
                            Object.defineProperty(LDKO, '$document', {get: function document() { return tmpObject.documentDescription.get.call(window) }});
                                // Create Event
                                LDKO.documentCreateEvent = LDKO.$document.createEvent;

                                // Fonts
                                LDKO.documentFonts = LDKO.$document.fonts;

                                // Prototype
                                LDKO.documentProto = LDKO.document.prototype;
                                LDKO.$documentProto = LDKO.documentProto;
                                LDKF.setTimeout(function() { LDKO.$documentProto = LDKF.cloneObject(LDKO.$documentProto) });

                                // Selection
                                LDKO.documentSelection = LDKO.$document.selection;

                            // Document Fragment
                            LDKO.documentFragment = DocumentFragment;
                                // Prototype
                                LDKO.documentFragmentProto = LDKO.documentFragment.prototype;

                            // Document Type
                            LDKO.documentType = DocumentType;
                                // Prototype
                                LDKO.documentTypeProto = LDKO.documentType.prototype;

                            // DOM Exception
                            LDKO.domException = DOMException;

                            // DOM Rectangle
                            LDKO.domRectangle = window.DOMRect || window.ClientRect;
                                // Prototype
                                LDKO.domRectangleProto = LDKO.domRectangle.prototype;

                            // DOM Rectangle Read-Only
                            LDKO.domRectangleReadOnly = window.DOMRectReadOnly || LDKO.domRectangle;
                                // Prototype
                                LDKO.domRectangleReadOnlyProto = LDKO.domRectangleReadOnly.prototype;

                            // DOM Token List
                            LDKO.domTokenList = window.DOMTokenList || (function() {});
                                // Prototype
                                LDKO.domTokenListProto = LDKO.domTokenList.prototype;

                            // Element
                            LDKO.element = Element;
                                // Prototype
                                LDKO.elementProto = LDKO.element.prototype;
                                LDKO.$elementProto = LDKO.elementProto;
                                LDKF.setTimeout(function() { LDKO.$elementProto = LDKF.cloneObject(LDKO.$elementProto) });
                            // Error
                            LDKO.error = Error;
                                // Prototype
                                LDKO.errorProto = LDKO.error.prototype;

                            // Event
                            LDKO.event = Event;
                                // Prototype
                                LDKO.eventProto = LDKO.event.prototype;

                            // Event Target
                            LDKO.eventTarget = EventTarget;
                                // Prototype
                                LDKO.eventTargetProto = LDKO.eventTarget.prototype;
                                LDKO.$eventTargetProto = LDKO.eventTargetProto;
                                LDKF.setTimeout(function() { LDKO.$eventTargetProto = LDKF.cloneObject(LDKO.$eventTargetProto) });

                            // File
                            LDKO.file = File;

                            // Function
                            LDKO.func = Function;
                                // Prototype
                                LDKO.funcProto = LDKO.func.prototype;
                                LDKO.$funcProto = LDKO.funcProto;
                                LDKF.setTimeout(function() { LDKO.$funcProto = LDKF.cloneObject(LDKO.$funcProto) });

                            // HTML All Collection
                            LDKO.htmlAllCollection = HTMLAllCollection;
                                // Prototype
                                LDKO.htmlAllCollectionProto = LDKO.htmlAllCollection.prototype;

                            // HTML Anchor Element
                            LDKO.htmlAnchorElement = HTMLAnchorElement;
                                // Prototype
                                LDKO.htmlAnchorElementProto = LDKO.htmlAnchorElement.prototype;

                            // HTML Body Element
                            LDKO.htmlBodyElement = HTMLBodyElement;
                                // Prototype
                                LDKO.htmlBodyElementProto = LDKO.htmlBodyElement.prototype;

                            // HTML Collection
                            LDKO.htmlCollection = HTMLCollection;
                                // Prototype
                                LDKO.htmlCollectionProto = LDKO.htmlCollection.prototype;

                            // HTML Document
                            LDKO.htmlDocument = HTMLDocument;
                                // Prototype
                                LDKO.htmlDocumentProto = LDKO.htmlDocument.prototype;

                            // HTML Element
                            LDKO.htmlElement = HTMLElement;
                                // Prototype
                                LDKO.htmlElementProto = LDKO.htmlElement.prototype;
                                LDKO.$htmlElementProto = LDKO.htmlElementProto;
                                LDKF.setTimeout(function() { LDKO.$htmlElementProto = LDKF.cloneObject(LDKO.$htmlElementProto) });

                            // HTML Head Element
                            LDKO.htmlHeadElement = HTMLHeadElement;
                                // Prototype
                                LDKO.htmlHeadElementProto = LDKO.htmlHeadElement.prototype;

                            // HTML Input Element
                            LDKO.htmlInputElement = HTMLInputElement;
                                // Prototype
                                LDKO.htmlInputElementProto = LDKO.htmlInputElement.prototype;

                            // HTML Link Element
                            LDKO.htmlLinkElement = HTMLLinkElement;
                                // Prototype
                                LDKO.htmlLinkElementProto = LDKO.htmlLinkElement.prototype;

                            // HTML Meta Element
                            LDKO.htmlMetaElement = HTMLMetaElement;
                                // Prototype
                                LDKO.htmlMetaElementProto = LDKO.htmlMetaElement.prototype;

                            // HTML Script Element
                            LDKO.htmlScriptElement = HTMLScriptElement;
                                // Prototype
                                LDKO.htmlScriptElementProto = LDKO.htmlScriptElement.prototype;

                            // HTML Textarea Element
                            LDKO.htmlTextareaElement = HTMLTextAreaElement;
                                // Prototype
                                LDKO.htmlTextareaElementProto = LDKO.htmlTextareaElement.prototype;

                            // Location
                            Object.defineProperty(LDKO, '$location', {get: function location() { let data = tmpObject.locationDescription; return 'value' in data ? data.value : data.get.call(window) }});
                                // Host
                                LDKO.locationHost = LDKO.$location.host;

                                // Host Name
                                LDKO.locationHostname = LDKO.$location.hostname;

                                // Protocol
                                LDKO.locationProtocol = LDKO.$location.protocol;

                            // Message Event
                            LDKO.messageEvent = window.MessageEvent || tmp;
                                // Prototype
                                LDKO.messageEventProto = LDKO.messageEvent.prototype;

                            // Named Node Map
                            LDKO.namedNodeMap = NamedNodeMap;
                                // Prototype
                                LDKO.namedNodeMapProto = LDKO.namedNodeMap.prototype;
                                LDKO.$namedNodeMapProto = LDKO.namedNodeMapProto;
                                LDKF.setTimeout(function() { LDKO.$namedNodeMapProto = LDKF.cloneObject(LDKO.$namedNodeMapProto) });

                            // Navigator
                            LDKO.navigator = Navigator;
                            Object.defineProperty(LDKO, '$navigator', {get: function navigator() { return tmpObject.navigatorDescription.get.call(window) }});
                                // Prototype
                                LDKO.navigatorProto = LDKO.navigator.prototype;
                                LDKO.$navigatorProto = LDKO.navigatorProto;
                                LDKF.setTimeout(function() { LDKO.$navigatorProto = LDKF.cloneObject(LDKO.$navigatorProto) });

                            // Node
                            LDKO.node = Node;
                                // Prototype
                                LDKO.nodeProto = LDKO.node.prototype;
                                LDKO.$nodeProto = LDKO.nodeProto;
                                LDKF.setTimeout(function() { LDKO.$nodeProto = LDKF.cloneObject(LDKO.$nodeProto) });

                            // Node List
                            LDKO.nodeList = NodeList;
                                // Prototype
                                LDKO.nodeListProto = LDKO.nodeList.prototype;

                            // Notification
                            LDKO.notification = window.Notification || function Notification() {};
                                // Prototype
                                LDKO.notificationProto = LDKO.notification.prototype;

                            // Number
                            LDKO.number = Number;
                                // Prototype
                                LDKO.numberProto = LDKO.number.prototype;

                                // Not a Number
                                LDKO.numberNaN = LDKO.number.NaN;

                                // Negative Infinity
                                LDKO.numberNegativeInfinity = LDKO.number.NEGATIVE_INFINITY;

                                // Maximum Safe Integer
                                LDKO.numberMaxSafeInteger = LDKO.number.MAX_SAFE_INTEGER;

                                // Minimum Safe Integer
                                LDKO.numberMinSafeInteger = LDKO.number.MIN_SAFE_INTEGER;

                                // Positive Number
                                LDKO.numberPositiveInfinity = LDKO.number.POSITIVE_INFINITY;

                            // Object
                            LDKO.object = Object;
                                // Prototype
                                LDKO.objectProto = LDKO.object.prototype;
                                LDKO.$objectProto = LDKO.objectProto;
                                LDKF.setTimeout(function() { LDKO.$objectProto = LDKF.cloneObject(LDKO.$objectProto) });

                            // Performance
                            LDKO.performance = Performance;
                            Object.defineProperty(LDKO, '$performance', {get: function performance() { return tmpObject.performanceDescription.get.call(window) }});
                                // Prototype
                                LDKO.performanceProto = LDKO.performance.prototype;
                                LDKO.$performanceProto = LDKO.performanceProto;
                                LDKF.setTimeout(function() { LDKO.$performanceProto = LDKF.cloneObject(LDKO.$performanceProto) });

                            // Date
                            LDKO.date = Date;
                                // Prototype
                                LDKO.dateProto = LDKO.date.prototype;

                                // Polyfill > Date
                                    /* Now
                                            --- NOTE ---
                                                #Lapys: Sourced from `https://gist.github.com/paulirish/5438650`.
                                    */
                                    'function'!=typeof Date.now&&(Date.now=Date.now||function(){return new Date().getTime()});

                                // Function > Date
                                    // Now
                                    LDKF.dateNow = Date.now;

                                // Modification > Date
                                    // Now
                                    LDKO.dateNow = Date.now();
                                    (performance.timing && performance.timing.navigationStart)&&(LDKO.dateNow=performance.timing.navigationStart);

                            // Performance
                                // Polyfill > Now
                                'function'!=typeof Performance.prototype.now&&(Object.defineProperty(Performance.prototype,'now',{configurable:!0,enumerable:!0,value:function now(){if(this!=performance)throw TypeError('Illegal invocation');return LDKF.dateNow()-LDKO.dateNow},writable:!0}));

                            // Pi
                            LDKO.PI = Math.PI;

                            // Promise
                            LDKO.promise = window.Promise || function Promise() {};
                                // Prototype
                                LDKO.promiseProto = LDKO.promise.prototype || {};

                                // Then
                                LDKO.promiseThen = Object.getOwnPropertyDescriptor(LDKO.promiseProto , 'then') || function then() {};

                            // Range
                            LDKO.range = Range;
                                // Prototype
                                LDKO.rangeProto = LDKO.range.prototype;

                            // Range Error
                            LDKO.rangeError = RangeError;

                            // Regular Expression
                            LDKO.regex = RegExp;
                                // Prototype
                                LDKO.regexProto = LDKO.regex.prototype;
                                LDKO.$regexProto = LDKO.regexProto;
                                LDKF.setTimeout(function() { LDKO.$regexProto = LDKF.cloneObject(LDKO.$regexProto) });

                            // Screen
                            LDKO.screen = Screen;
                            Object.defineProperty(LDKO, '$screen', {get: function document() { return tmpObject.screenDescription.get.call(window) }});
                                // Prototype
                                LDKO.screenProto = LDKO.screen.prototype;

                            // Selection
                            LDKO.selection = Selection;
                                // Prototype
                                LDKO.selectionProto = LDKO.selection.prototype;

                            // String
                            LDKO.string = String;
                                // Prototype
                                LDKO.stringProto = LDKO.string.prototype;
                                LDKO.$stringProto = LDKO.stringProto;
                                LDKF.setTimeout(function() { LDKO.$stringProto = LDKF.cloneObject(LDKO.$stringProto) });

                            // Symbol
                            LDKO.symbol = window.Symbol;
                                // Iterator
                                LDKO.symbolIterator = LDKO.symbol.iterator;

                                // Prototype
                                LDKO.symbolProto = LDKO.symbol.prototype;

                            // Syntax Error
                            LDKO.syntaxError = SyntaxError;

                            // Type Error
                            LDKO.typeError = TypeError;

                            // {Cross-Domain Request} X Domain Request
                            LDKO.xDomainRequest = window.XDomainRequest || function XDomainRequest() {};
                                // Prototype
                                LDKO.xDomainRequestProto = LDKO.xDomainRequest.prototype;
                                LDKO.$xDomainRequestProto = LDKO.xDomainRequestProto;
                                LDKF.setTimeout(function() { LDKO.$xDomainRequestProto = LDKF.cloneObject(LDKO.$xDomainRequestProto) });

                            // XML Document
                            LDKO.xmlDocument = XMLDocument;

                            // XML HTTP Request
                            LDKO.xmlHttpRequest = XMLHttpRequest;
                                // Prototype
                                LDKO.xmlHttpRequestProto = LDKO.xmlHttpRequest.prototype;
                                LDKO.$xmlHttpRequestProto = LDKO.xmlHttpRequestProto;
                                LDKF.setTimeout(function() { LDKO.$xmlHttpRequestProto = LDKF.cloneObject(LDKO.$xmlHttpRequestProto) });

                            // XML HTTP Request
                            LDKO.xmlHttpRequestEventTarget = window.XMLHttpRequestEventTarget;
                                // Prototype
                                LDKO.xmlHttpRequestEventTargetProto = LDKO.xmlHttpRequestEventTarget.prototype;

                            // Window
                            LDKO.window = Window;
                                // Prototype
                                LDKO.windowProto = LDKO.window.prototype;

                            /* All Document Nodes */
                            Object.defineProperty(LDKO, 'allDocumentNodes', {
                                // Get
                                get: function allDocumentNodes() {
                                    // Return
                                    return LDKF.allNodeNodes(LDKO.$document)
                                }
                            });

                            /* Browser */
                            LDKO.browser = new (function Object() {
                                // Initialization > (Define, Target)
                                let define = window.Object.defineProperty,
                                    that = this;

                                // Modification > Target
                                    // {Google} Chrome
                                    define(that, 'chrome', {
                                        configurable: !0, enumerable: !0,
                                        get: function chrome() {return!!(LDKF.isObject(window.chrome)&&LDKF.isObject((window.chrome||tmp.object).webstore))}
                                    });

                                    // {Microsoft} Edge
                                    define(that, 'edge', {
                                        configurable: !0, enumerable: !0,
                                        get: function edge() {return LDKF.isObject(window.msCredentials)}
                                    });

                                    // {Mozilla} Firefox
                                    define(that, 'firefox', {
                                        configurable: !0, enumerable: !0,
                                        get: function firefox() {return LDKF.isObject(window.InstallTrigger)}
                                    });

                                    // {Microsoft} Internet Explorer
                                    define(that, 'ie', {
                                        configurable: !0, enumerable: !0,
                                        get: function internetExplorer() {let a=(LDKF.objectGetOwnPropertyDescriptor||Object.getOwnPropertyDescriptor)(LDKO.$documentProto,'documentMode')||(LDKF.objectGetOwnPropertyDescriptor||Object.getOwnPropertyDescriptor)(LDKO.$documentProto,'documentMode');return LDKF.isNumber(LDKF.isUndefined(a)?LDKO.$document.documentMode:a.get.call(LDK.$doc))}
                                    });

                                    // Opera
                                    define(that, 'opera', {
                                        configurable: !0, enumerable: !0,
                                        get: function opera() {return!!((!!window.opr&&!!window.opr.addons)||!!window.opera||LDKF.indexOfString(LDKO.$navigator.userAgent,'OPR/')>-1)}
                                    });

                                    // Safari
                                    define(that, 'safari', {
                                        configurable: !0, enumerable: !0,
                                        get: function safari() {return!!(LDKF.testRegex(/constructor/i,LDKO.htmlElement)||LDKF.toObjectString(!window.safari||window.safari.pushNotification)=='[object SafariRemoteNotification]')}
                                    });

                                    // Constructor > Prototype
                                    that.__proto__ = new (function() {
                                        // Modification > Target > Value Of
                                        define(this, 'valueOf', {
                                            // Value
                                            value: function valueOf() {
                                                // Initialization > Current Browser
                                                let currentBrowser = null;

                                                // LapysJS Development Kit Functions > Iterate Object
                                                LDKF.iterateObject(function(key, value) {
                                                    // Update > Current Browser
                                                    (!currentBrowser && value) && (currentBrowser = key)
                                                }, that);

                                                // Return
                                                return currentBrowser
                                            }
                                        });

                                        // Return
                                        return this
                                    });

                                // Return
                                return that
                            });

                        // Functions
                            // Absolute
                            LDKF.abs = Math.abs;

                            // Add Class HTML Element
                            LDKF.addClassHtmlElement = function addClassHtmlElement() { return (tmpObject.htmlElementPrototypeAddClassDescriptorValue || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlElementProto, 'addClass').value).apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };

                            // Add Event Listener Event Target
                            LDKF.addEventListenerEventTarget = (function() {
                                // Initialization > (Method, Callback)
                                let method = LDKO.$eventTargetProto.addEventListener,
                                    callback = function addEventListenerEventTarget() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };

                                // Modification > Callback > Value Of
                                callback.valueOf = function valueOf() { return method };

                                // Set Timeout
                                LDKF.setTimeout(function() {
                                    // Initialization > Callback
                                    let callback = LDKO.$eventTargetProto.addEventListener;

                                    // Update > Method
                                    (callback === tmpObject.eventTargetPrototypeAddEventListenerDescriptorValue) && (method = callback)
                                });

                                // Return
                                return callback
                            })();

                            // Add Range Selection
                            LDKF.addRangeSelection = (function() {
                                // Initialization > Method
                                let method = LDKO.selectionProto.addRange;

                                // Return
                                return function addRangeSelection() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Alert Window
                            LDKF.alertWindow = (function() {
                                // Initialization > Method
                                let method = window.alert;

                                // Return
                                return function alertWindow() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Append Child Node
                            LDKF.appendChildNode = (function() {
                                // Initialization > Method
                                let method = LDKO.$nodeProto.appendChild;

                                // Return
                                return function appendChildNode() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Append Child Document
                            LDKF.appendChildDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.appendChild;

                                // Return
                                return function appendChildDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            /* Array From
                                    --- NOTE ---
                                        #Lapys: Sourced from `https://gist.github.com/brettz9/4212262`.
                            */
                            'function'!=typeof Array.from&&(Array.from=function(a){return LDKF.sliceArray(a)});
                            LDKF.arrayFrom = LDKO.array.from;

                            // Attach Event Event Target
                            LDKF.attachEventEventTarget = (function() {
                                // Initialization > Method
                                let method = LDKO.$eventTargetProto.attachEvent;

                                // Return
                                return function attachEventEventTarget() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Bind Function
                            LDKF.bindFunction = (function() {
                                // Initialization > (Method, Slice Array)
                                let method = LDKO.$funcProto.bind,
                                    sliceArray = (function() {
                                        // Initialization > Method
                                        let method = LDKO.$arrayProto.slice;

                                        // Return
                                        return function sliceArray() { return method.apply(arguments[0], method.call(LDKF.arrayFrom(arguments), 1)) }
                                    })();

                                // Return
                                return function bindFunction() { return method.apply(arguments[0], sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Blur HTML Element
                            LDKF.blurHtmlElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$htmlElementProto.blur;

                                // Return
                                return function blurHtmlElement() { return method.call(arguments[0]) }
                            })();

                            // Blur Window
                            LDKF.blurWindow = (function() {
                                // Initialization > Method
                                let method = window.blur;

                                // Return
                                return function blurWindow() { return method.call(arguments[0]) }
                            })();

                            // Click HTML Element
                            LDKF.clickHtmlElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$htmlElementProto.click;

                                // Return
                                return function clickHtmlElement() { return method.call(arguments[0]) }
                            })();

                            // Clone Contents Range
                            LDKF.cloneContentsRange = (function() {
                                // Initialization > Method
                                let method = LDKO.rangeProto.cloneContents;

                                // Return
                                return function cloneContentsRange() { return method.call(arguments[0]) }
                            })();

                            // Clone Node
                            LDKF.cloneNode = (function() {
                                // Initialization > Method
                                let method = LDKO.$nodeProto.cloneNode;

                                // Return
                                return function cloneNode() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Close Window
                            LDKF.closeWindow = (function() {
                                // Initialization > Method
                                let method = window.close;

                                // Return
                                return function closeWindow() { return method.call(arguments[0]) }
                            })();

                            // Concatenate Array
                            LDKF.concatArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.concat;

                                // Return
                                return function concatArray() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            LDKF.$concatArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.concat;

                                // Return
                                return function concatArray() { return method.apply(arguments[0], arguments[1]) }
                            })();

                            // Confirm Window
                            LDKF.confirmWindow = (function() {
                                // Initialization > Method
                                let method = window.confirm;

                                // Return
                                return function confirmWindow() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Console Clear
                            LDKF.consoleClear = console.clear;

                            // Console Group
                            LDKF.consoleGroup = console.group;

                            // Console Group End
                            LDKF.consoleGroupEnd = console.groupEnd;

                            // Console Log
                            LDKF.consoleLog = console.log;

                            // Console Warn
                            LDKF.consoleWarn = console.warn;

                            // Create Document Fragment Document
                            LDKF.createDocumentFragmentDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.createDocumentFragment;

                                // Return
                                return function createDocumentFragmentDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            // Create Element Document
                            LDKF.createElementDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.createElement;

                                // Return
                                return function createElementDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            // Create Event Document
                            LDKF.createEventDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.createEvent;

                                // Return
                                return function createEventDocument() { return method.apply(LDKO.$document, LDKF.toArray(arguments)) }
                            })();

                            // Create Event Object Document
                            LDKF.createEventObjectDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.createEventObject;

                                // Return
                                return function createEventObjectDocument() { return method.apply(LDKO.$document, LDKF.toArray(arguments)) }
                            })();

                            // Create Range Document
                            LDKF.createRangeDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.createRange;

                                // Return
                                return function createRangeDocument() { return method.call(LDKO.$document) }
                            })();

                            // Create Range Document Selection
                            LDKF.createRangeDocumentSelection = (function() {
                                // Initialization > Method
                                let method = (LDKO.documentSelection || {createRange: (function() {})}).createRange;

                                // Return
                                return function createRangeDocumentSelection() { return method.call(arguments[0]) }
                            })();

                            // Cube Root
                            LDKF.cbrt = Math.cbrt;

                            // Delete Class HTML Element
                            LDKF.delClassHtmlElement = function delClassHtmlElement() { return (tmpObject.htmlElementPrototypeDelClassDescriptorValue || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlElementProto, 'delClass').value).apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };

                            // Detach Event Event Target
                            LDKF.detachEventEventTarget = (function() {
                                // Initialization > Method
                                let method = LDKO.$eventTargetProto.detachEvent;

                                // Return
                                return function detachEventEventTarget() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Dispatch Event Event Target
                            LDKF.dispatchEventEventTarget = (function() {
                                // Initialization > Method
                                let method = LDKO.$eventTargetProto.dispatchEvent;

                                // Return
                                return function dispatchEventEventTarget() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Encode URI Component
                            LDKF.encodeURIComponent = encodeURIComponent;

                            // Ends With String
                            LDKF.endsWithString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.endsWith;

                                // Return
                                return function endsWithString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Execute Command Document
                            LDKF.execCommandDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.execCommand;

                                // Return
                                return function execCommandDocument() { return method.call(LDKO.$document, LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Exit Fullscreen Document
                            LDKF.exitFullscreenDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.exitFullscreen || (function() {});

                                // Return
                                return function exitFullscreenDocument() { return method.call(arguments[0]) }
                            })();

                            // Filter Array
                            LDKF.filterArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.filter;

                                // Return
                                return function filterArray() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Fire Event Event Target
                            LDKF.fireEventEventTarget = (function() {
                                // Initialization > Method
                                let method = LDKO.$eventTargetProto.fireEvent;

                                // Return
                                return function fireEventEventTarget() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Focus HTML Element
                            LDKF.focusHtmlElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$htmlElementProto.focus;

                                // Return
                                return function focusHtmlElement() { return method.call(arguments[0]) }
                            })();

                            // Focus Window
                            LDKF.focusWindow = (function() {
                                // Initialization > Method
                                let method = window.focus;

                                // Return
                                return function focusWindow() { return method.call(arguments[0]) }
                            })();

                            // Fonts Document
                            LDKF.fontsDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.documentFonts;

                                // Return
                                return function fontsDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            // Function Prototype To String
                            LDKF.funcProtoToString = LDKO.$funcProto.toString;

                            // Get Attribute Element
                            LDKF.getAttributeElement = (function() {
                                // Initialization > Method
                                let method = Object.getOwnPropertyDescriptor(LDKO.$elementProto, 'getAttribute').value;

                                // Return
                                return function getAttributeElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Attribute Node Element
                            LDKF.getAttributeNodeElement = (function() {
                                // Initialization > Method
                                let method = Object.getOwnPropertyDescriptor(LDKO.$elementProto, 'getAttributeNode').value;

                                // Return
                                return function getAttributeNodeElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Bounding Client Rectangle
                            LDKF.getBoundingClientRectElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.getBoundingClientRect;

                                // Return
                                return function getBoundingClientRectElement() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Get Elements By Class Name
                            LDKF.getElementsByClassNameDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.getElementsByClassName;

                                // Return
                                return function getElementsByClassNameDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            LDKF.$getElementsByClassNameDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.getElementsByClassName;

                                // Return
                                return function $getElementsByClassNameDocument() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Elements By Tag Name
                            LDKF.getElementsByTagNameDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.getElementsByTagName;

                                // Return
                                return function getElementsByTagNameDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            LDKF.$getElementsByTagNameDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.getElementsByTagName;

                                // Return
                                return function $getElementsByTagNameDocument() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Elements By Tag Name Document Fragment
                            LDKF.getElementsByTagNameDocumentFragment = (function() {
                                // Initialization > Method
                                let method = LDKO.documentFragmentProto.getElementsByTagName;

                                // Return
                                return function getElementsByTagNameDocumentFragment() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Elements By Tag Name Element
                            LDKF.getElementsByTagNameElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.getElementsByTagName;

                                // Return
                                return function getElementsByTagNameElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Property Value CSS Style Declaration
                            LDKF.getPropertyValueCSSStyleDeclaration = (function() {
                                // Initialization > Method
                                let method = LDKO.cssStyleDeclarationProto.getPropertyValue;

                                // Return
                                return function getPropertyValueCSSStyleDeclaration() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Get Range At
                            LDKF.getRangeAtSelection = (function() {
                                // Initialization > Method
                                let method = LDKO.selectionProto.getRangeAt;

                                // Return
                                return function getRangeAtSelection() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Get Selection Document
                            LDKF.getSelectionDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.getSelection;

                                // Return
                                return function getSelectionDocument() { return method.call(LDKO.$document) }
                            })();

                            // Get Time Date
                            LDKF.getTimeDate = (function() {
                                // Initialization > Method
                                let method = LDKO.dateProto.getTime;

                                // Return
                                return function getTimeDate() { return method.call(arguments[0]) }
                            })();

                            // Has Attribute Element
                            LDKF.hasAttributeElement = (function() {
                                // Initialization > Method
                                let method = Object.getOwnPropertyDescriptor(LDKO.$elementProto, 'hasAttribute').value;

                                // Return
                                return function hasAttributeElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Has Class HTML Element
                            LDKF.hasClassHtmlElement = function hasClassHtmlElement() { return (tmpObject.htmlElementPrototypeHasClassDescriptorValue || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlElementProto, 'hasClass').value).apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };

                            // Has Own Property Object
                            LDKF.hasOwnPropertyObject = (function() {
                                // Initialization > Method
                                let method = LDKO.$objectProto.hasOwnProperty;

                                // Return
                                return function hasOwnPropertyObject() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Includes Array
                            LDKF.includesArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.includes || function includes(a,b){let c=a.length;while(c){if(LDKF.objectIs(b,a[c-=1]))return!0}return!1};

                                // Return
                                return function includesArray() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Includes String
                            LDKF.includesString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.includes || function includes(a,b){let c=a.length;while(c){if(LDKF.objectIs(b,a[c-=1]))return!0}return!1};

                                // Return
                                return function includesString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Index Of Array
                            LDKF.indexOfArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.indexOf;

                                // Return
                                return function indexOfArray() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Index Of String
                            LDKF.indexOfString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.indexOf;

                                // Return
                                return function indexOfString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Initialize Event Event
                            LDKF.initEventEvent = (function() {
                                // Initialization > Method
                                let method = LDKO.eventProto.initEvent;

                                // Return
                                return function initEventEvent() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Insert Adjacent HTML Element
                            LDKF.insertAdjacentHTMLElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.insertAdjacentHTML;

                                // Return
                                return function insertAdjacentHTMLElement() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            LDKF.$insertAdjacentHTMLElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.insertAdjacentHTML;

                                // Return
                                return function $insertAdjacentHTMLElement() { return method.apply(arguments[0], arguments[1]) }
                            })();

                            // Insert Before Node
                            LDKF.insertBeforeNode = (function() {
                                // Initialization > Method
                                let method = LDKO.$nodeProto.insertBefore;

                                // Return
                                return function insertBeforeNode() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            LDKF.$insertBeforeNode = (function() {
                                // Initialization > Method
                                let method = LDKO.$nodeProto.insertBefore;

                                // Return
                                return function $insertBeforeNode() { return method.apply(arguments[0], arguments[1]) }
                            })();

                            // Join Array
                            LDKF.joinArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.join;

                                // Return
                                return function joinArray() {
                                    // Error Handling > Return
                                    try { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                                    catch (error) {}

                                    // Initialization > (Array, Iterator)
                                    let array = LDKF.cloneObject(arguments[0]),
                                        iterator = array.length;

                                    // Loop > Update > Array
                                    while (iterator)
                                        array[iterator -= 1] = LDKF.string(array[iterator]);

                                    // Return
                                    return method.apply(array, LDKF.sliceArray(LDKF.toArray(arguments), 1))
                                }
                            })();

                            // Last Index Of Array
                            LDKF.lastIndexOfArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.lastIndexOf;

                                // Return
                                return function lastIndexOfArray() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Last Index Of String
                            LDKF.lastIndexOfString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.lastIndexOf;

                                // Return
                                return function lastIndexOfString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Match String
                            LDKF.matchString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.match;

                                // Return
                                return function matchString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Math Random
                            LDKF.mathRandom = Math.random;

                            // Maximum
                            LDKF.max = Math.max;

                            // Minimum
                            LDKF.min = Math.min;

                            // Mozilla Cancel Fullscreen Document
                            LDKF.mozCancelFullScreenDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.mozCancelFullScreen || (function() {});

                                // Return
                                return function mozCancelFullScreenDocument() { return method.call(arguments[0]) }
                            })();

                            // Mozilla Request Fullscreen Element
                            LDKF.mozRequestFullScreenElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.mozRequestFullScreen || (function() {});

                                // Return
                                return function mozRequestFullScreenElement() { return method.call(arguments[0]) }
                            })();

                            // Microsoft Exit Fullscreen Document
                            LDKF.msExitFullscreenDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.msExitFullscreen || (function() {});

                                // Return
                                return function msExitFullscreenDocument() { return method.call(arguments[0]) }
                            })();

                            // Microsoft Request Fullscreen Element
                            LDKF.msRequestFullscreenElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.msRequestFullscreen || (function() {});

                                // Return
                                return function msRequestFullscreenElement() { return method.call(arguments[0]) }
                            })();

                            // Number
                            LDKF.number = LDKF.cloneObject(Number);

                            // Number Is Finite
                            LDKF.numberIsFinite = LDKO.number.isFinite;

                            // Number Is Not a Number
                            LDKF.numberIsNaN = LDKO.number.isNaN;

                            // Number Is Safe Integer
                            LDKF.numberIsSafeInteger = LDKO.number.isSafeInteger;

                            // Number Parse Float
                            LDKF.numberParseFloat = LDKO.number.parseFloat;

                            // Number Parse Int
                            LDKF.numberParseInt = LDKO.number.parseInt;

                            // Object
                            LDKF.object = LDKF.cloneObject(Object);

                            // Object Assign
                            LDKF.objectAssign = LDKO.object.assign;

                            // Object Create
                            LDKF.objectCreate = LDKO.object.create;

                            // Object Define Property
                            LDKF.objectDefineProperty = LDKO.object.defineProperty;

                            // Object Get Own Property Descriptor
                            LDKF.objectGetOwnPropertyDescriptor = LDKO.object.getOwnPropertyDescriptor;

                            // Object Get Own Property Descriptors
                            LDKF.objectGetOwnPropertyDescriptors = LDKO.object.getOwnPropertyDescriptors;

                            // Object Is
                            LDKF.objectIs = LDKO.object.is;

                            // Object Keys
                            LDKF.objectKeys = LDKO.object.keys;

                            // Object Prototype To String
                            LDKF.objectProtoToString = LDKO.$objectProto.toString;

                            // Object Values
                            LDKF.objectValues = LDKO.object.values;

                            // Open Window
                            LDKF.openWindow = (function() {
                                // Initialization > Method
                                let method = window.open;

                                // Return
                                return function openWindow() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                           // Open X Domain Request
                            LDKF.openXDomainRequest = (function() {
                                // Initialization > Method
                                let method = LDKO.$xDomainRequestProto.open;

                                // Return
                                return function openXDomainRequest() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Open XML HTTP Request
                            LDKF.openXmlHttpRequest = (function() {
                                // Initialization > Method
                                let method = LDKO.$xmlHttpRequestProto.open;

                                // Return
                                return function openXmlHttpRequest() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Performance Prototype Now
                            LDKF.performanceProtoNow = LDKO.$performanceProto.now;

                            // Pop Array
                            LDKF.popArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.pop;

                                // Return
                                return function popArray() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Post Message Window
                            LDKF.postMessageWindow = (function() {
                                // Initialization > Method
                                let method = window.postMessage;

                                // Return
                                return function postMessageWindow() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Power
                            LDKF.pow = Math.pow;

                            // Prompt Window
                            LDKF.promptWindow = (function() {
                                // Initialization > Method
                                let method = window.prompt;

                                // Return
                                return function promptWindow() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Push Array
                            LDKF.pushArray = (function() {
                                // Initialization > (Method, Slice Array)
                                let method = LDKO.$arrayProto.push,
                                    sliceArray = (function() {
                                        // Initialization > Method
                                        let method = LDKO.$arrayProto.slice;

                                        // Return
                                        return function sliceArray() { return method.apply(arguments[0], method.call(LDKF.arrayFrom(arguments), 1)) }
                                    })();

                                // Return
                                return function pushArray() { return method.apply(arguments[0], sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Push Array
                            LDKF.$pushArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.push;

                                // Return
                                return function $pushArray() { return method.apply(arguments[0], arguments[1]) }
                            })();

                            // Query Command Enabled Document
                            LDKF.queryCommandEnabledDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.queryCommandEnabled;

                                // Return
                                return function queryCommandEnabledDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            // Query Command Supported Document
                            LDKF.queryCommandSupportedDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.queryCommandSupported;

                                // Return
                                return function queryCommandSupportedDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            // Query Selector Document
                            LDKF.querySelectorDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.querySelector;

                                // Return
                                return function querySelectorDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            LDKF.$querySelectorDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.querySelector;

                                // Return
                                return function $querySelectorDocument() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Query Selector All Document
                            LDKF.querySelectorAllDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.querySelectorAll;

                                // Return
                                return function querySelectorAllDocument() { return method.call(LDKO.$document, arguments[0]) }
                            })();

                            LDKF.$querySelectorAllDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.querySelectorAll;

                                // Return
                                return function $querySelectorAllDocument() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Query Selector All Document Fragment
                            LDKF.querySelectorAllDocumentFragment = (function() {
                                // Initialization > Method
                                let method = LDKO.documentFragmentProto.querySelectorAll;

                                // Return
                                return function querySelectorAllDocumentFragment() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Query Selector Element
                            LDKF.querySelectorElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.querySelector;

                                // Return
                                return function querySelectorElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Query Selector All Element
                            LDKF.querySelectorAllElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.querySelectorAll;

                                // Return
                                return function querySelectorAllElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Regular Expression
                            LDKF.regex = LDKF.cloneObject(RegExp);

                            // Remove All Ranges Selection
                            LDKF.removeAllRangesSelection = (function() {
                                // Initialization > Method
                                let method = LDKO.selectionProto.removeAllRanges;

                                // Return
                                return function removeAllRangesSelection() { return method.call(arguments[0]) }
                            })();

                            // Remove Attribute Element
                            LDKF.delAttrElement = function delAttrElement() { return tmpObject.elementPrototypeDelAttrDescription.value.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };
                            LDKF.$delAttrElement = function $delAttrElement() { return tmpObject.elementPrototypeDelAttrDescription.value.apply(arguments[0], arguments[1]) };
                            LDKF.removeAttributeElement = (function() {
                                // Initialization > Method
                                let method = Object.getOwnPropertyDescriptor(LDKO.$elementProto, 'removeAttribute').value;

                                // Return
                                return function removeAttributeElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Remove Child Node
                            LDKF.removeChildNode = (function() {
                                // Initialization > Method
                                let method = LDKO.$nodeProto.removeChild;

                                // Return
                                return function removeChildNode() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Remove Child Node
                            LDKF.remove$ChildNode = (function() {
                                // Initialization > Method
                                let method = {
                                    // Character Data
                                    characterData: LDKO.characterDataProto.remove,

                                    // Document Type
                                    documentType: LDKO.documentTypeProto.remove,

                                    // Element
                                    element: LDKO.$elementProto.remove
                                };

                                // Return
                                return function removeChildNode() {
                                    // Initialization > Data
                                    let data = arguments[0];

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isCharacterData(data))
                                        method.characterData.call(data);

                                    else if (LDKF.isDocumentType(data))
                                        method.documentType.call(data);

                                    else if (LDKF.isElement(data))
                                        method.element.call(data)
                                }
                            })();

                            // Remove Event Listener Event Target
                            LDKF.removeEventListenerEventTarget = (function() {
                                // Initialization > (Method, Callback)
                                let method = LDKO.$eventTargetProto.removeEventListener,
                                    callback = function removeEventListenerEventTarget() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };

                                // Modification > Callback > Value Of
                                callback.valueOf = function valueOf() { return method };

                                // Set Timeout
                                LDKF.setTimeout(function() {
                                    // Initialization > Callback
                                    let callback = LDKO.$eventTargetProto.removeEventListener;

                                    // Update > Method
                                    (callback === tmpObject.eventTargetPrototypeRemoveEventListenerDescriptorValue) && (method = callback)
                                });

                                // Return
                                return callback
                            })();

                            // Replace Element Array
                            LDKF.replaceElementArray = function replaceElementArray() {
                                // Initialization > (Array, Length, Match, Name, Replacement)
                                let array = arguments[0],
                                    length = arguments.length,
                                    match = arguments[1],
                                    name = LDKF.isString(this.valueOf()) ? this.valueOf() : 'replaceElement',
                                    replacement = arguments[2];

                                /* Logic
                                        [if:else statement]
                                */
                                if (length > 1) {
                                    // Error
                                    LDKF.isFunction(match) || LDKF.error(["'" + name + "'", "'Array'"], 'argument', LDKF.debugMessage(match, ['not', 'a'], 'function'));

                                    // Update > Replacement
                                    (length > 2) || (replacement = void 0);

                                    // Initialization > Iterator
                                    let iterator = 0;

                                    // Update > Length
                                    length = array.length;

                                    /* Loop
                                            Index Array.
                                    */
                                    for (iterator; iterator != length; iterator += 1)
                                        /* Logic
                                                [if statement]
                                        */
                                        if (match.call(array, array[iterator])) {
                                            // Update > Array
                                            array[iterator] = replacement;

                                            // Break
                                            break
                                        }

                                    // Return
                                    return array
                                }

                                else
                                    // Error
                                    LDKF.error(["'" + name + "'", "'Array'"], 'argument', [2, length])
                            };

                            // Replace Element From Front Array
                            LDKF.replaceElementFromFrontArray = function replaceElementFromFrontArray() {
                                // Initialization > (Array, Length, Match, Name, Replacement)
                                let array = arguments[0],
                                    length = arguments.length,
                                    match = arguments[1],
                                    name = LDKF.isString(this.valueOf()) ? this.valueOf() : 'replaceElementFromFront',
                                    replacement = arguments[2];

                                /* Logic
                                        [if:else statement]
                                */
                                if (length > 1) {
                                    // Error
                                    LDKF.isFunction(match) || LDKF.error(["'" + name + "'", "'Array'"], 'argument', LDKF.debugMessage(match, ['not', 'a'], 'function'));

                                    // Update > Replacement
                                    (length > 2) || (replacement = void 0);

                                    // Initialization > Iterator
                                    let iterator = array.length;

                                    /* Loop
                                            Index Array.
                                    */
                                    while (iterator) {
                                        // Initialization > Item
                                        let item = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (match.call(array, item)) {
                                            // Update > Array
                                            array[iterator] = replacement;

                                            // Break
                                            break
                                        }
                                    }

                                    // Return
                                    return array
                                }

                                else
                                    // Error
                                    LDKF.error(["'" + name + "'", "'Array'"], 'argument', [2, length])
                            };

                            // Replace Elements Array
                            LDKF.replaceElementsArray = function replaceElementsArray() {
                                // Initialization > (Array, Length, Match, Name, Replacement)
                                let array = arguments[0],
                                    length = arguments.length,
                                    match = arguments[1],
                                    name = LDKF.isString(this.valueOf()) ? this.valueOf() : 'replaceElements',
                                    replacement = arguments[2];

                                /* Logic
                                        [if:else statement]
                                */
                                if (length > 1) {
                                    // Error
                                    LDKF.isFunction(match) || LDKF.error(["'" + name + "'", "'Array'"], 'argument', LDKF.debugMessage(match, ['not', 'a'], 'function'));

                                    // Update > Replacement
                                    (length > 2) || (replacement = void 0);

                                    // Initialization > Iterator
                                    let iterator = array.length;

                                    /* Loop
                                            Index Array.

                                        > Update > Array
                                    */
                                    while (iterator)
                                        match.call(array, array[iterator -= 1]) && (array[iterator] = replacement);

                                    // Return
                                    return array
                                }

                                else
                                    // Error
                                    LDKF.error(["'" + name + "'", "'Array'"], 'argument', [2, length])
                            };

                            // Replace String
                            LDKF.replaceString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.replace;

                                // Return
                                return function replaceString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Request Fullscreen Element
                            LDKF.requestFullscreenElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.requestFullscreen || (function() {});

                                // Return
                                return function requestFullscreenElement() { return method.call(arguments[0]) }
                            })();

                            // Request Permission Notification
                            LDKF.requestPermissionNotification = (function() {
                                // Initialization > Method
                                let method = LDKO.notification.requestPermission || function requestPermission() {};

                                // Return
                                return function requestPermissionNotification() { return method.apply(LDKO.notification, LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Reverse Array
                            LDKF.reverseArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.reverse || function reverse() {
                                    // Initialization > Array
                                    let array = this;

                                    /* Logic
                                            [if statement]
                                    */
                                    if (LDKF.isArray(array)) {
                                        // Initialization > (Iterator, Reverse)
                                        let iterator = array.length,
                                            reverse = [];

                                        // Loop > Update > Reverse
                                        while (iterator)
                                            LDKF.pushArray(reverse, array[iterator -= 1]);

                                        // Update > Array
                                        LDKF.spliceArray(array, 0, array.length);
                                        LDKF.$pushArray(array, reverse);

                                        // Return
                                        return array
                                    }
                                };

                                // Return
                                return function reverseArray() { return method.call(arguments[0]) }
                            })();

                            // Select HTML Input Element
                            LDKF.selectHtmlInputElement = (function() {
                                // Initialization > Method
                                let method = LDKO.htmlInputElementProto.select;

                                // Return
                                return function selectHtmlInputElement() { return method.call(arguments[0]) }
                            })();

                            // Select HTML Textarea Element
                            LDKF.selectHtmlTextareaElement = (function() {
                                // Initialization > Method
                                let method = LDKO.htmlTextareaElementProto.select;

                                // Return
                                return function selectHtmlTextareaElement() { return method.call(arguments[0]) }
                            })();

                            // Select Node Range
                            LDKF.selectNodeRange = (function() {
                                // Initialization > Method
                                let method = LDKO.rangeProto.selectNode;

                                // Return
                                return function selectNodeRange() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Select Node Contents Range
                            LDKF.selectNodeContentsRange = (function() {
                                // Initialization > Method
                                let method = LDKO.rangeProto.selectNodeContents;

                                // Return
                                return function selectNodeContentsRange() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Send X Domain Request
                            LDKF.sendXDomainRequest = (function() {
                                // Initialization > Method
                                let method = LDKO.$xDomainRequestProto.send;

                                // Return
                                return function sendXDomainRequest() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Send XML HTTP Request
                            LDKF.sendXmlHttpRequest = (function() {
                                // Initialization > Method
                                let method = LDKO.$xmlHttpRequestProto.send;

                                // Return
                                return function sendXmlHttpRequest() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Set Attribute Element
                            LDKF.setAttrElement = function setAttrElement() { return tmpObject.elementPrototypeSetAttrDescription.value.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };
                            LDKF.$setAttrElement = function $setAttrElement() { return tmpObject.elementPrototypeSetAttrDescription.value.apply(arguments[0], arguments[1]) };
                            LDKF.setAttributeElement = (function() {
                                // Initialization > Method
                                let method = Object.getOwnPropertyDescriptor(LDKO.$elementProto, 'setAttribute').value;

                                // Return
                                return function setAttributeElement() { return method.call(arguments[0], arguments[1], arguments[2]) }
                            })();
                            LDKF.$setAttributeElement = function $setAttributeElement() { return tmpObject.elementPrototypeSetAttributeDescription.value.call(arguments[0], arguments[1], arguments[2]) };

                            // Set Attribute Node Element
                            LDKF.setAttributeNodeElement = (function() {
                                // Initialization > Method
                                let method = Object.getOwnPropertyDescriptor(LDKO.$elementProto, 'setAttributeNode').value;

                                // Return
                                return function setAttributeNodeElement() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Slice Array
                            LDKF.sliceArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.slice;

                                // Return
                                return function sliceArray() { return method.apply(arguments[0], method.call(LDKF.arrayFrom(arguments), 1)) }
                            })();

                            // Slice String
                            LDKF.sliceString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.slice;

                                // Return
                                return function sliceString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Splice Array
                            LDKF.spliceArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.splice;

                                // Return
                                return function spliceArray() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            LDKF.$spliceArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.splice;

                                // Return
                                return function spliceArray() { return method.apply(arguments[0], arguments[1]) }
                            })();

                            // Square Root
                            LDKF.sqrt = Math.sqrt;

                            // Stop Window
                            LDKF.stopWindow = (function() {
                                // Initialization > Method
                                let method = window.stop;

                                // Return
                                return function stopWindow() { return method.call(arguments[0]) }
                            })();

                            // String
                            LDKF.string = LDKF.cloneObject(String);

                            // Array
                            LDKF.array = LDKF.cloneObject(Array);

                            // Symbol
                            LDKF.symbol = LDKF.cloneObject(Symbol);

                            // Test Regular Expression
                            LDKF.testRegex = (function() {
                                // Initialization > Method
                                let method = LDKO.$regexProto.test;

                                // Return
                                return function testRegex() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Text
                            LDKF.text = LDKF.cloneObject(Text);

                            // Then Promise
                            LDKF.thenPromise = (function() {
                                // Initialization > Method
                                let method = LDKO.promiseProto.then || function then() {};

                                // Return
                                return function thenPromise() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // To Lower Case String
                            LDKF.toLowerCaseString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.toLowerCase;

                                // Return
                                return function toLowerCaseString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // To Upper Case String
                            LDKF.toUpperCaseString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.toUpperCase;

                                // Return
                                return function toUpperCaseString() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Trim Character String
                            LDKF.trimCharString = function trimCharString() { return tmpObject.stringPrototypeTrimCharDescription.value.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };

                            // Trim Left Array
                            LDKF.trimLeftArray = function trimLeftArray() {
                                // Initialization > (Array, Callback, Iterator, Length)
                                let array = arguments[0],
                                    callback = arguments[1],
                                    iterator = 0,
                                    length = array.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length - 1) {
                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error(["'trimLeft'", "'Array'"], 'argument', LDKF.debugMessage(callback, ['not', 'a'], 'function'));

                                    // Loop > Update > Array
                                    while (callback.call(array, array[0]))
                                        LDKF.spliceArray(array, 0, 1)
                                }

                                else
                                    // Loop > Update > Array
                                    while (!LDKF.hasOwnPropertyObject(array, 0))
                                        LDKF.spliceArray(array, 0, 1);

                                // Return
                                return array
                            };

                            // Trim Left Character String
                            LDKF.trimLeftCharString = function trimLeftCharString() { return tmpObject.stringPrototypeTrimLeftCharDescription.value.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };
                            LDKF.$trimLeftCharString = function $trimLeftCharString() { return tmpObject.stringPrototypeTrimLeftCharDescription.value.apply(arguments[0], arguments[1]) };

                            // Trim Right Array
                            LDKF.trimRightArray = function trimRightArray() {
                                // Initialization > (Array, Callback, Iterator, Length)
                                let array = arguments[0],
                                    callback = arguments[1],
                                    iterator = 0,
                                    length = array.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length - 1) {
                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error(["'trimRight'", "'Array'"], 'argument', LDKF.debugMessage(callback, ['not', 'a'], 'function'));

                                    // Initialization > Cache
                                    let cache = array.length - 1;

                                    // Loop > Update > Array
                                    while (callback.call(array, array[cache = array.length - 1]))
                                        LDKF.spliceArray(array, cache, 1)
                                }

                                else {
                                    // Initialization > Cache
                                    let cache = array.length - 1;

                                    // Loop > Update > Array
                                    while (!LDKF.hasOwnPropertyObject(array, cache = array.length - 1))
                                        LDKF.spliceArray(array, cache, 1)
                                }

                                // Return
                                return array
                            };

                            // Trim Right Character String
                            LDKF.trimRightCharString = function trimRightCharString() { return tmpObject.stringPrototypeTrimRightCharDescription.value.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) };
                            LDKF.$trimRightCharString = function $trimRightCharString() { return tmpObject.stringPrototypeTrimRightCharDescription.value.apply(arguments[0], arguments[1]) };

                            // Trim String
                            LDKF.trimString = (function() {
                                // Initialization > Method
                                let method = LDKO.$stringProto.trim;

                                // Return
                                return function trimString() { return method.call(arguments[0]) }
                            })();

                            // Unshift Array
                            LDKF.unshiftArray = (function() {
                                // Initialization > Method
                                let method = LDKO.$arrayProto.unshift;

                                // Return
                                return function unshiftArray() { return method.apply(arguments[0], LDKF.sliceArray(LDKF.toArray(arguments), 1)) }
                            })();

                            // Value Of Boolean
                            LDKF.valueOfBoolean = (function() {
                                // Initialization > Method
                                let method = LDKO.booleanProto.valueOf;

                                // Return
                                return function valueOfBoolean() { return method.call(arguments[0]) }
                            })();

                            // Value Of Function
                            LDKF.valueOfFunction = (function() {
                                // Initialization > Method
                                let method = LDKO.funcProto.valueOf;

                                // Return
                                return function valueOfFunction() { return method.call(arguments[0]) }
                            })();

                            // Value Of Number
                            LDKF.valueOfNumber = (function() {
                                // Initialization > Method
                                let method = LDKO.numberProto.valueOf;

                                // Return
                                return function valueOfNumber() { return method.call(arguments[0]) }
                            })();

                            // Value Of Regular Expression
                            LDKF.valueOfRegex = (function() {
                                // Initialization > Method
                                let method = LDKO.regexProto.valueOf;

                                // Return
                                return function valueOfRegex() { return method.call(arguments[0]) }
                            })();

                            // Value Of String
                            LDKF.valueOfString = (function() {
                                // Initialization > Method
                                let method = LDKO.stringProto.valueOf;

                                // Return
                                return function valueOfString() { return method.call(arguments[0]) }
                            })();

                            // Value Of Symbol
                            LDKF.valueOfSymbol = (function() {
                                // Initialization > Method
                                let method = LDKO.symbolProto.valueOf;

                                // Return
                                return function valueOfSymbol() { return method.call(arguments[0]) }
                            })();

                            // Web Kit Exit Fullscreen Document
                            LDKF.webkitCancelFullScreenDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.webkitCancelFullScreen || (function() {});

                                // Return
                                return function webkitCancelFullScreenDocument() { return method.call(arguments[0]) }
                            })();

                            // Web Kit Request Fullscreen Element
                            LDKF.webkitRequestFullScreenElement = (function() {
                                // Initialization > Method
                                let method = LDKO.$elementProto.webkitRequestFullScreen || (function() {});

                                // Return
                                return function webkitRequestFullScreenElement() { return method.call(arguments[0]) }
                            })();

                            // Write Document
                            LDKF.writeDocument = (function() {
                                // Initialization > Method
                                let method = LDKO.$documentProto.write;

                                // Return
                                return function writeDocument() { return method.call(arguments[0], arguments[1]) }
                            })();

                            // Write HTML Element
                            LDKF.writeHtmlElement = function writeHtmlElement() { return tmpObject.htmlElementPrototypeWriteDescription.value.call(arguments[0], arguments[1]) };

                            /* Get */
                            LDKF.get = {
                                // Attributes
                                    // Name
                                    attributeName: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$attrProto, 'name').get;

                                        // Return
                                        return function attributeName() { return method.call(arguments[0]) }
                                    })(),

                                    // Value
                                    attributeValue: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$attrProto, 'value').get;

                                        // Return
                                        return function attributeValue() { return method.call(arguments[0]) }
                                    })(),

                                // Document
                                    // All
                                    documentAll: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'all') || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlDocumentProto, 'all')).get;

                                        // Return
                                        return function documentAll() { return method.call(LDKO.$document) }
                                    })(),

                                    $documentAll: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'all') || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlDocumentProto, 'all')).get;

                                        // Return
                                        return function documentAll() { return method.call(arguments[0]) }
                                    })(),

                                    // Body
                                    documentBody: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'body') || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlDocumentProto, 'body')).get;

                                        // Return
                                        return function documentBody() { return method.call(LDKO.$document) }
                                    })(),

                                    // Children
                                    documentChildren: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'children').get;

                                        // Return
                                        return function documentChildren() { return method.call(arguments[0]) }
                                    })(),

                                    // Current Script
                                    documentCurrentScript: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'currentScript').get;

                                        // Return
                                        return function documentCurrentScript() { return method.call(arguments[0]) }
                                    })(),

                                    // Head
                                    documentHead: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'head') || LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlDocumentProto, 'head')).get;

                                        // Return
                                        return function documentHead() { return method.call(LDKO.$document) }
                                    })(),

                                    // Ready State
                                    documentReadyState: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'readyState').get;

                                        // Return
                                        return function documentReadyState() { return method.call(arguments[0]) }
                                    })(),

                                    // Title
                                    documentTitle: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'title').get;

                                        // Return
                                        return function documentTitle() { return method.call(arguments[0]) }
                                    })(),

                                // DOM Rectangle
                                    // Height
                                    domRectangleHeight: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleProto, 'height').get;

                                        // Return
                                        return function domRectangleHeight() { return method.call(arguments[0]) }
                                    })(),

                                    // Width
                                    domRectangleWidth: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleProto, 'width').get;

                                        // Return
                                        return function domRectangleWidth() { return method.call(arguments[0]) }
                                    })(),

                                    // X
                                    domRectangleX: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleProto, 'x') || LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleProto, 'left')).get;

                                        // Return
                                        return function domRectangleX() { return method.call(arguments[0]) }
                                    })(),

                                    // Y
                                    domRectangleY: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleProto, 'y') || LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleProto, 'top')).get;

                                        // Return
                                        return function domRectangleY() { return method.call(arguments[0]) }
                                    })(),

                                // DOM Rectangle Read-Only
                                    // Bottom
                                    domRectangleReadOnlyBottom: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleReadOnlyProto, 'bottom').get;

                                        // Return
                                        return function domRectangleReadOnlyBottom() { return method.call(arguments[0]) }
                                    })(),

                                    // Left
                                    domRectangleReadOnlyLeft: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleReadOnlyProto, 'left').get;

                                        // Return
                                        return function domRectangleReadOnlyLeft() { return method.call(arguments[0]) }
                                    })(),

                                    // Right
                                    domRectangleReadOnlyRight: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleReadOnlyProto, 'right').get;

                                        // Return
                                        return function domRectangleReadOnlyRight() { return method.call(arguments[0]) }
                                    })(),

                                    // Top
                                    domRectangleReadOnlyTop: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.domRectangleReadOnlyProto, 'top').get;

                                        // Return
                                        return function domRectangleReadOnlyTop() { return method.call(arguments[0]) }
                                    })(),

                                // Element
                                    // Attributes
                                    elementAttributes: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'attributes').get;

                                        // Return
                                        return function elementAttributes() { return method.call(arguments[0]) }
                                    })(),

                                    // Bounding Box
                                    elementBoundingBox: function elementBoundingBox() { return ({get: tmpObject.elementPrototypeBoundingBoxDescriptionGetter} || LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'boundingBox')).get.call(arguments[0]) },

                                    // Children
                                    elementChildren: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'children').get;

                                        // Return
                                        return function elementChildren() { return method.call(arguments[0]) }
                                    })(),

                                    // ID
                                    elementId: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'id').get;

                                        // Return
                                        return function elementId() { return method.call(arguments[0]) }
                                    })(),

                                    // Inner HTML
                                    elementInnerHTML: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'innerHTML').get;

                                        // Return
                                        return function elementInnerHTML() { return method.call(arguments[0]) }
                                    })(),

                                    // Next Element Sibling
                                    elementNextElementSibling: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'nextElementSibling').get;

                                        // Return
                                        return function elementNextElementSibling() { return method.call(arguments[0]) }
                                    })(),

                                    // Outer HTML
                                    elementOuterHTML: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'outerHTML').get;

                                        // Return
                                        return function elementOuterHTML() { return method.call(arguments[0]) }
                                    })(),

                                    // Previous Element Sibling
                                    elementPreviousElementSibling: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'previousElementSibling').get;

                                        // Return
                                        return function elementPreviousElementSibling() { return method.call(arguments[0]) }
                                    })(),

                                    // Tag Name
                                    elementTagName: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'tagName').get;

                                        // Return
                                        return function elementId() { return method.call(arguments[0]) }
                                    })(),

                                // Event
                                    // Original Target
                                    eventOriginalTarget: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.eventProto, 'originalTarget') || {get: function() {}}).get;

                                        // Return
                                        return function eventOriginalTarget() { return method.call(arguments[0]) }
                                    })(),

                                    // Source Element
                                    eventSrcElement: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.eventProto, 'srcElement') || {get: function() {}}).get;

                                        // Return
                                        return function eventSrcElement() { return method.call(arguments[0]) }
                                    })(),

                                    // Target
                                    eventTarget: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.eventProto, 'target') || {get: function() {}}).get;

                                        // Return
                                        return function eventTarget() { return method.call(arguments[0]) }
                                    })(),

                                // Function
                                    // Body
                                    functionBody: function functionBody() { return (tmpObject.functionPrototypeBodyDescription || LDKF.objectGetOwnPropertyDescriptor(LDKO.$funcProto, 'body')).get.call(arguments[0]) },

                                    // Head
                                    functionHead: function functionHead() { return (tmpObject.functionPrototypeHeadDescription || LDKF.objectGetOwnPropertyDescriptor(LDKO.$funcProto, 'params')).get.call(arguments[0]) },

                                    // Parameters
                                    functionParameters: function functionParameters() { return (tmpObject.functionPrototypeParametersDescription || LDKF.objectGetOwnPropertyDescriptor(LDKO.$funcProto, 'params')).get.call(arguments[0]) },

                                // HTML All Collection
                                    // Length
                                    htmlAllCollectionLength: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlAllCollectionProto, 'length').get;

                                        // Return
                                        return function htmlAllCollectionLength() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Collection
                                    // Length
                                    htmlCollectionLength: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlCollectionProto, 'length').get;

                                        // Return
                                        return function htmlCollectionLength() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Element
                                    // Inner Text
                                    htmlElementInnerText: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$htmlElementProto, 'innerText').get;

                                        // Return
                                        return function htmlElementInnerText() { return method.call(arguments[0]) }
                                    })(),

                                    // Style
                                    htmlElementStyle: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$htmlElementProto, 'style').get;

                                        // Return
                                        return function htmlElementStyle() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Input Element
                                    // Selection Start
                                    htmlInputElementSelectionStart: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlInputElementProto, 'selectionStart').get;

                                        // Return
                                        return function htmlInputElementSelectionStart() { return method.call(arguments[0]) }
                                    })(),

                                    // Value
                                    htmlInputElementValue: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlInputElementProto, 'value').get;

                                        // Return
                                        return function htmlInputElementValue() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Link Element
                                    // Hyperlink Reference
                                    htmlLinkElementHref: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlLinkElementProto, 'href').get;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0]) }
                                    })(),

                                    // Relationship
                                    htmlLinkElementRel: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlLinkElementProto, 'rel').get;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0]) }
                                    })(),

                                    // Type
                                    htmlLinkElementType: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlLinkElementProto, 'type').get;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Meta Element
                                    // Content
                                    htmlMetaElementContent: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlMetaElementProto, 'content').get;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Script Element
                                    // Source
                                    htmlScriptElementSrc: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlScriptElementProto, 'src').get;

                                        // Return
                                        return function htmlScriptElementSrc() { return method.call(arguments[0]) }
                                    })(),

                                // HTML Textarea Element
                                    // Selection Start
                                    htmlTextareaElementSelectionStart: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlTextareaElementProto, 'selectionStart').get;

                                        // Return
                                        return function htmlTextareaElementSelectionStart() { return method.call(arguments[0]) }
                                    })(),

                                    // Value
                                    htmlTextareaElementValue: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlTextareaElementProto, 'value').get;

                                        // Return
                                        return function htmlTextareaElementValue() { return method.call(arguments[0]) }
                                    })(),

                                // Message Event
                                    // Data
                                    messageEventData: (function() {
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.messageEventProto, 'data').get;

                                        // Return
                                        return function messageEventData() { return method.call(arguments[0]) }
                                    })(),

                                    // Source
                                    messageEventSource: (function() {
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.messageEventProto, 'source').get;

                                        // Return
                                        return function messageEventSource() { return method.call(arguments[0]) }
                                    })(),

                                // Named Node Map
                                    // Length
                                    namedNodeMapLength: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$namedNodeMapProto, 'length').get;

                                        // Return
                                        return function namedNodeMapLength() { return method.call(arguments[0]) }
                                    })(),

                                // Navigator
                                    // User Agent
                                    navigatorUserAgent: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'userAgent').get;

                                        // Return
                                        return function navigatorUserAgent() { return method.call(arguments[0]) }
                                    })(),

                                // Node
                                    // Child Nodes
                                    nodeChildNodes: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'childNodes').get;

                                        // Return
                                        return function nodeChildNodes() { return method.call(arguments[0]) }
                                    })(),

                                    // First Child
                                    nodeFirstChild: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'firstChild').get;

                                        // Return
                                        return function nodeFirstChild() { return method.call(arguments[0]) }
                                    })(),

                                    // Last Child
                                    nodeLastChild: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'lastChild').get;

                                        // Return
                                        return function nodeLastChild() { return method.call(arguments[0]) }
                                    })(),

                                    // Next Sibling
                                    nodeNextSibling: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'nextSibling').get;

                                        // Return
                                        return function nodeNextSibling() { return method.call(arguments[0]) }
                                    })(),

                                    // Parent Element
                                    nodeParentElement: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'parentElement').get;

                                        // Return
                                        return function nodeParentElement() { return method.call(arguments[0]) }
                                    })(),

                                    // Parent Node
                                    nodeParentNode: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'parentNode').get;

                                        // Return
                                        return function nodeParentNode() { return method.call(arguments[0]) }
                                    })(),

                                    // Previous Sibling
                                    nodePreviousSibling: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'previousSibling').get;

                                        // Return
                                        return function nodePreviousSibling() { return method.call(arguments[0]) }
                                    })(),

                                    // Text Content
                                    nodeTextContent: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'textContent').get;

                                        // Return
                                        return function nodeTextContent() { return method.call(arguments[0]) }
                                    })(),

                                // Node List
                                    // Length
                                    nodeListLength: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.nodeListProto, 'length').get;

                                        // Return
                                        return function nodeListLength() { return method.call(arguments[0]) }
                                    })(),

                                // Notification
                                    // Permission
                                    notificationPermission: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.notification, 'permission') || {get: function() { return 'denied' }}).get

                                        // Return
                                        return function notificationPermission() { return method.call(LDKO.notification) }
                                    })(),

                                // Object
                                    // Depth
                                    objectDepth: function objectDepth() { return (tmpObject.objectPrototypeDepthDescription || LDKF.objectGetOwnPropertyDescriptor(LDKO.$objectProto, 'depth')).get.call(arguments[0]) },

                                    // Length
                                    objectLength: function objectLength() { return ({get: LDK.tmp.objects.objectPrototypeLengthDescriptionGetter} || LDKF.objectGetOwnPropertyDescriptor(LDKO.$objectProto, 'length')).get.call(arguments[0]) },

                                // Parent Node
                                    // First Element Child
                                    $parentNodeFirstElementChild: (function() {
                                        /* Polyfill
                                                --- NOTE ---
                                                    #Lapys: Sourced from `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`
                                        */
                                        (function(a){a&&a.prototype&&null==a.prototype.firstElementChild&&Object.defineProperty(a.prototype,'firstElementChild',{get:function(){for(var b,c=this.childNodes,d=0;b=c[d++];)if(1===b.nodeType)return b;return null}})})(window.Node||window.Element);

                                        // Initialization > Method
                                        let method = {
                                            // Document
                                            document: (LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'firstElementChild') || {get: function() {}}).get,

                                            // Document Fragment
                                            documentFragment: (LDKF.objectGetOwnPropertyDescriptor(LDKO.documentFragmentProto, 'firstElementChild') || {get: function() {}}).get,

                                            // Element
                                            element: (LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'firstElementChild') || {get: function() {}}).get
                                        };

                                        // Return
                                        return function parentNodeFirstElementChild() {
                                            // Initialization > Data
                                            let data = arguments[0];

                                            /* Logic
                                                    [if:else if:else statement]

                                                > Return
                                            */
                                            if (LDKF.isDocument(data))
                                                return method.document.call(data);

                                            else if (LDKF.isDocumentFragment(data))
                                                return method.documentFragment.call(data);

                                            else if (LDKF.isElement(data))
                                                return method.element.call(data)
                                        }
                                    })(),

                                    // Last Element Child
                                    $parentNodeLastElementChild: (function() {
                                        /* Polyfill
                                                --- NOTE ---
                                                    #Lapys: Sourced from `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`
                                        */
                                        (function(a){a&&a.prototype&&null==a.prototype.lastElementChild&&Object.defineProperty(a.prototype,'lastElementChild',{get:function(){for(var b,c=this.childNodes,d=c.length-1;b=c[d--];)if(1===b.nodeType)return b;return null}})})(window.Node||window.Element);

                                        // Initialization > Method
                                        let method = {
                                            // Document
                                            document: (LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'lastElementChild') || {get: function() {}}).get,

                                            // Document Fragment
                                            documentFragment: (LDKF.objectGetOwnPropertyDescriptor(LDKO.documentFragmentProto, 'lastElementChild') || {get: function() {}}).get,

                                            // Element
                                            element: (LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'lastElementChild') || {get: function() {}}).get
                                        };

                                        // Return
                                        return function parentNodeLastElementChild() {
                                            // Initialization > Data
                                            let data = arguments[0];

                                            /* Logic
                                                    [if:else if:else statement]

                                                > Return
                                            */
                                            if (LDKF.isDocument(data))
                                                return method.document.call(data);

                                            else if (LDKF.isDocumentFragment(data))
                                                return method.documentFragment.call(data);

                                            else if (LDKF.isElement(data))
                                                return method.element.call(data)
                                        }
                                    })(),

                                // Regular Expression
                                    // Flags
                                    regexFlags: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.$regexProto, 'flags') || LDKF.objectGetOwnPropertyDescriptor(LDKO.$regexProto, 'options')).get;

                                        // Return
                                        return function regexFlags() { return method.call(arguments[0]) }
                                    })(),

                                    // Source
                                    regexSource: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$regexProto, 'source').get;

                                        // Return
                                        return function regexSource() { return method.call(arguments[0]) }
                                    })(),

                                // Screen
                                    // Height
                                    screenHeight: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.screenProto, 'height').get;

                                        // Return
                                        return function screenHeight() { return method.call(LDKO.$screen) }
                                    })(),

                                // X Domain Request
                                    // Response Text
                                    xDomainRequestResponseText: (function() {
                                        // Initialization > Method
                                        let method = (LDKF.objectGetOwnPropertyDescriptor(LDKO.xDomainRequestProto, 'responseText') || {get: function responseText() { return '' }}).get;

                                        // Return
                                        return function xDomainRequestResponseText() { return method.call(arguments[0]) }
                                    })(),

                                // XML HTTP Request
                                    // Response Text
                                    xmlHttpRequestResponseText: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.xmlHttpRequestProto, 'responseText').get;

                                        // Return
                                        return function xmlHttpRequestResponseText() { return method.call(arguments[0]) }
                                    })(),

                                // Window
                                    // Document
                                    windowDocument: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(window, 'document').get;

                                        // Return
                                        return function windowDocument() { return method.call(arguments[0]) }
                                    })(),

                                    // Inner Height
                                    windowInnerHeight: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(window, 'innerHeight').get;

                                        // Return
                                        return function windowInnerHeight() { return method.call(window) }
                                    })(),

                                    // Inner Width
                                    windowInnerWidth: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(window, 'innerWidth').get;

                                        // Return
                                        return function windowInnerWidth() { return method.call(window) }
                                    })(),

                                    // Name
                                    windowName: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(window, 'name').get;

                                        // Return
                                        return function windowName() { return method.call(window) }
                                    })()
                            };

                            /* Set */
                            LDKF.set = {
                                // Document
                                    // Title
                                    documentTitle: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'title').set;

                                        // Return
                                        return function documentTitle() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // Element
                                    // ID
                                    elementId: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'id').set;

                                        // Return
                                        return function elementId() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Inner HTML
                                    elementInnerHTML: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'innerHTML').set;

                                        // Return
                                        return function elementInnerHTML() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Outer HTML
                                    elementOuterHTML: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$elementProto, 'outerHTML').set;

                                        // Return
                                        return function elementOuterHTML() { return method.call(arguments[0], arguments[0]) }
                                    })(),

                                // HTML Anchor Element
                                    // Download
                                    htmlAnchorElementDownload: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlAnchorElementProto, 'download').set;

                                        // Return
                                        return function htmlAnchorElementDownload() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Hyperlink Reference
                                    htmlAnchorElementHref: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlAnchorElementProto, 'href').set;

                                        // Return
                                        return function htmlAnchorElementHref() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // HTML Element
                                    // Inner Text
                                    htmlElementInnerText: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$htmlElementProto, 'innerText').set;

                                        // Return
                                        return function htmlElementInnerText() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // On Click
                                    htmlElementOnclick: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$htmlElementProto, 'onclick').set;

                                        // Return
                                        return function htmlElementOnclick() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Selector
                                    htmlElementSelector: function htmlElementSelector() { return (tmpObject.htmlElementPrototypeSelectorDescription || LDKF.objectGetOwnPropertyDescriptor(LDKO.$htmlElementProto, 'selector')).set.call(arguments[0], arguments[1]) },

                                // HTML Input Element
                                    // Value
                                    htmlInputElementValue: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlInputElementProto, 'value').set;

                                        // Return
                                        return function htmlInputElementValue() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // HTML Link Element
                                    // Hyperlink Reference
                                    htmlLinkElementHref: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlLinkElementProto, 'href').set;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Relationship
                                    htmlLinkElementRel: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlLinkElementProto, 'rel').set;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Type
                                    htmlLinkElementType: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlLinkElementProto, 'type').set;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // HTML Meta Element
                                    // Content
                                    htmlMetaElementContent: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlMetaElementProto, 'content').set;

                                        // Return
                                        return function htmlMetaElementContent() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                    // Name
                                    htmlMetaElementName: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlMetaElementProto, 'name').set;

                                        // Return
                                        return function htmlMetaElementName() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // HTML Textarea Element
                                    // Value
                                    htmlTextareaElementValue: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.htmlTextareaElementProto, 'value').set;

                                        // Return
                                        return function htmlTextareaElementValue() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // Node
                                    // Text Content
                                    nodeTextContent: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(LDKO.$nodeProto, 'textContent').set;

                                        // Return
                                        return function nodeTextContent() { return method.call(arguments[0], arguments[1]) }
                                    })(),

                                // Window
                                    // Name
                                    windowName: (function() {
                                        // Initialization > Method
                                        let method = LDKF.objectGetOwnPropertyDescriptor(window, 'name').set;

                                        // Return
                                        return function windowName() { return method.call(window, arguments[0]) }
                                    })()
                            };

                    // Constants
                        // Element
                        LDKC.element = LDKF.createElementDocument('lapysjs-element');

                        // Maximum Call Stack Size
                        LDKC.maximumCallStackSize = (function a(){try{return 1+a()}catch(b){return 1}})();

                        // Smallest Calculable Decimal
                        LDKC.smallestCalculableDecimal = (function() {
                            // Initialization > (Iterator, Smallest Random Number)
                            let iterator = 1,
                                smallestRandomNumber = 0;

                            // Loop > Update > (Smallest Random Number, Iterator)
                            while (LDKF.indexOfString(LDKF.string(iterator), 'e') == -1) {
                                smallestRandomNumber = iterator;
                                iterator /= 10
                            }

                            // Return
                            return smallestRandomNumber
                        })();

            /* Phase */
                /* Initialization
                        --- NOTE ---
                            - Initialize and publicize the global LapysJS object.
                            - Add a plethora of methods & properties to the global `window` object.
                            - Add more methods & properties to constructor prototypes.
                */
                function init() {
                    // Initialization > Current Prototype
                    var currentPrototype = LDKO.arrayProto;

                    /* Global Data */
                        // LapysJS
                        LDKF.objectDefineProperty(window, 'LapysJS', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: (function() {
                                // Function > LapysJS
                                function LapysJS() {
                                    // Initialization > LapysJS
                                    let _LapysJS = LapysJS;
                                        LapysJS = new (function LapysJS() { return this }),
                                        _LapysJS = LapysJS.__proto__ = LDKF.objectCreate(LapysJS.__proto__);

                                    // Modification > LapysJS > (LapysJS, Value Of, (...))
                                    LDKF.objectDefineProperty(_LapysJS, 'LapysJS', {value: LapysJS});
                                    LDKF.objectDefineProperty(_LapysJS, 'valueOf', {value: function valueOf() { return LapysJSDevelopmentKit }});
                                    LDKF.objectDefineProperty(_LapysJS, LDKO.symbol.toStringTag, {value: 'LapysJS'});

                                    // Return
                                    return LapysJS
                                }

                                // Return
                                return new LapysJS
                            })(),

                            // Writable
                            writable: !1
                        });
                            // Modification
                                // LapysJS Development Kit > LapysJS
                                const LapysJSProto = (LDKG.LapysJS = LapysJS).__proto__;

                                // LapysJS (Prototype)
                                    // Add Feature
                                    LDKF.objectDefineProperty(LapysJSProto, 'addFeature', {
                                        // Value
                                        value: function addFeature() {
                                            // Initialization > ((Active, Valid) Features, Iterator, Length, Script)
                                            let activeFeatures = LDKE.active,
                                                features = [],
                                                validFeatures = LDKE.valueOf(),
                                                iterator = 0,
                                                length = arguments.length,
                                                script = LapysJSProto.script;

                                            /* Loop
                                                    Index Arguments.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Feature
                                                let feature = LDKF.string(arguments[iterator]);

                                                // (Update > Features) | Warn
                                                LDKF.includesArray(validFeatures, feature) ?
                                                    LDKF.includesArray(activeFeatures, feature) || LDKF.pushArray(features, feature) :
                                                    LDKF.warn("'" + feature + "'", ['not', 'a'], 'valid feature of LapysJS', ', so it has been ignored')
                                            }

                                            // Update > Active Features
                                            activeFeatures = LDKF.joinArray(activeFeatures, ' ');

                                            // Modification > Script > Features
                                            features.length && script.setAttribute('features', (activeFeatures ? activeFeatures + ' ' : '') + LDKF.joinArray(features, ' '));

                                            // Return
                                            return LDKF.customArray('LapysJSExperimentalFeaturesList', LDKE.active)
                                        }
                                    });

                                    // Clear Features
                                    LDKF.objectDefineProperty(LapysJSProto, 'clearFeatures', {
                                        // Value
                                        value: function clearFeatures() {
                                            // Modification > (LapysJS Prototype > Script) > Features
                                            LapysJSProto.script.removeAttribute('features');

                                            // Return
                                            return LDKF.customArray('LapysJSExperimentalFeaturesList', LDKE.active)
                                        }
                                    });

                                    // Remove Feature
                                    LDKF.objectDefineProperty(LapysJSProto, 'removeFeature', {
                                        // Value
                                        value: function removeFeature() {
                                            // Initialization > ((Active, New, Valid) Features, Iterator, Length, Script)
                                            let activeFeatures = LDKE.active,
                                                features = [],
                                                validFeatures = LDKE.valueOf(),
                                                iterator = 0,
                                                length = arguments.length,
                                                script = LapysJSProto.script;

                                            /* Loop
                                                    Index Arguments.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Feature
                                                let feature = LDKF.string(arguments[iterator]);

                                                // (Update > New Features) | Warn
                                                LDKF.includesArray(validFeatures, feature) ?
                                                    LDKF.includesArray(activeFeatures, feature) && LDKF.pushArray(features, feature) :
                                                    LDKF.warn("'" + feature + "'", ['not', 'a'], 'valid feature of LapysJS', ', so it has been ignored')
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (features.length) {
                                                // Update > Length
                                                length = activeFeatures.length;

                                                // Loop > Update > Active Features
                                                for (iterator = 0; iterator < length; iterator += 1)
                                                    LDKF.includesArray(features, activeFeatures[iterator]) && LDKF.spliceArray(activeFeatures, (iterator -= 1) + 1, 1);

                                                // Modification > Script > Features
                                                activeFeatures.length && script.setAttribute('features', LDKF.joinArray(activeFeatures, ' '))
                                            }

                                            // Return
                                            return LDKF.customArray('LapysJSExperimentalFeaturesList', LDKE.active)
                                        }
                                    });

                                    // Script
                                    LDKF.objectDefineProperty(LapysJSProto, 'script', {value: LDKF.get.documentCurrentScript(LDKO.$document)});
                                        // Remove Attribute
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'removeAttribute', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'removeAttribute').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function removeAttribute() {
                                                    // Initialization > (Element, Name)
                                                    let element = this,
                                                        name = arguments[0];

                                                    // Update > LapysJS Development Kit Experimental Features
                                                    (name === 'features') && LDKF.spliceArray(LDKE.active, 0, LDKE.active.length);

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                            // Return
                                            return description
                                        })());

                                        // Remove Attribute Node
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'removeAttributeNode', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'removeAttributeNode').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function removeAttributeNode() {
                                                    // Initialization > (Element, Node)
                                                    let element = this,
                                                        node = arguments[0];

                                                    // Update > LapysJS Development Kit Experimental Features
                                                    ((LDKF.isAttr(node) ? LDKF.get.attributeName(node) : null) === 'features') && LDKF.spliceArray(LDKE.active, 0, LDKE.active.length);

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                            // Return
                                            return description
                                        })());

                                        // Remove Attribute Namespace
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'removeAttributeNS', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'removeAttributeNS').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function removeAttributeNS() {
                                                    // Initialization > (Element, Name)
                                                    let element = this,
                                                        name = arguments[1];

                                                    // Update > LapysJS Development Kit Experimental Features
                                                    (name === 'features') && LDKF.spliceArray(LDKE.active, 0, LDKE.active.length);

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                            // Return
                                            return description
                                        })());

                                        // Set Attribute
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'setAttribute', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'setAttribute').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function setAttribute() {
                                                    // Initialization > (Element, Name, Value)
                                                    let element = this,
                                                        name = arguments[0],
                                                        value = arguments[1];

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (name === 'features') {
                                                        // Initialization > ((Active, Valid), Features, Index, Iterator)
                                                        let activeFeatures = LDKE.active,
                                                            validFeatures = LDKE.valueOf(),
                                                            features = [],
                                                            index = 0,
                                                            iterator = index;

                                                        // Update > Value
                                                        LDKF.isArray(value) && (value = LDKF.joinArray(value, ' '));
                                                        value = LDKF.replaceString(LDKF.string(value), / {1,}/g, ' ');

                                                        // Initialization > Length
                                                        let length = value.length;

                                                        /* Loop
                                                                Iterate through Value.
                                                        */
                                                        for (iterator; iterator != length; iterator += 1) {
                                                            // Initialization > Character
                                                            let character = value[iterator];

                                                            /* Logic
                                                                    [if statement]
                                                            */
                                                            if (LDKF.testRegex(/[-\s\w]/, character))
                                                                /* Logic
                                                                        [if:else statement]
                                                                */
                                                                if (character == ' ')
                                                                    // Update > Index
                                                                    index += 1;

                                                                else
                                                                    // Update > Features
                                                                    index in features ? features[index] += character : features[index] = character
                                                        }

                                                        // Update > Length
                                                        length = features.length;

                                                        /* Loop
                                                                Index Features.
                                                        */
                                                        for (iterator = 0; iterator < length; iterator += 1) {
                                                            // Initialization > Feature
                                                            let feature = features[iterator];

                                                            /* Logic
                                                                    [if statement]
                                                            */
                                                            if (!LDKF.includesArray(validFeatures, feature)) {
                                                                // Warn
                                                                LDKF.warn("'" + feature + "'", ['not', 'a'], 'valid feature of LapysJS', ', so it has been ignored');

                                                                // Update > Features
                                                                LDKF.spliceArray(features, iterator, 1)
                                                            }
                                                        }

                                                        // Update > Active Features
                                                        LDKF.spliceArray(activeFeatures, 0, activeFeatures.length);
                                                        LDKF.$pushArray(activeFeatures, features);

                                                        // (...)
                                                        activeFeatures.length ?  method.call(this, name, LDKF.joinArray(activeFeatures, ' ')) : LDKF.removeAttributeElement(this, 'features');

                                                        // Return
                                                        return LDKF.arrayFrom(activeFeatures)
                                                    }

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                                // (LapysJS Prototype > Script) > Features
                                                LDKF.hasAttributeElement(LapysJSProto.script, 'features') && description.value.call(LapysJSProto.script, 'features', LDKF.getAttributeElement(LapysJSProto.script, 'features'));

                                            // Return
                                            return description
                                        })());

                                        // Set Attribute Node
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'setAttributeNode', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'setAttributeNode').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function setAttributeNode() {
                                                    // Initialization > (Element, Node, Name, Value)
                                                    let element = this,
                                                        node = arguments[0],
                                                        name = LDKF.isAttr(node) ? LDKF.get.attributeName(node) : null,
                                                        value = LDKF.isAttr(node) ? LDKF.get.attributeValue(node) : null;

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (name === 'features')
                                                        // Modification > (LapysJS Prototype > Script) > Features
                                                        LapysJSProto.script.setAttribute(name, value);

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                            // Return
                                            return description
                                        })());

                                        // Set Attribute Namespace
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'setAttributeNS', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'setAttributeNS').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function setAttributeNS() {
                                                    // Initialization > (Element, Name, Value)
                                                    let element = this,
                                                        name = arguments[0],
                                                        value = arguments[1];

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (name === 'features')
                                                        // Modification > (LapysJS Prototype > Script) ? [Name]
                                                        LapysJSProto.script.setAttribute(name, value);

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                            // Return
                                            return description
                                        })());

                                        // Set Attribute Node Namespace
                                        LDKF.objectDefineProperty(LapysJSProto.script, 'setAttributeNodeNS', (function() {
                                            // Initialization > (Description, Method)
                                            let description = {configurable: !1, enumerable: !1, writable: !1},
                                                method = LDKF.objectGetOwnPropertyDescriptor(LDKO.elementProto, 'setAttributeNodeNS').value;

                                            // Modification
                                                // Description > Value
                                                description.value = function setAttributeNodeNS() {
                                                    // Initialization > (Element, Node, Name, Value)
                                                    let element = this,
                                                        node = arguments[1],
                                                        name = LDKF.isAttr(node) ? LDKF.get.attributeName(node) : null,
                                                        value = LDKF.isAttr(node) ? LDKF.get.attributeValue(node) : null;

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (name === 'features')
                                                        // Modification > (LapysJS Prototype > Script) > Features
                                                        LapysJSProto.script.setAttribute(name, value);

                                                    // Return
                                                    return method.apply(this, LDKF.toArray(arguments))
                                                };

                                            // Return
                                            return description
                                        })());

                                    // Temporary Data
                                    LDKF.objectDefineProperty(LapysJSProto, 'tmp', {
                                        // Value
                                        value: new (function() {
                                            // Initialization > Target
                                            let that = this;

                                            // Modification > Target
                                                // Methods
                                                that.methods = [];

                                                // Processing Duration
                                                that.processingDuration = LDKF.performanceNow();

                                                /* Prototypes
                                                        --- NOTE ---
                                                            #Lapys: Public external storage for cloning prototypes.
                                                */
                                                that.prototypes = [];

                                            // Return
                                            return that
                                        })
                                    });

                        // Temporary Object
                            // Script Source
                            tmpObject.scriptSource = LDKF.get.htmlScriptElementSrc(LapysJS.script);

                        // Window
                            // Absolute
                            LDKF.objectDefineProperty(window, 'abs', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKF.abs,

                                // Writable
                                writable: !0
                            });

                            // Application
                            LDKF.objectDefineProperty(window, 'app', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: (function() {
                                    // Initialization > (Window) Application
                                    let winApp = window.Application,
                                        app = LDKF.customObject('Application'),
                                        $app = app.constructor.prototype;

                                    // Initialization > Application Storage
                                    let appStorage = {
                                        // Connection
                                        connection: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'connection'),

                                        // Cookie
                                        cookie: LDKF.objectGetOwnPropertyDescriptor(LDKO.$documentProto, 'cookie') || ({get: function cookie() { return LDKF.string(LDKO.$document.cookie) }, set: function cookie() { return arguments[0] }}),

                                        // Device Pixel Ratio
                                        devicePixelRatio: LDKF.objectGetOwnPropertyDescriptor(window, 'devicePixelRatio'),

                                        // Do Not Track
                                        doNotTrack: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'doNotTrack'),

                                        // Language
                                        language: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'language'),

                                        // Languages
                                        languages: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'languages'),

                                        // Online
                                        online: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'onLine'),

                                        // Platform
                                        platform: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'platform'),

                                        // Plugins
                                        plugins: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'plugins'),

                                        // User Agent
                                        userAgent: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'userAgent'),

                                        // Vendor
                                        vendor: LDKF.objectGetOwnPropertyDescriptor(LDKO.$navigatorProto, 'vendor'),

                                        /* Viewport */
                                        viewport: new (function ApplicationViewport() {
                                            // Initialization > Target
                                            let that = this;

                                            // Modification > Target
                                                // Height
                                                LDKF.objectDefineProperty(that, 'height', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getHeight() {
                                                        // Initialization > (Special Character, Match)
                                                        let specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}height {0,}=.+', specialCharacter, !1);

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Initialization > ((Allow) Stream, Iterator, Match Length)
                                                            let allowStream = !1,
                                                                iterator = 0,
                                                                matchLength = match.length,
                                                                stream = '';

                                                            /* Loop
                                                                    Iterate through Match.
                                                            */
                                                            for (iterator; iterator < matchLength; iterator += 1) {
                                                                // Initialization > Character
                                                                let character = match[iterator];

                                                                // Logic > Break
                                                                if (character == ',') break;

                                                                /* Logic
                                                                        [if:else if statement]

                                                                    > Update > (Allow) Stream
                                                                */
                                                                if (allowStream)
                                                                    stream += character;

                                                                else if (character == '=')
                                                                    allowStream = !0
                                                            }

                                                            // Return
                                                            return !LDKF.isNaN(+stream) ? +stream : stream
                                                        }

                                                        // Return
                                                        return null
                                                    },

                                                    // Set
                                                    set: function setHeight() {
                                                        // Initialization > (Content, Data, Key, Special Character, Match, Element)
                                                        let content = '',
                                                            data = LDKF.string(arguments[0]),
                                                            key = 'height',
                                                            specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}' + key + ' {0,}=.+', specialCharacter),
                                                            element = LDKF.querySelectorDocument('meta[name=viewport');

                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Update > Content
                                                            content = LDKF.replaceString(LDKF.get.htmlMetaElementContent(element), match, key + '=' + data)
                                                        }

                                                        else {
                                                            // Update > (Match, Content)
                                                            match = LDKF.get.htmlMetaElementContent(element);
                                                            content = match ? match + ', ' + key + '=' + data : key + '=' + data
                                                        }

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                                // Initial Scale
                                                LDKF.objectDefineProperty(that, 'initialScale', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getInitialScale() {
                                                        // Initialization > (Special Character, Match)
                                                        let specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}initial-scale {0,}=.+', specialCharacter, !1);

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Initialization > ((Allow) Stream, Iterator, Match Length)
                                                            let allowStream = !1,
                                                                iterator = 0,
                                                                matchLength = match.length,
                                                                stream = '';

                                                            /* Loop
                                                                    Iterate through Match.
                                                            */
                                                            for (iterator; iterator < matchLength; iterator += 1) {
                                                                // Initialization > Character
                                                                let character = match[iterator];

                                                                // Logic > Break
                                                                if (character == ',') break;

                                                                /* Logic
                                                                        [if:else if statement]

                                                                    > Update > (Allow) Stream
                                                                */
                                                                if (allowStream)
                                                                    stream += character;

                                                                else if (character == '=')
                                                                    allowStream = !0
                                                            }

                                                            // Return
                                                            return !LDKF.isNaN(+stream) ? +stream : stream
                                                        }

                                                        // Return
                                                        return null
                                                    },

                                                    // Set
                                                    set: function setInitialScale() {
                                                        // Initialization > (Content, Data, Key, Special Character, Match, Element)
                                                        let content = '',
                                                            data = LDKF.string(arguments[0]),
                                                            key = 'initial-scale',
                                                            specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}' + key + ' {0,}=.+', specialCharacter),
                                                            element = LDKF.querySelectorDocument('meta[name=viewport');

                                                        // Update > Data
                                                        LDKF.isNaN(+data) || (LDKF.indexOfString(data, '.') != -1) || (data = data += '.0');

                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Update > Content
                                                            content = LDKF.replaceString(LDKF.get.htmlMetaElementContent(element), match, key + '=' + data)
                                                        }

                                                        else {
                                                            // Update > (Match, Content)
                                                            match = LDKF.get.htmlMetaElementContent(element);
                                                            content = match ? match + ', ' + key + '=' + data : key + '=' + data
                                                        }

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                                // Maximum Scale
                                                LDKF.objectDefineProperty(that, 'maximumScale', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getMaximumScale() {
                                                        // Initialization > (Special Character, Match)
                                                        let specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}maximum-scale {0,}=.+', specialCharacter, !1);

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Initialization > ((Allow) Stream, Iterator, Match Length)
                                                            let allowStream = !1,
                                                                iterator = 0,
                                                                matchLength = match.length,
                                                                stream = '';

                                                            /* Loop
                                                                    Iterate through Match.
                                                            */
                                                            for (iterator; iterator < matchLength; iterator += 1) {
                                                                // Initialization > Character
                                                                let character = match[iterator];

                                                                // Logic > Break
                                                                if (character == ',') break;

                                                                /* Logic
                                                                        [if:else if statement]

                                                                    > Update > (Allow) Stream
                                                                */
                                                                if (allowStream)
                                                                    stream += character;

                                                                else if (character == '=')
                                                                    allowStream = !0
                                                            }

                                                            // Return
                                                            return !LDKF.isNaN(+stream) ? +stream : stream
                                                        }

                                                        // Return
                                                        return null
                                                    },

                                                    // Set
                                                    set: function setMaximumScale() {
                                                        // Initialization > (Content, Data, Key, Special Character, Match, Element)
                                                        let content = '',
                                                            data = LDKF.string(arguments[0]),
                                                            key = 'maximum-scale',
                                                            specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}' + key + ' {0,}=.+', specialCharacter),
                                                            element = LDKF.querySelectorDocument('meta[name=viewport');

                                                        // Update > Data
                                                        LDKF.isNaN(+data) || (LDKF.indexOfString(data, '.') != -1) || (data = data += '.0');

                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Update > Content
                                                            content = LDKF.replaceString(LDKF.get.htmlMetaElementContent(element), match, key + '=' + data)
                                                        }

                                                        else {
                                                            // Update > (Match, Content)
                                                            match = LDKF.get.htmlMetaElementContent(element);
                                                            content = match ? match + ', ' + key + '=' + data : key + '=' + data
                                                        }

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                                // Minimal User Interface
                                                LDKF.objectDefineProperty(that, 'minimalUI', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getMinimalUI() {
                                                        /* Viewport Content Match
                                                                --- NOTE ---
                                                                    #Lapys: Create the Viewport meta element
                                                                        if there`s none.
                                                        */
                                                        viewportContentMatch('', '');

                                                        // Initialization > (Element, Content)
                                                        let element = LDKF.querySelectorDocument('meta[name=viewport'),
                                                            content = LDKF.get.htmlMetaElementContent(element);

                                                        // Return
                                                        return content ? LDKF.indexOfString(content, 'minimal-ui') == -1 ? !1 : !0 : !1
                                                    },

                                                    // Set
                                                    set: function setMinimalUI() {
                                                        // Viewport Content Match
                                                        viewportContentMatch('', '');

                                                        // Initialization > (Element, Content)
                                                        let data = !!arguments[0],
                                                            element = LDKF.querySelectorDocument('meta[name=viewport'),
                                                            content = LDKF.get.htmlMetaElementContent(element);

                                                        /* Logic
                                                                [if:else statement]

                                                            > Update > Content
                                                        */
                                                        if (content)
                                                            (LDKF.indexOfString(content, 'minimal-ui') == -1) && (content += ', minimal-ui');

                                                        else
                                                            content = 'minimal-ui';

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                                // Minimum Scale
                                                LDKF.objectDefineProperty(that, 'minimumScale', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getMinimumScale() {
                                                        // Initialization > (Special Character, Match)
                                                        let specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}minimum-scale {0,}=.+', specialCharacter, !1);

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Initialization > ((Allow) Stream, Iterator, Match Length)
                                                            let allowStream = !1,
                                                                iterator = 0,
                                                                matchLength = match.length,
                                                                stream = '';

                                                            /* Loop
                                                                    Iterate through Match.
                                                            */
                                                            for (iterator; iterator < matchLength; iterator += 1) {
                                                                // Initialization > Character
                                                                let character = match[iterator];

                                                                // Logic > Break
                                                                if (character == ',') break;

                                                                /* Logic
                                                                        [if:else if statement]

                                                                    > Update > (Allow) Stream
                                                                */
                                                                if (allowStream)
                                                                    stream += character;

                                                                else if (character == '=')
                                                                    allowStream = !0
                                                            }

                                                            // Return
                                                            return !LDKF.isNaN(+stream) ? +stream : stream
                                                        }

                                                        // Return
                                                        return null
                                                    },

                                                    // Set
                                                    set: function setMinimumScale() {
                                                        // Initialization > (Content, Data, Key, Special Character, Match, Element)
                                                        let content = '',
                                                            data = LDKF.string(arguments[0]),
                                                            key = 'minimum-scale',
                                                            specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}' + key + ' {0,}=.+', specialCharacter),
                                                            element = LDKF.querySelectorDocument('meta[name=viewport');

                                                        // Update > Data
                                                        LDKF.isNaN(+data) || (LDKF.indexOfString(data, '.') != -1) || (data = data += '.0');

                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Update > Content
                                                            content = LDKF.replaceString(LDKF.get.htmlMetaElementContent(element), match, key + '=' + data)
                                                        }

                                                        else {
                                                            // Update > (Match, Content)
                                                            match = LDKF.get.htmlMetaElementContent(element);
                                                            content = match ? match + ', ' + key + '=' + data : key + '=' + data
                                                        }

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                                // Target Density Pixels
                                                LDKF.objectDefineProperty(that, 'targetDensityDPI', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getTargetDensityDPI() {
                                                        // Initialization > (Element, Data)
                                                        let element = LDKF.querySelectorDocument('meta[name=viewport'),
                                                            data = element ? LDKF.getAttributeElement(element, 'targetdensity-dpi') : null;

                                                        // Return
                                                        return !LDKF.isNaN(+data) ? +data : data
                                                    },

                                                    // Set
                                                    set: function setTargetDensityDPI() {
                                                        // Return
                                                        return setContent('meta[name=viewport', getContent('meta[name=viewport'), {name: 'viewport', targetdensityDpi: LDKF.string(arguments[0])})
                                                    }
                                                });

                                                // User Scalable
                                                LDKF.objectDefineProperty(that, 'userScalable', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getUserScalable() {
                                                        // Initialization > (Special Character, Match)
                                                        let specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}user-scalable {0,}=.+', specialCharacter, !1);

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Initialization > ((Allow) Stream, Iterator, Match Length)
                                                            let allowStream = !1,
                                                                iterator = 0,
                                                                matchLength = match.length,
                                                                stream = '';

                                                            /* Loop
                                                                    Iterate through Match.
                                                            */
                                                            for (iterator; iterator < matchLength; iterator += 1) {
                                                                // Initialization > Character
                                                                let character = match[iterator];

                                                                // Logic > Break
                                                                if (character == ',') break;

                                                                /* Logic
                                                                        [if:else if statement]

                                                                    > Update > (Allow) Stream
                                                                */
                                                                if (allowStream)
                                                                    stream += character;

                                                                else if (character == '=')
                                                                    allowStream = !0
                                                            }

                                                            // Return
                                                            return stream == 'yes' ? !0 : (stream == 'no' ? !1 : stream)
                                                        }

                                                        // Return
                                                        return null
                                                    },

                                                    // Set
                                                    set: function setUserScalable() {
                                                        // Initialization > (Content, Data, Key, Special Character, Match, Element)
                                                        let content = '',
                                                            data = LDKF.string(arguments[0]),
                                                            key = 'user-scalable',
                                                            specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}' + key + ' {0,}=.+', specialCharacter),
                                                            element = LDKF.querySelectorDocument('meta[name=viewport');

                                                        // Update > Data
                                                        data = data == 'no' || data == 'yes' ? data : data ? 'yes' : 'no';

                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Update > Content
                                                            content = LDKF.replaceString(LDKF.get.htmlMetaElementContent(element), match, key + '=' + data)
                                                        }

                                                        else {
                                                            // Update > (Match, Content)
                                                            match = LDKF.get.htmlMetaElementContent(element);
                                                            content = match ? match + ', ' + key + '=' + data : key + '=' + data
                                                        }

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                                // Width
                                                LDKF.objectDefineProperty(that, 'width', {
                                                    // Configurable
                                                    configurable: !0,

                                                    // Enumerable
                                                    enumerable: !0,

                                                    // Get
                                                    get: function getWidth() {
                                                        // Initialization > (Special Character, Match)
                                                        let specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}width {0,}=.+', specialCharacter, !1);

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Initialization > ((Allow) Stream, Iterator, Match Length)
                                                            let allowStream = !1,
                                                                iterator = 0,
                                                                matchLength = match.length,
                                                                stream = '';

                                                            /* Loop
                                                                    Iterate through Match.
                                                            */
                                                            for (iterator; iterator < matchLength; iterator += 1) {
                                                                // Initialization > Character
                                                                let character = match[iterator];

                                                                // Logic > Break
                                                                if (character == ',') break;

                                                                /* Logic
                                                                        [if:else if statement]

                                                                    > Update > (Allow) Stream
                                                                */
                                                                if (allowStream)
                                                                    stream += character;

                                                                else if (character == '=')
                                                                    allowStream = !0
                                                            }

                                                            // Return
                                                            return !LDKF.isNaN(+stream) ? +stream : stream
                                                        }

                                                        // Return
                                                        return null
                                                    },

                                                    // Set
                                                    set: function setWidth() {
                                                        // Initialization > (Content, Data, Key, Special Character, Match, Element)
                                                        let content = '',
                                                            data = LDKF.string(arguments[0]),
                                                            key = 'width',
                                                            specialCharacter = LDKC.specialCharacters,
                                                            match = viewportContentMatch(' {0,}(,|) {0,}' + key + ' {0,}=.+', specialCharacter),
                                                            element = LDKF.querySelectorDocument('meta[name=viewport');

                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (match) {
                                                            // Update > Match
                                                            match = match[0];
                                                            match = LDKF.sliceString(match, 0, -specialCharacter.length);

                                                            // Loop > Update > Match
                                                            while (match[0] == ',' || match[0] == ' ') match = LDKF.sliceString(match, 1);
                                                            while (match[match.length - 1] == ',' || match[match.length - 1] == ' ') match = LDKF.sliceString(match, 0, -1);

                                                            // Update > Content
                                                            content = LDKF.replaceString(LDKF.get.htmlMetaElementContent(element), match, key + '=' + data)
                                                        }

                                                        else {
                                                            // Update > (Match, Content)
                                                            match = LDKF.get.htmlMetaElementContent(element);
                                                            content = match ? match + ', ' + key + '=' + data : key + '=' + data
                                                        }

                                                        // Return
                                                        return LDKF.set.htmlMetaElementContent(element, content)
                                                    }
                                                });

                                            // Return
                                            return that
                                        })
                                    };

                                    // Function
                                        // Get Content
                                        function getContent() {
                                            // Initialization > (Query, Element, Specifier Attribute)
                                            let query = arguments[0],
                                                element = LDKF.querySelectorDocument(query),
                                                specifierAttribute = arguments[1];

                                            // Return
                                            return element ? (arguments.length > 1 ? LDKF.getAttributeElement(element, specifierAttribute) : LDKF.get.htmlMetaElementContent(element)) : null
                                        }

                                        // Set Content
                                        function setContent() {
                                            // Initialization > (Data, Properties, Query, Element (Tag Name))
                                            let data = arguments[1],
                                                properties = LDKF.object(arguments[2]),
                                                query = LDKF.string(arguments[0]),
                                                element = LDKF.querySelectorDocument(query),
                                                elementTagName = this == window ? 'meta' : this;

                                            // Function > Iterate Properties
                                            function iterateProperties() {
                                                // LapysJS Development Kit Functions > Iterate Object
                                                LDKF.iterateObject(function(key, value) {
                                                    /* Logic
                                                            [switch:case:default statement]

                                                        > Modification > Element > (...)
                                                    */
                                                    switch (key) {
                                                        // Name
                                                        case 'name':
                                                            LDKF.set.htmlMetaElementName(element, value);
                                                            break;

                                                        // [Default]
                                                        default:
                                                            LDKF.setAttributeElement(element, LDKF.replaceString(key, /[A-Z]/g, function(a){return'-'+LDKF.toLowerCaseString(a)}), value)
                                                    }
                                                }, properties)
                                            }

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (element)
                                                // (Iterate Properties) | (Modification > Element > Content)
                                                LDKF.isNull(data) ?
                                                    iterateProperties() :
                                                    LDKF.set.htmlMetaElementContent(element, data);

                                            else {
                                                // Update > Element
                                                element = LDKF.createElementDocument(elementTagName);

                                                // Modification > Element > Content
                                                LDKF.isNull(data) || LDKF.set.htmlMetaElementContent(element, data);

                                                // Iterate Properties
                                                iterateProperties();

                                                // Initialization > Parent
                                                let parent = LDKF.get.documentHead();

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (parent)
                                                    // Insertion
                                                    LDKF.appendChildNode(parent, element);

                                                else
                                                    // Error Handling
                                                    try {
                                                        // Insertion
                                                        LDKF.appendChildDocument(element)
                                                    } catch (error) {
                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (error.constructor == LDKO.domException) {
                                                            // Initialization > Children
                                                            let children = LDKF.get.documentChildren(LDKO.$document);

                                                            /* Logic
                                                                    [if statement]

                                                                > Insertion
                                                            */
                                                            if (LDKF.get.htmlCollectionLength(children))
                                                                LDKF.appendChildNode(children[0], element)
                                                        }

                                                        else
                                                            // Error
                                                            throw error
                                                    }
                                            }

                                            // Return
                                            return LDKF.get.htmlMetaElementContent(element)
                                        }

                                        // Viewport Content Match
                                        function viewportContentMatch() {
                                            // Initialization > (Create New Meta Element, Element, Search Selector, Special Character)
                                            let createNewMetaElement = arguments.length > 2 ? !!arguments[2] : !0,
                                                element = LDKF.querySelectorDocument('meta[name=viewport'),
                                                searchSelector = arguments[0],
                                                specialCharacter = arguments[1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (createNewMetaElement && !element) {
                                                // Update > Element
                                                element = LDKF.createElementDocument('meta');

                                                // Modification > Element > (Content, Name)
                                                LDKF.set.htmlMetaElementContent(element, '');
                                                LDKF.set.htmlMetaElementName(element, 'viewport');

                                                // Initialization > Parent
                                                let parent = LDKF.get.documentHead();

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (parent)
                                                    // Insertion
                                                    LDKF.appendChildNode(parent, element);

                                                else
                                                    // Error Handling
                                                    try {
                                                        // Insertion
                                                        LDKF.appendChildDocument(element)
                                                    } catch (error) {
                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (error.constructor == LDKO.domException) {
                                                            // Initialization > Children
                                                            let children = LDKF.get.documentChildren(LDKO.$document);

                                                            /* Logic
                                                                    [if statement]

                                                                > Insertion
                                                            */
                                                            if (LDKF.get.htmlCollectionLength(children))
                                                                LDKF.appendChildNode(children[0], element)
                                                        }

                                                        else
                                                            // Error
                                                            throw error
                                                    }
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (element) {
                                                // Initialization > (Content, Match)
                                                let content = LDKF.get.htmlMetaElementContent(element),
                                                    match = LDKF.matchString(content + specialCharacter, LDKF.regex(searchSelector + specialCharacter));

                                                // Return
                                                return match
                                            }

                                            // Return
                                            return null
                                        }

                                    // Modification > Application
                                        // Abstract
                                        LDKF.objectDefineProperty($app, 'abstract', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getAbstract() {
                                                // Return
                                                return getContent('meta[name=abstract')
                                            },

                                            // Set
                                            set: function setAbstract() {
                                                // Return
                                                return setContent('meta[name=abstract', LDKF.string(arguments[0]), {name: 'abstract'})
                                            }
                                        });

                                        // Application
                                        LDKF.objectDefineProperty($app, 'app', {value: app});

                                        // Author
                                        LDKF.objectDefineProperty($app, 'author', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getAuthor() {
                                                // Return
                                                return getContent('meta[name=author')
                                            },

                                            // Set
                                            set: function setAuthor() {
                                                // Return
                                                return setContent('meta[name=author', LDKF.string(arguments[0]), {name: 'author'})
                                            }
                                        });

                                        // Cache Control
                                        LDKF.objectDefineProperty($app, 'cacheControl', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getCacheControl() {
                                                // Return
                                                return getContent('meta[http-equiv=Cache-Control], meta[http-equiv=cache-control]')
                                            },

                                            // Set
                                            set: function setCacheControl() {
                                                // Return
                                                return setContent('meta[http-equiv=Cache-Control], meta[http-equiv=cache-control]', LDKF.string(arguments[0]), {httpEquiv: 'cache-control'})
                                            }
                                        });

                                        // Category
                                        LDKF.objectDefineProperty($app, 'category', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getCategory() {
                                                // Return
                                                return getContent('meta[name=category')
                                            },

                                            // Set
                                            set: function setCategory() {
                                                // Return
                                                return setContent('meta[name=category', LDKF.string(arguments[0]), {name: 'category'})
                                            }
                                        });

                                        // Character Set
                                        LDKF.objectDefineProperty($app, 'charset', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getCharacterSet() {
                                                // Return
                                                return getContent('meta[charset', 'charset')
                                            },

                                            // Set
                                            set: function setCharacterSet() {
                                                // Return
                                                return setContent('meta[charset', null, {charset: LDKF.string(arguments[0])})
                                            }
                                        });

                                        // Connection
                                        appStorage.connection && LDKF.objectDefineProperty($app, 'connection', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function connection() {
                                                // Return
                                                return appStorage.connection.get.call(LDKO.$navigator)
                                            }
                                        });

                                        // Classification
                                        LDKF.objectDefineProperty($app, 'classification', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getClassification() {
                                                // Return
                                                return getContent('meta[name=Classification], meta[name=classification]')
                                            },

                                            // Set
                                            set: function setClassification() {
                                                // Return
                                                return setContent('meta[name=Classification], meta[name=classification]', LDKF.string(arguments[0]), {name: 'Classification'})
                                            }
                                        });

                                        // Cookies
                                        LDKF.objectDefineProperty($app, 'cookies', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function cookies() {
                                                // Return
                                                return appStorage.cookie.get.call(LDKO.$document)
                                            },

                                            // Get
                                            set: function cookies() {
                                                // Return
                                                return appStorage.cookie.set.call(LDKO.$document, arguments[0])
                                            }
                                        });

                                        // Copyright
                                        LDKF.objectDefineProperty($app, 'copyright', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getCopyright() {
                                                // Return
                                                return getContent('meta[name=copyright')
                                            },

                                            // Set
                                            set: function setCopyright() {
                                                // Return
                                                return setContent('meta[name=copyright', LDKF.string(arguments[0]), {name: 'copyright'})
                                            }
                                        });

                                        // Coverage
                                        LDKF.objectDefineProperty($app, 'coverage', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getCoverage() {
                                                // Return
                                                return getContent('meta[name=coverage')
                                            },

                                            // Set
                                            set: function setCoverage() {
                                                // Return
                                                return setContent('meta[name=coverage', LDKF.string(arguments[0]), {name: 'coverage'})
                                            }
                                        });

                                        // Description
                                        LDKF.objectDefineProperty($app, 'description', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getDescription() {
                                                // Return
                                                return getContent('meta[name=description')
                                            },

                                            // Set
                                            set: function setDescription() {
                                                // Return
                                                return setContent('meta[name=description', LDKF.string(arguments[0]), {name: 'description'})
                                            }
                                        });

                                        // Designer
                                        LDKF.objectDefineProperty($app, 'designer', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getDesigner() {
                                                // Return
                                                return getContent('meta[name=designer')
                                            },

                                            // Set
                                            set: function setDesigner() {
                                                // Return
                                                return setContent('meta[name=designer', LDKF.string(arguments[0]), {name: 'designer'})
                                            }
                                        });

                                        // Device Pixel Ratio
                                        appStorage.devicePixelRatio && LDKF.objectDefineProperty($app, 'dpRatio', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getDevicePixelRatio() {
                                                // Return
                                                return appStorage.devicePixelRatio.get.call(LDKO.window)
                                            },

                                            // Set
                                            set: function setDevicePixelRatio() {
                                                // Return
                                                return appStorage.devicePixelRatio.set.call(LDKO.window, arguments[0])
                                            }
                                        });

                                        // Directory
                                        LDKF.objectDefineProperty($app, 'directory', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getDirectory() {
                                                // Return
                                                return getContent('meta[name=directory')
                                            },

                                            // Set
                                            set: function setDirectory() {
                                                // Return
                                                return setContent('meta[name=directory', LDKF.string(arguments[0]), {name: 'directory'})
                                            }
                                        });

                                        // Distribution
                                        LDKF.objectDefineProperty($app, 'distribution', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getDistribution() {
                                                // Return
                                                return getContent('meta[name=distribution')
                                            },

                                            // Set
                                            set: function setDistribution() {
                                                // Return
                                                return setContent('meta[name=distribution', LDKF.string(arguments[0]), {name: 'distribution'})
                                            }
                                        });

                                        // Do Not Track
                                        LDKF.objectDefineProperty($app, 'doNotTrack', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function doNotTrack() {
                                                // Return
                                                return appStorage.doNotTrack.get.call(LDKO.$navigator)
                                            }
                                        });

                                        // Expires
                                        LDKF.objectDefineProperty($app, 'expires', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getExpires() {
                                                // Return
                                                return getContent('meta[http-equiv=Expires], meta[http-equiv=expires]')
                                            },

                                            // Set
                                            set: function setExpires() {
                                                // Return
                                                return setContent('meta[http-equiv=Expires], meta[http-equiv=expires]', LDKF.string(arguments[0]), {httpEquiv: 'Expires'})
                                            }
                                        });

                                        // Height
                                        LDKF.objectDefineProperty($app, 'height', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getHeight() {
                                                // Return
                                                return appStorage.viewport.height
                                            },

                                            // Set
                                            set: function setHeight() {
                                                // Return
                                                return appStorage.viewport.height = arguments[0]
                                            }
                                        });

                                        // Identifier URL
                                        LDKF.objectDefineProperty($app, 'identifierURL', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getIdentifierURL() {
                                                // Return
                                                return getContent('meta[name=identifier-URL], meta[name=identifier-url]')
                                            },

                                            // Set
                                            set: function setIdentifierURL() {
                                                // Return
                                                return setContent('meta[name=identifier-URL], meta[name=identifier-url]', LDKF.string(arguments[0]), {name: 'identifier-URL'})
                                            }
                                        });

                                        // Keywords
                                        LDKF.objectDefineProperty($app, 'keywords', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getKeywords() {
                                                // Return
                                                return getContent('meta[name=keywords')
                                            },

                                            // Set
                                            set: function setKeywords() {
                                                // Return
                                                return setContent('meta[name=keywords', LDKF.string(arguments[0]), {name: 'keywords'})
                                            }
                                        });

                                        // Language
                                        LDKF.objectDefineProperty($app, 'lang', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getLanguage() {
                                                // Return
                                                return getContent('meta[name=language')
                                            },

                                            // Set
                                            set: function setLanguage() {
                                                // Return
                                                return setContent('meta[name=language', LDKF.string(arguments[0]), {name: 'language'})
                                            }
                                        });

                                        // Languages
                                        LDKF.objectDefineProperty($app, 'langs', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function langs() {
                                                // Initialization > Array
                                                let array = LDKF.customArray('ApplicationLanguages', appStorage.languages.get.call(LDKO.$navigator));

                                                // Modification > Array > Length
                                                LDKF.objectDefineProperty(array, 'language', {value: appStorage.language.get.call(LDKO.$navigator)});

                                                // Return
                                                return array
                                            }
                                        });

                                        // Name
                                        LDKF.objectDefineProperty($app, 'name', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getName() {
                                                // Return
                                                return LDKF.get.windowName()
                                            },

                                            // Set
                                            set: function setName() {
                                                // Initialization > (Document, Name)
                                                let $document = LDKO.$document,
                                                    name = LDKF.string(arguments[0]);

                                                // Modification
                                                    // Document > Title
                                                    LDKF.set.documentTitle($document, name);

                                                    // Window > Name
                                                    LDKF.set.windowName(LDKF.get.documentTitle($document));

                                                // Return
                                                return LDKF.get.windowName()
                                            }
                                        });

                                        // Navigator
                                        LDKF.objectDefineProperty($app, 'nav', {
                                            // Configurable
                                            configurable: !1,

                                            // Get
                                            get: function navigator() {
                                                // Initialization > Navigator
                                                let nav = LDKF.customObject('ApplicationNavigator', {}, LDKO.$navigatorProto),
                                                    $nav = LDKO.$navigator;

                                                /* LapysJS Development Kit Functions > Iterate Object
                                                        --- WARN ---
                                                            #Lapys: Indexing the `Navigator.prototype` object returns error,
                                                                but we are shorting it off to access its properties.
                                                */
                                                LDKF.iterateObject(function(key, value, description) {
                                                    /* Logic
                                                            [if:else statement]

                                                        > Modification > Navigator > [Key]
                                                    */
                                                    if ('get' in description)
                                                        LDKF.objectDefineProperty(nav, key, {
                                                            // Configurable
                                                            configurable: description.configurable,

                                                            // Enumerable
                                                            enumerable: description.enumerable,

                                                            // Get
                                                            get: (function() {
                                                                // Initialization > Method
                                                                let method = description.get;

                                                                // Return
                                                                return (function() { return method.call($nav) })
                                                            })(),

                                                            // Set
                                                            set: (function() {
                                                                // Initialization > Method
                                                                let method = description.set;

                                                                // Return
                                                                return (function() { return method.call($nav, arguments[0]) })
                                                            })()
                                                        });

                                                    else
                                                        nav[key] = value
                                                }, nav.constructor.prototype, !0, !1);

                                                // Return
                                                return nav
                                            }
                                        });

                                        // Online
                                        LDKF.objectDefineProperty($app, 'online', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function online() {
                                                // Return
                                                return appStorage.online.get.call(LDKO.$navigator)
                                            }
                                        });

                                        // Owner
                                        LDKF.objectDefineProperty($app, 'owner', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getOwner() {
                                                // Return
                                                return getContent('meta[name=owner')
                                            },

                                            // Set
                                            set: function setOwner() {
                                                // Return
                                                return setContent('meta[name=owner', LDKF.string(arguments[0]), {name: 'owner'})
                                            }
                                        });

                                        // Platform
                                        LDKF.objectDefineProperty($app, 'platform', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function platform() {
                                                // Return
                                                return appStorage.platform.get.call(LDKO.$navigator)
                                            }
                                        });

                                        // Plugins
                                        LDKF.objectDefineProperty($app, 'plugins', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function plugins() {
                                                // Return
                                                return appStorage.plugins.get.call(LDKO.$navigator)
                                            }
                                        });

                                        // Pragma
                                        LDKF.objectDefineProperty($app, 'pragma', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getPragma() {
                                                // Return
                                                return getContent('meta[http-equiv=Pragma], meta[http-equiv=pragma]')
                                            },

                                            // Set
                                            set: function setPragma() {
                                                // Return
                                                return setContent('meta[http-equiv=Pragma], meta[http-equiv=pragma]', LDKF.string(arguments[0]), {httpEquiv: 'Pragma'})
                                            }
                                        });

                                        // Rating
                                        LDKF.objectDefineProperty($app, 'rating', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getRating() {
                                                // Return
                                                return getContent('meta[name=rating')
                                            },

                                            // Set
                                            set: function setRating() {
                                                // Return
                                                return setContent('meta[name=rating', LDKF.string(arguments[0]), {name: 'rating'})
                                            }
                                        });

                                        // Reply To
                                        LDKF.objectDefineProperty($app, 'reply-to', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getReplyTo() {
                                                // Return
                                                return getContent('meta[name=reply-to')
                                            },

                                            // Set
                                            set: function setReplyTo() {
                                                // Return
                                                return setContent('meta[name=reply-to', LDKF.string(arguments[0]), {name: 'reply-to'})
                                            }
                                        });

                                        // Revised
                                        LDKF.objectDefineProperty($app, 'revised', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getRevised() {
                                                // Return
                                                return getContent('meta[name=revised')
                                            },

                                            // Set
                                            set: function setRevised() {
                                                // Return
                                                return setContent('meta[name=revised', LDKF.string(arguments[0]), {name: 'revised'})
                                            }
                                        });

                                        // RevisitAfter
                                        LDKF.objectDefineProperty($app, 'revisitAfter', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getRevisitAfter() {
                                                // Return
                                                return getContent('meta[name=revisit-after')
                                            },

                                            // Set
                                            set: function setRevisitAfter() {
                                                // Return
                                                return setContent('meta[name=revisit-after', LDKF.string(arguments[0]), {name: 'revisit-after'})
                                            }
                                        });

                                        // Robots
                                        LDKF.objectDefineProperty($app, 'robots', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getRobots() {
                                                // Return
                                                return getContent('meta[name=robots')
                                            },

                                            // Set
                                            set: function setRobots() {
                                                // Return
                                                return setContent('meta[name=robots', LDKF.string(arguments[0]), {name: 'robots'})
                                            }
                                        });

                                        // Summary
                                        LDKF.objectDefineProperty($app, 'summary', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getSummary() {
                                                // Return
                                                return getContent('meta[name=summary')
                                            },

                                            // Set
                                            set: function setSummary() {
                                                // Return
                                                return setContent('meta[name=summary', LDKF.string(arguments[0]), {name: 'summary'})
                                            }
                                        });

                                        // Theme Color
                                        LDKF.objectDefineProperty($app, 'themeColor', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getThemeColor() {
                                                // Return
                                                return getContent('meta[name=theme-color')
                                            },

                                            // Set
                                            set: function setThemeColor() {
                                                // Return
                                                return setContent('meta[name=theme-color', LDKF.string(arguments[0]), {name: 'theme-color'})
                                            }
                                        });

                                        // Topic
                                        LDKF.objectDefineProperty($app, 'topic', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getTopic() {
                                                // Return
                                                return getContent('meta[name=topic')
                                            },

                                            // Set
                                            set: function setTopic() {
                                                // Return
                                                return setContent('meta[name=topic', LDKF.string(arguments[0]), {name: 'topic'})
                                            }
                                        });

                                        // URL
                                        LDKF.objectDefineProperty($app, 'url', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getURL() {
                                                // Return
                                                return getContent('meta[name=url')
                                            },

                                            // Set
                                            set: function setURL() {
                                                // Return
                                                return setContent('meta[name=url', LDKF.string(arguments[0]), {name: 'url'})
                                            }
                                        });

                                        // User Agent
                                        LDKF.objectDefineProperty($app, 'userAgent', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function userAgent() {
                                                // Return
                                                return appStorage.userAgent.get.call(LDKO.$navigator)
                                            }
                                        });

                                        // Vendor
                                        LDKF.objectDefineProperty($app, 'vendor', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function vendor() {
                                                // Return
                                                return appStorage.vendor.get.call(LDKO.$navigator)
                                            }
                                        });

                                        /* Viewport */
                                        LDKF.objectDefineProperty($app, 'viewport', {
                                            // Get
                                            get: function viewport() { return appStorage.viewport }
                                        });

                                        // Width
                                        LDKF.objectDefineProperty($app, 'width', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getWidth() {
                                                // Return
                                                return appStorage.viewport.width
                                            },

                                            // Set
                                            set: function setWidth() {
                                                // Return
                                                return appStorage.viewport.width = arguments[0]
                                            }
                                        });

                                        // X-UA Compatible
                                        LDKF.objectDefineProperty(app, 'xUA_Compatible', {
                                            // Configurable
                                            configurable: !0,

                                            // Get
                                            get: function getXUACompatible() {
                                                // Return
                                                return app.services.internetExplorer.xUA_Compatible
                                            },

                                            // Set
                                            set: function setXUACompatible() {
                                                // Return
                                                return app.services.internetExplorer.xUA_Compatible = arguments[0]
                                            }
                                        });

                                        /* Custom */
                                        LDKF.objectDefineProperty(app, 'custom', {
                                            // Value
                                            value: new (function Custom() {
                                                // Initialization
                                                let that = this;

                                                // Modification > Target
                                                    // Remove
                                                    LDKF.objectDefineProperty(that, 'remove', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Value
                                                        value: function remove() {
                                                            // Initialization > Name
                                                            let name = LDKF.string(arguments[0]);

                                                            // Error
                                                            arguments.length || LDKF.error("'remove'", 'argument', [1, 0]);

                                                            // Initialization > Element
                                                            let element = LDKF.querySelectorDocument("meta[name='" + name + "'");

                                                            /* Logic
                                                                    [if statement]
                                                            */
                                                            if (element) {
                                                                // Initialization > (Data, Parent Node)
                                                                let data = !0,
                                                                    parentNode = LDKF.get.nodeParentNode(element);

                                                                try {
                                                                    // Deletion
                                                                    parentNode ?
                                                                        LDKF.removeChildNode(parentNode, element) :
                                                                        LDKF.remove$ChildNode(element);
                                                                } catch (error) {
                                                                    // Update > Data
                                                                    data = !1
                                                                }

                                                                // Return
                                                                return data
                                                            }

                                                            // Return
                                                            return !1
                                                        }
                                                    });

                                                    // Set
                                                    LDKF.objectDefineProperty(that, 'set', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Value
                                                        value: function set() {
                                                            // Initialization > (Content, Name)
                                                            let content = arguments.length > 1 ? LDKF.string(arguments[1]) : '',
                                                                name = LDKF.string(arguments[0]);

                                                            // Error
                                                            arguments.length || LDKF.error("'set'", ['argument', 'required'], [1, 2]);

                                                            // Return
                                                            return setContent("meta[name='" + name + "'", content, {name: name})
                                                        }
                                                    });

                                                // Return
                                                return that
                                            }),

                                            // Writable
                                            writable: !1
                                        });

                                        /* Open Graph */
                                        LDKF.objectDefineProperty(app, 'openGraph', {
                                            // Value
                                            value: new (function ApplicationOpenGraph() {
                                                // Initialization > Target
                                                let that = this;

                                                // Modification > Target
                                                    // Audio
                                                    LDKF.objectDefineProperty(that, 'audio', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getAudio() {
                                                            // Return
                                                            return getContent("meta[name='og:audio']")
                                                        },

                                                        // Set
                                                        set: function setAudio() {
                                                            // Return
                                                            return setContent("meta[name='og:audio']", LDKF.string(arguments[0]), {name: 'og:audio'})
                                                        }
                                                    });
                                                        // Album
                                                        LDKF.objectDefineProperty(that, 'audioAlbum', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getAlbum() {
                                                                // Return
                                                                return getContent("meta[name='og:audio:album']")
                                                            },

                                                            // Set
                                                            set: function setAlbum() {
                                                                // Return
                                                                return setContent("meta[name='og:audio:album']", LDKF.string(arguments[0]), {name: 'og:audio:album'})
                                                            }
                                                        });

                                                        // Artist
                                                        LDKF.objectDefineProperty(that, 'audioArtist', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getArtist() {
                                                                // Return
                                                                return getContent("meta[name='og:audio:artist']")
                                                            },

                                                            // Set
                                                            set: function setArtist() {
                                                                // Return
                                                                return setContent("meta[name='og:audio:artist']", LDKF.string(arguments[0]), {name: 'og:audio:artist'})
                                                            }
                                                        });

                                                        // Title
                                                        LDKF.objectDefineProperty(that, 'audioTitle', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getTitle() {
                                                                // Return
                                                                return getContent("meta[name='og:audio:title']")
                                                            },

                                                            // Set
                                                            set: function setTitle() {
                                                                // Return
                                                                return setContent("meta[name='og:audio:title']", LDKF.string(arguments[0]), {name: 'og:audio:title'})
                                                            }
                                                        });

                                                        // Type
                                                        LDKF.objectDefineProperty(that, 'audioType', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getType() {
                                                                // Return
                                                                return getContent("meta[name='og:audio:type']")
                                                            },

                                                            // Set
                                                            set: function setType() {
                                                                // Return
                                                                return setContent("meta[name='og:audio:type']", LDKF.string(arguments[0]), {name: 'og:audio:type'})
                                                            }
                                                        });

                                                    // Country Name
                                                    LDKF.objectDefineProperty(that, 'countryName', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getCountryName() {
                                                            // Return
                                                            return getContent("meta[name='og:country-name']")
                                                        },

                                                        // Set
                                                        set: function setCountryName() {
                                                            // Return
                                                            return setContent("meta[name='og:country-name']", LDKF.string(arguments[0]), {name: 'og:country-name'})
                                                        }
                                                    });

                                                    // Description
                                                    LDKF.objectDefineProperty(that, 'description', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getDescription() {
                                                            // Return
                                                            return getContent("meta[name='og:description']")
                                                        },

                                                        // Set
                                                        set: function setDescription() {
                                                            // Return
                                                            return setContent("meta[name='og:description']", LDKF.string(arguments[0]), {name: 'og:description'})
                                                        }
                                                    });

                                                    // Email
                                                    LDKF.objectDefineProperty(that, 'email', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getEmail() {
                                                            // Return
                                                            return getContent("meta[name='og:email']")
                                                        },

                                                        // Set
                                                        set: function setEmail() {
                                                            // Return
                                                            return setContent("meta[name='og:email']", LDKF.string(arguments[0]), {name: 'og:email'})
                                                        }
                                                    });

                                                    // Fax Number
                                                    LDKF.objectDefineProperty(that, 'faxNumber', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getFaxNumber() {
                                                            // Return
                                                            return getContent("meta[name='og:fax_number']")
                                                        },

                                                        // Set
                                                        set: function setFaxNumber() {
                                                            // Return
                                                            return setContent("meta[name='og:fax_number']", LDKF.string(arguments[0]), {name: 'og:fax_number'})
                                                        }
                                                    });

                                                    // Image
                                                    LDKF.objectDefineProperty(that, 'image', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getImage() {
                                                            // Return
                                                            return getContent("meta[name='og:image']")
                                                        },

                                                        // Set
                                                        set: function setImage() {
                                                            // Return
                                                            return setContent("meta[name='og:image']", LDKF.string(arguments[0]), {name: 'og:image'})
                                                        }
                                                    });

                                                    // Latitude
                                                    LDKF.objectDefineProperty(that, 'latitude', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getLatitude() {
                                                            // Return
                                                            return getContent("meta[name='og:latitude']")
                                                        },

                                                        // Set
                                                        set: function setLatitude() {
                                                            // Return
                                                            return setContent("meta[name='og:latitude']", LDKF.string(arguments[0]), {name: 'og:latitude'})
                                                        }
                                                    });

                                                    // Locality
                                                    LDKF.objectDefineProperty(that, 'locality', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getLocality() {
                                                            // Return
                                                            return getContent("meta[name='og:locality']")
                                                        },

                                                        // Set
                                                        set: function setLocality() {
                                                            // Return
                                                            return setContent("meta[name='og:locality']", LDKF.string(arguments[0]), {name: 'og:locality'})
                                                        }
                                                    });

                                                    // Longitude
                                                    LDKF.objectDefineProperty(that, 'longitude', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getLongitude() {
                                                            // Return
                                                            return getContent("meta[name='og:longitude']")
                                                        },

                                                        // Set
                                                        set: function setLongitude() {
                                                            // Return
                                                            return setContent("meta[name='og:longitude']", LDKF.string(arguments[0]), {name: 'og:longitude'})
                                                        }
                                                    });

                                                    // Page ID
                                                    LDKF.objectDefineProperty(that, 'pageId', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getPageID() {
                                                            // Return
                                                            return getContent("meta[name='fb:page_id']")
                                                        },

                                                        // Set
                                                        set: function setPageID() {
                                                            // Return
                                                            return setContent("meta[name='fb:page_id']", LDKF.string(arguments[0]), {name: 'fb:page_id'})
                                                        }
                                                    });

                                                    // Phone Number
                                                    LDKF.objectDefineProperty(that, 'phoneNumber', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getPhoneNumber() {
                                                            // Return
                                                            return getContent("meta[name='og:phone_number']")
                                                        },

                                                        // Set
                                                        set: function setPhoneNumber() {
                                                            // Return
                                                            return setContent("meta[name='og:phone_number']", LDKF.string(arguments[0]), {name: 'og:phone_number'})
                                                        }
                                                    });

                                                    // Points
                                                    LDKF.objectDefineProperty(that, 'points', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getPoints() {
                                                            // Return
                                                            return getContent("meta[name='og:points']")
                                                        },

                                                        // Set
                                                        set: function setPoints() {
                                                            // Return
                                                            return setContent("meta[name='og:points']", LDKF.string(arguments[0]), {name: 'og:points'})
                                                        }
                                                    });

                                                    // Postal Code
                                                    LDKF.objectDefineProperty(that, 'postalCode', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getPostalCode() {
                                                            // Return
                                                            return getContent("meta[name='og:postal-code']")
                                                        },

                                                        // Set
                                                        set: function setPostalCode() {
                                                            // Return
                                                            return setContent("meta[name='og:postal-code']", LDKF.string(arguments[0]), {name: 'og:postal-code'})
                                                        }
                                                    });

                                                    // Region
                                                    LDKF.objectDefineProperty(that, 'region', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getRegion() {
                                                            // Return
                                                            return getContent("meta[name='og:region']")
                                                        },

                                                        // Set
                                                        set: function setRegion() {
                                                            // Return
                                                            return setContent("meta[name='og:region']", LDKF.string(arguments[0]), {name: 'og:region'})
                                                        }
                                                    });

                                                    // Site Name
                                                    LDKF.objectDefineProperty(that, 'siteName', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getSiteName() {
                                                            // Return
                                                            return getContent("meta[name='og:site_name']")
                                                        },

                                                        // Set
                                                        set: function setSiteName() {
                                                            // Return
                                                            return setContent("meta[name='og:site_name']", LDKF.string(arguments[0]), {name: 'og:site_name'})
                                                        }
                                                    });

                                                    // Street Address
                                                    LDKF.objectDefineProperty(that, 'streetAddress', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getStreetAddress() {
                                                            // Return
                                                            return getContent("meta[name='og:street-address']")
                                                        },

                                                        // Set
                                                        set: function setStreetAddress() {
                                                            // Return
                                                            return setContent("meta[name='og:street-address']", LDKF.string(arguments[0]), {name: 'og:street-address'})
                                                        }
                                                    });

                                                    // Title
                                                    LDKF.objectDefineProperty(that, 'title', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getTitle() {
                                                            // Return
                                                            return getContent("meta[name='og:title']")
                                                        },

                                                        // Set
                                                        set: function setTitle() {
                                                            // Return
                                                            return setContent("meta[name='og:title']", LDKF.string(arguments[0]), {name: 'og:title'})
                                                        }
                                                    });

                                                    // Type
                                                    LDKF.objectDefineProperty(that, 'type', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getType() {
                                                            // Return
                                                            return getContent("meta[name='og:type']")
                                                        },

                                                        // Set
                                                        set: function setType() {
                                                            // Return
                                                            return setContent("meta[name='og:type']", LDKF.string(arguments[0]), {name: 'og:type'})
                                                        }
                                                    });

                                                    // URL
                                                    LDKF.objectDefineProperty(that, 'url', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getURL() {
                                                            // Return
                                                            return getContent("meta[name='og:url']")
                                                        },

                                                        // Set
                                                        set: function setURL() {
                                                            // Return
                                                            return setContent("meta[name='og:url']", LDKF.string(arguments[0]), {name: 'og:url'})
                                                        }
                                                    });

                                                    // Video
                                                    LDKF.objectDefineProperty(that, 'video', {
                                                        // Configurable
                                                        configurable: !0,

                                                        // Get
                                                        get: function getVideo() {
                                                            // Return
                                                            return getContent("meta[name='og:video']")
                                                        },

                                                        // Set
                                                        set: function setVideo() {
                                                            // Return
                                                            return setContent("meta[name='og:video']", LDKF.string(arguments[0]), {name: 'og:video'})
                                                        }
                                                    });
                                                        // Height
                                                        LDKF.objectDefineProperty(that, 'videoHeight', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getVideoHeight() {
                                                                // Return
                                                                return getContent("meta[name='og:video:height']")
                                                            },

                                                            // Set
                                                            set: function setVideoHeight() {
                                                                // Return
                                                                return setContent("meta[name='og:video:height']", LDKF.string(arguments[0]), {name: 'og:video:height'})
                                                            }
                                                        });

                                                        // Type
                                                        LDKF.objectDefineProperty(that, 'videoType', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getVideoType() {
                                                                // Return
                                                                return getContent("meta[name='og:video:type']")
                                                            },

                                                            // Set
                                                            set: function setVideoType() {
                                                                // Return
                                                                return setContent("meta[name='og:video:type']", LDKF.string(arguments[0]), {name: 'og:video:type'})
                                                            }
                                                        });

                                                        // Width
                                                        LDKF.objectDefineProperty(that, 'videoWidth', {
                                                            // Configurable
                                                            configurable: !0,

                                                            // Get
                                                            get: function getVideoWidth() {
                                                                // Return
                                                                return getContent("meta[name='og:video:width']")
                                                            },

                                                            // Set
                                                            set: function setVideoWidth() {
                                                                // Return
                                                                return setContent("meta[name='og:video:width']", LDKF.string(arguments[0]), {name: 'og:video:width'})
                                                            }
                                                        });

                                                // Return
                                                return that
                                            }),

                                            // Writable
                                            writable: !1
                                        });

                                        /* Services */
                                        LDKF.objectDefineProperty(app, 'services', {
                                            // Value
                                            value: new (function ApplicationServices() {
                                                // Initialization > Target
                                                let that = this;

                                                // Modification > Target
                                                    // Apple
                                                    LDKF.objectDefineProperty(that, 'apple', {
                                                        // Configurable
                                                        configurable: !1,

                                                        // Value
                                                        value: new (function Object() {
                                                            // Initialization > Target
                                                            let that = this;

                                                            // Modification > Target
                                                                // Format Detection
                                                                LDKF.objectDefineProperty(that, 'formatDetection', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getFormatDetection() {
                                                                        // Return
                                                                        return getContent('meta[name=format-detection')
                                                                    },

                                                                    // Set
                                                                    set: function setFormatDetection() {
                                                                        // Return
                                                                        return setContent('meta[name=format-detection', LDKF.string(arguments[0]), {name: 'format-detection'})
                                                                    }
                                                                });

                                                                // Mobile Web App Capable
                                                                LDKF.objectDefineProperty(that, 'mobileWebAppCapable', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMobileWebAppCapable() {
                                                                        // Return
                                                                        return getContent('meta[name=apple-mobile-web-app-capable')
                                                                    },

                                                                    // Set
                                                                    set: function setMobileWebAppCapable() {
                                                                        // Return
                                                                        return setContent('meta[name=apple-mobile-web-app-capable', LDKF.string(arguments[0]), {name: 'apple-mobile-web-app-capable'})
                                                                    }
                                                                });

                                                                /* Mobile Web App Status Bar Style
                                                                        --- NOTE ---
                                                                            #Lapys: Believe it or not, this is just asking for a color.
                                                                */
                                                                LDKF.objectDefineProperty(that, 'mobileWebAppStatusBarStyle', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMobileWebAppStatusBarStyle() {
                                                                        // Return
                                                                        return getContent('meta[name=apple-mobile-web-app-status-bar-style')
                                                                    },

                                                                    // Set
                                                                    set: function setMobileWebAppStatusBarStyle() {
                                                                        // Return
                                                                        return setContent('meta[name=apple-mobile-web-app-status-bar-style', LDKF.string(arguments[0]), {name: 'apple-mobile-web-app-status-bar-style'})
                                                                    }
                                                                });

                                                                // Touch Fullscreen
                                                                LDKF.objectDefineProperty(that, 'touchFullScreen', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getTouchFullscreen() {
                                                                        // Return
                                                                        return getContent('meta[name=apple-touch-fullscreen')
                                                                    },

                                                                    // Set
                                                                    set: function setTouchFullscreen() {
                                                                        // Return
                                                                        return setContent('meta[name=apple-touch-fullscreen', LDKF.string(arguments[0]), {name: 'apple-touch-fullscreen'})
                                                                    }
                                                                });

                                                                // Viewport
                                                                LDKF.objectDefineProperty(that, 'viewport', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getViewport() {
                                                                        // Return
                                                                        return getContent('meta[name=viewport')
                                                                    },

                                                                    // Set
                                                                    set: function setViewport() {
                                                                        // Return
                                                                        return setContent('meta[name=viewport', LDKF.string(arguments[0]), {name: 'viewport'})
                                                                    }
                                                                });

                                                            // Return
                                                            return that
                                                        }),

                                                        // Writable
                                                        writable: !1
                                                    });

                                                    // Blog Catalog
                                                    LDKF.objectDefineProperty(that, 'blogCatalog', {
                                                        // Configurable
                                                        configurable: !1,

                                                        // Value
                                                        value: new (function Object() {
                                                            // Initialization > Target
                                                            let that = this;

                                                            // Modification > Target
                                                                // Blog Catalog
                                                                LDKF.objectDefineProperty(that, 'blogCatalog', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getTitle() {
                                                                        // Return
                                                                        return !!LDKF.querySelectorDocument('meta[name=blog-catalog')
                                                                    },

                                                                    // Set
                                                                    set: function setTitle() {
                                                                        // Return
                                                                        return setContent('meta[name=blog-catalog', null, {name: 'blog-catalog'})
                                                                    }
                                                                });

                                                            // Return
                                                            return that
                                                        }),

                                                        // Writable
                                                        writable: !1
                                                    });

                                                    // Claim ID
                                                    LDKF.objectDefineProperty(that, 'claimID', {
                                                        // Configurable
                                                        configurable: !1,

                                                        // Value
                                                        value: new (function Object() {
                                                            // Initialization > Target
                                                            let that = this;

                                                            // Modification > Target
                                                                // Micro ID
                                                                LDKF.objectDefineProperty(that, 'microID', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicroId() {
                                                                        // Return
                                                                        return getContent('meta[name=microid')
                                                                    },

                                                                    // Set
                                                                    set: function setMicroId() {
                                                                        // Return
                                                                        return setContent('meta[name=microid', LDKF.string(arguments[0]), {name: 'microid'})
                                                                    }
                                                                });

                                                            // Return
                                                            return that
                                                        }),

                                                        // Writable
                                                        writable: !1
                                                    });

                                                    // Internet Explorer
                                                    LDKF.objectDefineProperty(that, 'internetExplorer', {
                                                        // Configurable
                                                        configurable: !1,

                                                        // Value
                                                        value: new (function Object() {
                                                            // Initialization > Target
                                                            let that = this;

                                                            // Modification > Target
                                                                // Application Name
                                                                LDKF.objectDefineProperty(that, 'appName', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getApplicationName() {
                                                                        // Return
                                                                        return getContent('meta[name=application-name')
                                                                    },

                                                                    // Set
                                                                    set: function setApplicationName() {
                                                                        // Return
                                                                        return setContent('meta[name=application-name', LDKF.string(arguments[0]), {name: 'application-name'})
                                                                    }
                                                                });

                                                                // Microsoft Application Navigation Button Color
                                                                LDKF.objectDefineProperty(that, 'msAppNavButtonColor', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicrosoftApplicationWindow() {
                                                                        // Return
                                                                        return getContent('meta[name=msapplication-navbutton-color')
                                                                    },

                                                                    // Set
                                                                    set: function setMicrosoftApplicationWindow() {
                                                                        // Return
                                                                        return setContent('meta[name=msapplication-navbutton-color', LDKF.string(arguments[0]), {name: 'msapplication-navbutton-color'})
                                                                    }
                                                                });

                                                                // Microsoft Application Start URL
                                                                LDKF.objectDefineProperty(that, 'msAppStartURL', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicrosoftApplicationStartURL() {
                                                                        // Return
                                                                        return getContent('meta[name=msapplication-starturl')
                                                                    },

                                                                    // Set
                                                                    set: function setMicrosoftApplicationStartURL() {
                                                                        // Return
                                                                        return setContent('meta[name=msapplication-starturl', LDKF.string(arguments[0]), {name: 'msapplication-starturl'})
                                                                    }
                                                                });

                                                                // Microsoft Application Task
                                                                LDKF.objectDefineProperty(that, 'msAppTask', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicrosoftApplicationTask() {
                                                                        // Return
                                                                        return getContent('meta[name=msapplication-task')
                                                                    },

                                                                    // Set
                                                                    set: function setMicrosoftApplicationTask() {
                                                                        // Return
                                                                        return setContent('meta[name=msapplication-task', LDKF.string(arguments[0]), {name: 'msapplication-task'})
                                                                    }
                                                                });

                                                                // Microsoft Application Tooltip
                                                                LDKF.objectDefineProperty(that, 'msAppTooltip', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicrosoftApplicationTooltip() {
                                                                        // Return
                                                                        return getContent('meta[name=msapplication-tooltip')
                                                                    },

                                                                    // Set
                                                                    set: function setMicrosoftApplicationTooltip() {
                                                                        // Return
                                                                        return setContent('meta[name=msapplication-tooltip', LDKF.string(arguments[0]), {name: 'msapplication-tooltip'})
                                                                    }
                                                                });

                                                                // Microsoft Application Window
                                                                LDKF.objectDefineProperty(that, 'msAppWindow', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicrosoftApplicationWindow() {
                                                                        // Return
                                                                        return getContent('meta[name=msapplication-window')
                                                                    },

                                                                    // Set
                                                                    set: function setMicrosoftApplicationWindow() {
                                                                        // Return
                                                                        return setContent('meta[name=msapplication-window', LDKF.string(arguments[0]), {name: 'msapplication-window'})
                                                                    }
                                                                });

                                                                // Microsoft Smart Tags Prevent Parsing
                                                                LDKF.objectDefineProperty(that, 'msSmartTagsPreventParsing', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getMicrosoftSmartTagsPreventParsing() {
                                                                        // Return
                                                                        return getContent('meta[name=mssmarttagspreventparsing')
                                                                    },

                                                                    // Set
                                                                    set: function setMicrosoftSmartTagsPreventParsing() {
                                                                        // Return
                                                                        return setContent('meta[name=mssmarttagspreventparsing', LDKF.string(arguments[0]), {name: 'mssmarttagspreventparsing'})
                                                                    }
                                                                });

                                                                // Page Enter
                                                                LDKF.objectDefineProperty(that, 'pageEnter', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getPageEnter() {
                                                                        // Return
                                                                        return getContent('meta[http-equiv=Page-Enter')
                                                                    },

                                                                    // Set
                                                                    set: function setPageEnter() {
                                                                        // Return
                                                                        return setContent('meta[http-equiv=Page-Enter', LDKF.string(arguments[0]), {httpEquiv: 'Page-Enter'})
                                                                    }
                                                                });

                                                                // Page Exit
                                                                LDKF.objectDefineProperty(that, 'pageExit', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getPageExit() {
                                                                        // Return
                                                                        return getContent('meta[http-equiv=Page-Exit')
                                                                    },

                                                                    // Set
                                                                    set: function setPageExit() {
                                                                        // Return
                                                                        return setContent('meta[http-equiv=Page-Exit', LDKF.string(arguments[0]), {httpEquiv: 'Page-Exit'})
                                                                    }
                                                                });

                                                                // X-UA Compatible
                                                                LDKF.objectDefineProperty(that, 'xUA_Compatible', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getXUACompatible() {
                                                                        // Return
                                                                        return getContent('meta[http-equiv=X-UA-Compatible')
                                                                    },

                                                                    // Set
                                                                    set: function setXUACompatible() {
                                                                        // Return
                                                                        return setContent('meta[http-equiv=X-UA-Compatible', LDKF.string(arguments[0]), {httpEquiv: 'X-UA-Compatible'})
                                                                    }
                                                                });

                                                            // Return
                                                            return that
                                                        }),

                                                        // Writable
                                                        writable: !1
                                                    });

                                                    // Rails
                                                    LDKF.objectDefineProperty(that, 'rails', {
                                                        // Configurable
                                                        configurable: !1,

                                                        // Value
                                                        value: new (function Object() {
                                                            // Initialization > Target
                                                            let that = this;

                                                            // Modification > Target
                                                                // CSRF Parameter
                                                                LDKF.objectDefineProperty(that, 'csrfParam', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getCSRFParameter() {
                                                                        // Return
                                                                        return getContent('meta[name=csrf-parameter')
                                                                    },

                                                                    // Set
                                                                    set: function setCSRFParameter() {
                                                                        // Return
                                                                        return setContent('meta[name=csrf-parameter', LDKF.string(arguments[0]), {name: 'csrf-parameter'})
                                                                    }
                                                                });

                                                                // CSRF Token
                                                                LDKF.objectDefineProperty(that, 'csrfToken', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getCSRFToken() {
                                                                        // Return
                                                                        return getContent('meta[name=csrf-token')
                                                                    },

                                                                    // Set
                                                                    set: function setCSRFToken() {
                                                                        // Return
                                                                        return setContent('meta[name=csrf-token', LDKF.string(arguments[0]), {name: 'csrf-token'})
                                                                    }
                                                                });

                                                            // Return
                                                            return that
                                                        }),

                                                        // Writable
                                                        writable: !1
                                                    });

                                                    // Tweet Meme
                                                    LDKF.objectDefineProperty(that, 'tweetMeme', {
                                                        // Configurable
                                                        configurable: !1,

                                                        // Value
                                                        value: new (function Object() {
                                                            // Initialization > Target
                                                            let that = this;

                                                            // Modification > Target
                                                                // Title
                                                                LDKF.objectDefineProperty(that, 'title', {
                                                                    // Configurable
                                                                    configurable: !0,

                                                                    // Get
                                                                    get: function getTitle() {
                                                                        // Return
                                                                        return getContent('meta[name=tweetmeme-title')
                                                                    },

                                                                    // Set
                                                                    set: function setTitle() {
                                                                        // Return
                                                                        return setContent('meta[name=tweetmeme-title', LDKF.string(arguments[0]), {name: 'tweetmeme-title'})
                                                                    }
                                                                });

                                                            // Return
                                                            return that
                                                        }),

                                                        // Writable
                                                        writable: !1
                                                    });

                                                // Return
                                                return that
                                            }),

                                            // Writable
                                            writable: !1
                                        });

                                        // Utilities
                                        LDKF.objectDefineProperty(app, 'utilities', {
                                            // Configurable
                                            configurable: !1,

                                            // Value
                                            value: LDKF.customObject('ApplicationUtilities'),

                                            // Writable
                                            writable: !1
                                        });

                                    // Return
                                    return app
                                })(),

                                // Writable
                                writable: !0
                            });

                            // Array
                            LDKF.objectDefineProperty(window, 'array', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function Array() {
                                    // Return
                                    return LDKF.toArray.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // Boolean
                            LDKF.objectDefineProperty(window, 'bool', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function Boolean() {
                                    // Initialization > (Arguments, Length, Iterator, (False, Truth)  Count)
                                    let args = LDKF.toArray(arguments),
                                        length = args.length,
                                        iterator = 0,
                                        falseCount = iterator,
                                        truthCount = falseCount;

                                    /* Loop
                                            Index Arguments.

                                        > Update > (False | Truth) Count
                                    */
                                    for (iterator; iterator < length; iterator += 1)
                                        args[iterator] ? truthCount += 1 : falseCount += 1;

                                    // Return
                                    return truthCount > falseCount
                                },

                                // Writable
                                writable: !0
                            });

                            // Browser
                            LDKF.objectDefineProperty(window, 'browser', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: (function() {
                                    // Initialization > Browser
                                    let $browser = LDKO.browser,
                                        browser = LDKF.customObject('Browser', $browser, {valueOf: function valueOf() { return $browser.valueOf() }});

                                    // Return
                                    return browser
                                })()
                            });

                            // Cancel On DOM Element Added
                            LDKF.objectDefineProperty(window, 'cancelOnDOMElementAdded', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: tmpObject.windowOnDOMElementAddedDescriptionValue = function cancelOnDOMElementAdded() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMElementAddedWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM Element Added Watch List
                                                LDKF.spliceArray(tmpObject.onDOMElementAddedWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cancel On DOM Element Count Change
                            LDKF.objectDefineProperty(window, 'cancelOnDOMElementCountChange', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function cancelOnDOMElementCountChange() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMElementCountChangeWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM Element Count Change Watch List
                                                LDKF.spliceArray(tmpObject.onDOMElementCountChangeWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cancel On DOM Element Removed
                            LDKF.objectDefineProperty(window, 'cancelOnDOMElementRemoved', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function cancelOnDOMElementRemoved() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMElementRemovedWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM Element Removed Watch List
                                                LDKF.spliceArray(tmpObject.onDOMElementRemovedWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cancel On DOM HTML Change
                            LDKF.objectDefineProperty(window, 'cancelOnDOMHTMLChange', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function cancelOnDOMHTMLChange() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMHTMLChangeWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM HTML Change Watch List
                                                LDKF.spliceArray(tmpObject.onDOMHTMLChangeWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cancel On DOM Node Added
                            LDKF.objectDefineProperty(window, 'cancelOnDOMNodeAdded', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function cancelOnDOMNodeAdded() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMNodeAddedWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM Node Added Watch List
                                                LDKF.spliceArray(tmpObject.onDOMNodeAddedWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cancel On DOM Node Count Change
                            LDKF.objectDefineProperty(window, 'cancelOnDOMNodeCountChange', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function cancelOnDOMNodeCountChange() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMNodeCountChangeWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM Node Count Change Watch List
                                                LDKF.spliceArray(tmpObject.onDOMNodeCountChangeWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cancel On DOM Node Removed
                            LDKF.objectDefineProperty(window, 'cancelOnDOMNodeRemoved', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function cancelOnDOMNodeRemoved() {
                                    // Initialization > (Array, Callback, Iterator)
                                    let array = tmpObject.onDOMNodeRemovedWatchList,
                                        callback = arguments[0],
                                        iterator = array.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length && iterator)
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Array Element
                                            let arrayElement = array[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            ) {
                                                // Update > Temporary Object > On DOM Node Removed Watch List
                                                LDKF.spliceArray(tmpObject.onDOMNodeRemovedWatchList, iterator, 1);

                                                // Break
                                                break
                                            }
                                        }

                                    else
                                        // Update > Array
                                        iterator && LDKF.spliceArray(array, 0, iterator)
                                }
                            });

                            // Cube Root
                            LDKF.objectDefineProperty(window, 'cbrt', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKF.cbrt,

                                // Writable
                                writable: !0
                            });

                            /* Chain
                                    --- NOTE ---
                                        #Lapys: Run functions in sequence.
                            */
                            LDKF.objectDefineProperty(window, 'chain', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function chain() {
                                    // Initialization > (Arguments, Iterator, Length)
                                    let args = LDKF.toArray(arguments),
                                        iterator = 0,
                                        length = args.length;

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length) {
                                        /* Loop
                                                Index Arguments.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Argument
                                            let arg = args[iterator];

                                            // Update > Arguments
                                            LDKF.isEvaluationString(arg) && (args[iterator] = LDKF.$func(arg));

                                            // Error
                                            LDKF.isFunction(arg) || LDKF.error("'chain'", 'argument', LDKF.debugMessage(value, ['must', 'a'], ['evaluation string', 'function']))
                                        }

                                        // Update > Length
                                        (length % 2) && (length = LDKF.pushArray(args, function() {}));
                                        length -= 1;

                                        // Initialization > (Click Event Attacher, Current Return Value, Element, Execution Iteration Count, Initial Lapse, Previous Lapse, Promises)
                                        let clickEventAttacher = LDKF.set.htmlElementOnclick,
                                            currentReturnValue,
                                            element = LDKC.element,
                                            executionIterationCount = 0,
                                            initialLapse = now(),
                                            previousLapse = 0,
                                            promises = LDKF.isNativeFunction(window.Promise);

                                        // Function
                                            // Now
                                            function now() {
                                                return LDKF.performanceNow()
                                            }

                                            // Set Click Event
                                            function setClickEvent() {
                                                // Return
                                                return clickEventAttacher(arguments[0], arguments[1])
                                            }

                                            // Update Lapse
                                            function updateLapse() {
                                                // Return
                                                return now() - initialLapse
                                            }

                                            // Execute
                                            (promises ?
                                                function execute() {
                                                    // Initialization > Callback (A, B)
                                                    let callbackA = arguments[0],
                                                        callbackB = arguments[1];

                                                    // Update > Previous Lapse
                                                    previousLapse = updateLapse() - previousLapse;

                                                    // Promise
                                                    LDKF.thenPromise(new LDKO.promise(function(resolve, reject) {
                                                        // Callback A
                                                        callbackA(executionIterationCount ? previousLapse : 0);

                                                        // Resolve
                                                        resolve(null);

                                                        // Reject
                                                        reject(null)
                                                    }), function() {
                                                        // Promise
                                                        LDKF.thenPromise(new LDKO.promise(function(resolve, reject) {
                                                            // Update > Current Return Value
                                                            currentReturnValue = callbackB(updateLapse() - previousLapse);

                                                            // Resolve
                                                            resolve(null);

                                                            // Reject
                                                            reject(null)
                                                        }), function() {
                                                            // Update > Execution Iteration Count
                                                            executionIterationCount += 1;

                                                            /* Logic
                                                                    [if statement]
                                                            */
                                                            if (iterator != length) {
                                                                // Update > Iterator
                                                                iterator += 1;

                                                                // Execute
                                                                execute(args[iterator], args[iterator += 1])
                                                            }
                                                        })
                                                    })
                                                } :
                                                function execute() {
                                                    // Initialization > Callback (A, B)
                                                    let callbackA = arguments[0],
                                                        callbackB = arguments[1];

                                                    // Initialization > (Called, Repeated, Request)
                                                    let called = !1,
                                                        repeated = !1,
                                                        request;

                                                    // Update > Previous Lapse
                                                    previousLapse = updateLapse() - previousLapse;

                                                    // Callback A
                                                    callbackA(executionIterationCount ? previousLapse : 0);

                                                    // Function
                                                        // Call
                                                        function call() {
                                                            // Update > (Called, Current Return Value)
                                                            called = !0;
                                                            currentReturnValue = callbackB(updateLapse() - previousLapse);

                                                            // Set Click Event
                                                            setClickEvent(element, repeat);

                                                            // Function > Repeat Click
                                                            function repeatClick() {
                                                                /* Logic
                                                                        [if:else statement]
                                                                */
                                                                if (repeated)
                                                                    // Cancel Animation Frame > Request
                                                                    LDKF.cancelAnimationFrame(request);

                                                                else {
                                                                    // LapysJS Development Kit Functions > Click > Element
                                                                    LDKF.clickHtmlElement(element);

                                                                    // Update > Request
                                                                    request = LDKF.requestAnimationFrame(repeatClick)
                                                                }
                                                            }

                                                            // Repeat Click
                                                            repeatClick()
                                                        }

                                                        // Click
                                                        function callClick() {
                                                            /* Logic
                                                                    [if:else statement]
                                                            */
                                                            if (called)
                                                                // Cancel Animation Frame > Request
                                                                LDKF.cancelAnimationFrame(request);

                                                            else {
                                                                // LapysJS Development Kit Functions > Click > Element
                                                                LDKF.clickHtmlElement(element);

                                                                // Update > Request
                                                                request = LDKF.requestAnimationFrame(callClick)
                                                            }
                                                        }

                                                        // Function > Repeat
                                                        function repeat() {
                                                            // Update > (Repeated, Execution Iteration Count)
                                                            repeated = !0;
                                                            executionIterationCount += 1;

                                                            /* Logic
                                                                    [if:else statement]
                                                            */
                                                            if (iterator == length)
                                                                // Set Click Event
                                                                setClickEvent(element, null);

                                                            else {
                                                                // Update > Iterator
                                                                iterator += 1;

                                                                // Execute
                                                                execute(args[iterator], args[iterator += 1])
                                                            }
                                                        }

                                                    // (Set Click Event, Call Click)
                                                    setClickEvent(element, call);
                                                    callClick()
                                                }
                                            )(args[iterator = 0], args[iterator += 1]);

                                        // Return
                                        return currentReturnValue
                                    }
                                },

                                // Writable
                                writable: !0
                            });

                            // Check
                            LDKF.objectDefineProperty(window, 'check', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function check() {
                                    // Initialization > (Condition, Fail, Success, Length, Request)
                                    let condition = arguments[0],
                                        fail = arguments[2] || null, failIsFunction,
                                        success = arguments[1] || null, successIsFunction,
                                        length = arguments.length,
                                        request;

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length) {
                                        // Update > (Condition, Fail, Success)
                                        LDKF.isEvaluationString(condition) && (condition = LDKF.$func(condition));
                                        LDKF.isEvaluationString(fail) && (fail = LDKF.$func(fail));
                                        LDKF.isEvaluationString(success) && (success = LDKF.$func(success));

                                        // Error
                                        (failIsFunction = LDKF.isFunction(fail)) || LDKF.isNull(fail) || LDKF.error("'check'", 'argument', LDKF.debugMessage("The 'fail' parameter", ['must', 'a'], ['function', 'null']));
                                        (successIsFunction = LDKF.isFunction(success)) || LDKF.isNull(success) || LDKF.error("'check'", 'argument', LDKF.debugMessage("The 'success' parameter", ['must', 'a'], ['function', 'null']));

                                        /* Logic
                                                [if statement]
                                        */
                                        if (failIsFunction || length == 2) {
                                            // Function
                                                // Test
                                                function test() {
                                                    // Return
                                                    return !!(LDKF.isFunction(condition) ? condition() : condition)
                                                }

                                                // Check
                                                (function check() {
                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (test()) {
                                                        // Success
                                                        successIsFunction && success();

                                                        // Cancel Animation Frame > Request
                                                        LDKF.cancelAnimationFrame(request)
                                                    }

                                                    else {
                                                        // Fail
                                                        failIsFunction && fail();

                                                        // Update > Request
                                                        request = LDKF.requestAnimationFrame(check)
                                                    }
                                                })()
                                        }
                                    }
                                },

                                // Writable
                                writable: !0
                            });

                            // Clear
                            LDKF.objectDefineProperty(window, 'clear', tmpObject.windowClearDescription = {
                                // Configurable
                                configurable: !0,

                                // Get
                                get: function clear() { LDKF.consoleClear(); return clear },

                                // Set
                                set: function setClear() { return LDKF.objectDefineProperty(window, 'clear', {configurable: !0, enumerable: !0, value: arguments[0], writable: !0}) }
                            });

                            // Copy
                            LDKF.objectDefineProperty(window, 'copy', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function copy() {
                                    // Initialization > (Command, Data, Input, Text)
                                    let command = 'copy',
                                        data = arguments[0],
                                        input = LDKF.createElementDocument('textarea'),
                                        text = '';

                                    // Logic
                                    if (arguments.length) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.queryCommandEnabledDocument(command) || LDKF.queryCommandSupportedDocument(command)) {
                                            /* Logic
                                                    [if:else if:else statement]

                                                > Update > Text
                                            */
                                            if (LDKF.isInputElement(data))
                                                text = LDKF.isHtmlInputElement(data) ? LDKF.get.htmlInputElementValue(data) : LDKF.get.htmlTextareaElementValue(data)

                                            else if (LDKF.isHtmlElement(data))
                                                text = LDKF.get.htmlElementInnerText(data);

                                            else
                                                text = LDKF.string(data);

                                            // Initialization > Input Style
                                            let inputStyle = LDKF.get.htmlElementStyle(input);

                                            // Modification
                                                // Input Style
                                                    // Pointer Events
                                                    inputStyle.pointerEvents = 'none';

                                                    // Position
                                                    inputStyle.position = 'fixed';

                                                    // Opacity
                                                    inputStyle.opacity = 0;

                                                // Input
                                                    // Text Content
                                                    LDKF.set.nodeTextContent(input, text);

                                                    // Value
                                                    LDKF.set.htmlTextareaElementValue(input, text);

                                            // Initialization > Parent
                                            let parent = LDKF.get.documentBody();

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (parent)
                                                LDKF.appendChildNode(parent, input);

                                            else {
                                                // Update > Parent
                                                parent = LDKF.get.documentHead();

                                                /* Loop
                                                        [if:else statement]
                                                */
                                                if (parent)
                                                    // Insertion
                                                    LDKF.appendChildNode(parent, input);

                                                else {
                                                    // Initialization > Children
                                                    let children = LDKF.get.documentChildren(LDKO.$document);

                                                    // Insertion
                                                    LDKF.get.htmlCollectionLength(children) && LDKF.appendChildNode(children[0], input)
                                                }
                                            }

                                            // LapysJS Development Kit Functions > Focus > Input
                                            LDKF.focusHtmlElement(input);

                                            // Initialization > (Selection, Range)
                                            let selection = LDKF.getSelectionDocument(),
                                                range = LDKF.createRangeDocument();

                                            // Range > Select Node Contents > Input
                                            LDKF.selectNodeContentsRange(range, input);

                                            // Selection
                                                // Remove All Ranges
                                                LDKF.removeAllRangesSelection(selection);

                                                // Add Range > Range
                                                LDKF.addRangeSelection(selection, range);

                                            // LapysJS Development Kit Functions
                                                // (...)
                                                LDKF.cloneContentsRange(LDKF.getRangeAtSelection(selection, 0));

                                                // Select > Input
                                                LDKF.selectHtmlTextareaElement(input);

                                                // Execute Command > [Command]
                                                LDKF.execCommandDocument(LDKO.$document, command);

                                                // Blur > Input
                                                LDKF.blurHtmlElement(input);

                                            // Set Timeout
                                            LDKF.setTimeout(function() {
                                                // Selection > Remove All Ranges
                                                LDKF.removeAllRangesSelection(selection);

                                                // Deletion
                                                LDKF.remove$ChildNode(input)
                                            });

                                            // Return
                                            return LDKF.get.htmlTextareaElementValue(input)
                                        }

                                        // Warn
                                        LDKF.warn("'" + command + "'", 'argument', "Query command '" + command + "' not supported in this browser")
                                    }
                                },

                                // Writable
                                writable: !0
                            });

                            // Create Document Fragment
                            LDKF.objectDefineProperty(window, 'createDocumentFragment', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function createDocumentFragment() {
                                    // Initialization > Fragment
                                    let fragment = LDKF.createDocumentFragmentDocument();

                                    // LapysJS Development Kit Functions > Iterate Array
                                    LDKF.iterateArray(function(key, value) {
                                        // Insertion
                                        LDKF.isNode(value) ?
                                            LDKF.appendChildNode(fragment, value) :
                                            LDKF.appendChildNode(fragment, new LDKF.text(LDKF.string(value)))
                                    }, LDKF.toArray(arguments));

                                    // Return
                                    return fragment
                                },

                                // Writable
                                writable: !0
                            });

                            // Create Element
                            LDKF.objectDefineProperty(window, 'createElement', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: LDKF.createElement,

                                // Writable
                                writable: !0
                            });

                            // Cut
                            LDKF.objectDefineProperty(window, 'cut', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function cut() {
                                    // Initialization > (Command, Data, Input, Text)
                                    let command = 'cut',
                                        data = arguments[0],
                                        input = LDKF.createElementDocument('textarea'),
                                        text = '';

                                    // Logic
                                    if (arguments.length) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.queryCommandEnabledDocument(command) || LDKF.queryCommandSupportedDocument(command)) {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.isHtmlElement(data)) {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (LDKF.isInputElement(data)) {
                                                    // Initialization > Is HTML Input Element
                                                    let isHtmlInputElement = LDKF.isHtmlInputElement(data);

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (isHtmlInputElement) {
                                                        // Update > Text
                                                        text = LDKF.get.htmlInputElementValue(data);

                                                        // Modification > Data > Value
                                                        LDKF.set.htmlInputElementValue(data, '')
                                                    }

                                                    else {
                                                        // Update > Text
                                                        text = LDKF.get.htmlTextareaElementValue(data);

                                                        // Modification > Data > Value
                                                        LDKF.set.htmlTextareaElementValue(data, '')
                                                    }
                                                }

                                                else {
                                                    // Update > Text
                                                    text = LDKF.get.htmlElementInnerText(data);

                                                    // Modification > Data > Inner Text
                                                    LDKF.set.htmlElementInnerText(data, '')
                                                }
                                            }

                                            else
                                                // Update > Text
                                                text = LDKF.string(data);

                                            // Initialization > Input Style
                                            let inputStyle = LDKF.get.htmlElementStyle(input);

                                            // Modification
                                                // Input Style
                                                    // Pointer Events
                                                    inputStyle.pointerEvents = 'none';

                                                    // Position
                                                    inputStyle.position = 'fixed';

                                                    // Opacity
                                                    inputStyle.opacity = 0;

                                                // Input
                                                    // Text Content
                                                    LDKF.set.nodeTextContent(input, text);

                                                    // Value
                                                    LDKF.set.htmlTextareaElementValue(input, text);

                                            // Initialization > Parent
                                            let parent = LDKF.get.documentBody();

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (parent)
                                                LDKF.appendChildNode(parent, input);

                                            else {
                                                // Update > Parent
                                                parent = LDKF.get.documentHead();

                                                /* Loop
                                                        [if:else statement]
                                                */
                                                if (parent)
                                                    // Insertion
                                                    LDKF.appendChildNode(parent, input);

                                                else {
                                                    // Initialization > Children
                                                    let children = LDKF.get.documentChildren(LDKO.$document);

                                                    // Insertion
                                                    LDKF.get.htmlCollectionLength(children) && LDKF.appendChildNode(children[0], input)
                                                }
                                            }

                                            // LapysJS Development Kit Functions > (Focus, Select) > Input
                                            LDKF.focusHtmlElement(input);

                                            // Initialization > (Selection, Range)
                                            let selection = LDKF.getSelectionDocument(),
                                                range = LDKF.createRangeDocument();

                                            // Range > Select Node Contents > Input
                                            LDKF.selectNodeContentsRange(range, input);

                                            // Selection
                                                // Remove All Ranges
                                                LDKF.removeAllRangesSelection(selection);

                                                // Add Range > Range
                                                LDKF.addRangeSelection(selection, range);

                                            // LapysJS Development Kit Functions
                                                // (...)
                                                LDKF.cloneContentsRange(LDKF.getRangeAtSelection(selection, 0));

                                                // Select > Input
                                                LDKF.selectHtmlTextareaElement(input);

                                            // Initialization > Return Value
                                            let returnValue = LDKF.get.htmlTextareaElementValue(input);

                                            // LapysJS Development Kit Functions
                                                // Execute Command > [Command]
                                                LDKF.execCommandDocument(LDKO.$document, command);

                                                // Blur > Input
                                                LDKF.blurHtmlElement(input);

                                            // Set Timeout
                                            LDKF.setTimeout(function() {
                                                // Selection > Remove All Ranges
                                                LDKF.removeAllRangesSelection(selection);

                                                // Deletion
                                                LDKF.remove$ChildNode(input)
                                            });

                                            // Return
                                            return returnValue
                                        }

                                        // Warn
                                        LDKF.warn("'" + command + "'", 'argument', "Query command '" + command + "' not supported in this browser")
                                    }

                                    else
                                        // Error
                                        LDKF.error("'cut'", 'argument', [1, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            /* End
                                    --- UPDATE REQUIRED ---
                                        #Lapys:
                                            - Stop the calling script from executing.
                                            - It's function could also change depending on the current stack frame.
                            */
                            LDKF.objectDefineProperty(window, 'end', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function end() {},

                                // Writable
                                writable: !0
                            });

                            // Execute
                            LDKF.objectDefineProperty(window, 'exec', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKF.isExecutable,

                                // Writable
                                writable: !0
                            });

                            // File
                            LDKF.objectDefineProperty(window, 'file', {
                                // Configurable
                                configurable: !0,

                                // Get
                                get: function File() {
                                    // Initialization > (Constructor, File)
                                    let constructor = LDKO.file,
                                        file = LDKF.cloneObject(constructor);

                                    // Modification > File
                                        /* Create
                                                --- UPDATE REQUIRED ---
                                                    #Lapys: Create a new file object.
                                        */
                                        LDKF.objectDefineProperty(file, 'create', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function create() {}
                                        });

                                        // Download
                                        LDKF.objectDefineProperty(file, 'download', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function download() {
                                                // Initialization > (Character Set, Data, Length, Name, Type)
                                                let charset = 'utf-8',
                                                    data = '',
                                                    length = arguments.length,
                                                    name = '',
                                                    type = 'text/plain';

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length) {
                                                    // Update > (Data, Name)
                                                    data = length > 1 ? LDKF.string(arguments[1]) : '';
                                                    name = LDKF.string(arguments[0]);

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (length > 2)
                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (LDKF.isObject(arguments[2])) {
                                                            // Initialization > Properties
                                                            let properties = arguments[2];

                                                            // Update > (Character Set, Type)
                                                            ('charset' in properties) && (charset = LDKF.string(properties.charset));
                                                            ('type' in properties) && (type = LDKF.string(properties.type))
                                                        }

                                                        else
                                                            // Error
                                                            LDKF.error("'download'", 'argument', 'Third argument given must be an object');

                                                    // Initialization > Element
                                                    let element = LDKF.createElementDocument('a');

                                                    // Modification > Element > (Hyperlink Reference, Download)
                                                    LDKF.set.htmlAnchorElementHref(element, 'data:' + type + ';charset=' + charset + ',' + LDKF.encodeURIComponent(data));
                                                    LDKF.set.htmlAnchorElementDownload(element, name);

                                                    // LapysJS Development Kit Functions > Click > Element
                                                    LDKF.clickHtmlElement(element);

                                                    // Return
                                                    return null
                                                }

                                                // Error
                                                LDKF.error("'download'", 'argument', [1, 0])
                                            }
                                        });

                                        /* Open
                                                --- UPDATE REQUIRED ---
                                                    #Lapys: (Request to) open a file from the local machine.
                                        */
                                        LDKF.objectDefineProperty(file, 'open', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function open() {}
                                        });

                                        // Read
                                        LDKF.objectDefineProperty(file, 'read', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function read() {
                                                // Initialization > Arguments
                                                let args = LDKF.toArray(arguments);

                                                // Update > Arguments
                                                LDKF.spliceArray(args, 0, 0, 'GET');

                                                // Return
                                                return LDKF.requestFile.apply(LDKF, args)
                                            }
                                        });

                                        /* Remove
                                                --- UPDATE REQUIRED ---
                                                    #Lapys: (Request to) delete a file from the local machine.
                                        */
                                        LDKF.objectDefineProperty(file, 'remove', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function remove() {}
                                        });

                                        // Value Of
                                        LDKF.objectDefineProperty(file, 'valueOf', {
                                            // Value
                                            value: function valueOf() {
                                                // Return
                                                return constructor
                                            }
                                        });

                                        /* Write
                                                --- UPDATE REQUIRED ---
                                                    #Lapys: (Request to) edit a file from the local machine.
                                        */
                                        LDKF.objectDefineProperty(file, 'write', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function write() {}
                                        });

                                    // Return
                                    return file
                                }
                            });

                            // Float
                            LDKF.objectDefineProperty(window, 'float', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function float() {
                                    // Return
                                    return LDKF.numberParseFloat.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // Font
                            LDKF.objectDefineProperty(window, 'font', {
                                // Configurable
                                configurable: !0,

                                // Get
                                get: function Font() {
                                    // Initialization > (Constructor, Font)
                                    let constructor = function Font() {},
                                        font = LDKF.cloneObject(constructor);

                                    // Modification > Font
                                        // Add
                                        LDKF.objectDefineProperty(font, 'add', {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !0,

                                            // Value
                                            value: function add() {
                                                // Initialization > Font (Name, Type, URL)
                                                let fontName = LDKF.string(arguments[0]),
                                                    fontType = LDKF.string(arguments[2]),
                                                    fontURL = LDKF.string(arguments[1]);

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (arguments.length > 2) {
                                                    // Initialization > (Document Head, Element)
                                                    let documentHead = LDKF.get.documentHead(),
                                                        element = LDKF.createElementDocument('style');

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (!LDKF.querySelectorDocument("style[font-name='" + fontName + "']") && !LDKF.querySelectorDocument("style[font-url='" + fontURL + "']")) {
                                                        // Modification > Element > (Font (Name, Type, URL), Inner HTML, Media, Type)
                                                        LDKF.setAttributeElement(element, 'font-name', fontName);
                                                        LDKF.setAttributeElement(element, 'font-type', fontType);
                                                        LDKF.setAttributeElement(element, 'font-url', fontURL);
                                                        LDKF.set.elementInnerHTML(
                                                            element,
                                                            '@font-face {' +
                                                                "font-family: '" + fontName + "';" +
                                                                "src: local('" + fontName + "'), " +
                                                                    (fontType != 'svg' && fontType != 'ttf' && fontType != 'woff' ? "url('" + fontURL + "')" : '') +
                                                                    (fontType == 'woff' ? "url('" + fontURL + "') format('woff')" : '') +
                                                                    (fontType == 'ttf' ? "url('" + fontURL + "') format('truetype')" : '') +
                                                                    (fontType == 'svg' ? "url('" + LDKF.trimRightCharString(fontURL, '#font') + "#font') format('svg')" : '') +
                                                            '}'
                                                        );
                                                        LDKF.setAttributeElement(element, 'media', 'all');
                                                        LDKF.setAttributeElement(element, 'type', 'text/css');

                                                        // Insertion
                                                        LDKF.appendChildNode(documentHead, element);

                                                        // Return
                                                        return element
                                                    }

                                                    else
                                                        // Error
                                                        LDKF.error("'add'", 'argument', "The font '" + fontName + "' has already been added to the document")
                                                }

                                                else
                                                    LDKF.error("'add'", 'argument', [3, 0])
                                            }
                                        });

                                        // Value Of
                                        LDKF.objectDefineProperty(font, 'valueOf', {
                                            // Value
                                            value: function valueOf() {
                                                // Return
                                                return constructor
                                            }
                                        });

                                    // Return
                                    return font
                                }
                            });

                            // Function
                            LDKF.objectDefineProperty(window, 'func', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function Function() {
                                    // Return
                                    return LDKF.$func.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // Generate Key
                            LDKF.objectDefineProperty(window, 'generateKey', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function generateKey() {
                                    // Initialization > (String (Length), Iterator, Key (Length), Re-Sort)
                                    let string = LDKF.string(arguments[0]),
                                        stringLength = string.length,
                                        iterator = stringLength,
                                        key = '',
                                        keyLength = arguments.length > 1 ? LDKF.$number(arguments[1]) : stringLength,
                                        resort = !!arguments[2];

                                    /* Logic
                                            [if statement]
                                    */
                                    if (arguments.length) {
                                        // Update > Iterator
                                        (keyLength == iterator) || (iterator = keyLength);

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (resort) {
                                            // Update > String
                                            string = LDKF.arrayFrom(string);

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator && string.length) {
                                                // Initialization > Random
                                                let random = LDKF.numberParseInt(LDKF.mathRandom() * iterator);

                                                // Loop > Update > Random
                                                while (!string[random])
                                                    random = LDKF.numberParseInt(LDKF.mathRandom() * iterator);

                                                // Update > (Key, String, Iterator)
                                                key += string[random];
                                                LDKF.spliceArray(string, random, 1);
                                                iterator -= 1
                                            }

                                            // Update > String Length
                                            stringLength = LDKF.abs(stringLength - keyLength);

                                            // Loop > Update > Key
                                            for (iterator = 0; iterator < stringLength; iterator += 1)
                                                key += ''
                                        }

                                        else
                                            // Loop > Update > (Key, Iterator)
                                            while (iterator) {
                                                key += string[LDKF.numberParseInt(LDKF.mathRandom() * stringLength)]
                                                iterator -= 1
                                            }
                                    }

                                    // Return
                                    return key
                                },

                                // Writable
                                writable: !0
                            });

                            // Integer
                            LDKF.objectDefineProperty(window, 'int', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function integer() {
                                    // Return
                                    return LDKF.numberParseInt.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // Interval
                            LDKF.objectDefineProperty(window, 'interval', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function interval() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Interval, Iteration Count)
                                        let callback = arguments[0],
                                            interval = arguments[1],
                                            iterationCount = length > 2 ? arguments[2] : 1 / 0;

                                        // Update > Callback
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'interval'", 'argument', 'First argument must be a function');

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (length == 2)
                                            // Return
                                            return LDKF.setInterval(callback, interval);

                                        else {
                                            // Initialization > Iterator
                                            let iterator = 0;

                                            // Function > Repeat
                                            function repeat() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (iterator < iterationCount) {
                                                    // Update > Iterator
                                                    iterator += 1;

                                                    // Return
                                                    return callback.call(window, iterator);
                                                }

                                                else
                                                    // Return
                                                    return LDKF.clearInterval(repeat, interval)
                                            }

                                            // Set Interval > Repeat
                                            LDKF.setInterval(repeat, interval)
                                        }
                                    }

                                    else
                                        // Error
                                        LDKF.error("'interval'", 'argument', [1, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            // Log
                            LDKF.objectDefineProperty(window, 'log', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function log() {
                                    // Initialization > (Arguments, Length)
                                    let args = LDKF.toArray(arguments),
                                        length = args.length;

                                    // Console > Log
                                    LDKF.consoleLog.apply(LDKF, args);

                                    // Logic
                                    if (length)
                                        // Logic > Return
                                        if (length == 1)
                                            return arguments[0];

                                        else
                                            return args;

                                    // Return
                                    return null
                                },

                                // Writable
                                writable: !0
                            });

                            // Math
                                /* Average
                                        --- NOTE ---
                                            #Lapys: Or arithmetic mean...
                                */
                                LDKF.objectDefineProperty(Math, 'avg', {
                                    // Configurable
                                    configurable: !0,

                                    // Value
                                    value: function avg() {
                                        // Initialization > (Iterator, Length, Result)
                                        let iterator = arguments.length,
                                            length = iterator,
                                            result = 0;

                                        // Loop > Update > Result
                                        while (iterator)
                                            result += arguments[iterator -= 1];

                                        // Return
                                        return result / length
                                    },

                                    // Writable
                                    writable: !0
                                });

                                /* Invert
                                        --- NOTE ---
                                            #Lapys: Either additive or multiplicative inversion.
                                */
                                LDKF.objectDefineProperty(Math, 'inv', {
                                    // Configurable
                                    configurable: !0,

                                    // Value
                                    value: function inv() {
                                        // Return
                                        return arguments[1] ? -arguments[0] : 1 / arguments[0]
                                    },

                                    // Writable
                                    writable: !0
                                });

                                // Percent
                                LDKF.objectDefineProperty(Math, 'perc', {
                                    // Configurable
                                    configurable: !0,

                                    // Value
                                    value: LDKF.perc = function perc() {
                                        // Initialization > (Base, Exponent, Length)
                                        let base = arguments[0],
                                            exponent = arguments[1],
                                            length = arguments.length;

                                        // Logic > Return
                                        if (length)
                                            return length == 1 ? base / 100 : base * (exponent / 100);

                                        // Return
                                        return LDKO.numberNaN
                                    },

                                    // Writable
                                    writable: !0
                                })

                                /* Random > Between
                                        --- WARN ---
                                            #Lapys: No idea what happens if non-numeral data is
                                                used with this method.
                                */
                                LDKF.objectDefineProperty(Math.random, 'between', {
                                    // Configurable
                                    configurable: !0,

                                    // Value
                                    value: function between() {
                                        // Initialization > Length
                                        let length = arguments.length;

                                        /* Logic
                                                [if statement]
                                        */
                                        if (length) {
                                            // Initialization > (Arguments, Main Number, Result)
                                            let args = LDKF.toArray(arguments),
                                                mainNumber = args[0],
                                                result = 0;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length == 1) {
                                                /* Initialization > (Number, Exponential Potency)
                                                        --- NOTE ---
                                                            #Lapys: Random formula I came up with:
                                                                f(x) = (x * 2) / 3
                                                */
                                                let number = args[0],
                                                    exponentialPotency = (number * 2) / 3;

                                                // Update > (Arguments, Length)
                                                args[0] = number - exponentialPotency;
                                                args[1] = number + exponentialPotency;
                                                length = 2
                                            }

                                            // Initialization > (Decremented Length, Iterator, Swapped)
                                            let decrementedLength = length - 1,
                                                iterator = 0,
                                                swapped;

                                            // Function > Between
                                            function between() {
                                                // Initialization > (Number (A, B), (Max, Min)imum, Difference, Random, Result)
                                                let numberA = arguments[0],
                                                    numberB = arguments[1],
                                                    max = LDKF.max(arguments[0], arguments[1]),
                                                    min = LDKF.min(arguments[0], arguments[1]),
                                                    difference = max - min,
                                                    random = LDKF.mathRandom(),
                                                    result = 0;

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (difference > -1 && difference < 2) {
                                                    // Update > Result
                                                    result = min + random;

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (difference > (random * 2) / 3) {
                                                        // Loop > Update > Result
                                                        while (result > max) result -= difference * LDKF.mathRandom();
                                                        while (result < min) result += difference * LDKF.mathRandom()
                                                    }

                                                    else {
                                                        // Initialization > Smallest Random Increment
                                                        let smallestRandomIncrement = LDKC.smallestCalculableDecimal / LDKF.mathRandom();

                                                        // Update > Result
                                                        result = min + smallestRandomIncrement
                                                    }
                                                }

                                                else
                                                    // Update > Result
                                                    result = random * (max - min) + min;

                                                // Return
                                                return result
                                            }

                                            /* Loop
                                                    [do:while statement]

                                                    --- NOTE ---
                                                        #Lapys: Basically bubble sort...
                                            */
                                            do {
                                                // Update > Swapped
                                                swapped = !1;

                                                /* Loop
                                                        Index Arguments.
                                                */
                                                for (iterator = 0; iterator < decrementedLength; iterator += 1) {
                                                    // Initialization > Incremented Iterator
                                                    let incrementedIterator = iterator + 1;

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (args[iterator] > args[incrementedIterator]) {
                                                        // Initialization > Number
                                                        let number = args[iterator];

                                                        // Update > (Arguments, Swapped)
                                                        args[iterator] = args[incrementedIterator];
                                                        args[incrementedIterator] = number;
                                                        swapped = !0
                                                    }
                                                }
                                            } while (swapped);

                                            /* Loop
                                                    [while statement]

                                                    --- NOTE ---
                                                        #Lapys: Pick a random number using the Between function
                                                            between every two elements at the start and the end of the Arguments set.
                                            */
                                            while (args.length > 3) {
                                                // Initialization > (Sibling) Number
                                                let number = args[0],
                                                    siblingNumber = args[1];

                                                // Update > (Arguments, (Sibling) Number)
                                                LDKF.spliceArray(args, 1, 1);
                                                args[0] = between(number, siblingNumber);
                                                number = args[args.length - 1];
                                                siblingNumber = args[args.length - 2];
                                                LDKF.spliceArray(args, args.length - 2, 1);
                                                args[args.length - 1] = between(siblingNumber, number)
                                            }

                                            // Update > (Arguments, Result)
                                            ((length = args.length) == 3) && (args = [between(args[0], args[1]), args[2]]);
                                            result = between(args[0], args[1]);

                                            // Return
                                            return LDKF.objectIs(LDKF.abs(mainNumber), mainNumber) ? LDKF.abs(result) : -LDKF.abs(result)
                                        }

                                        // Return
                                        return LDKF.mathRandom()
                                    },

                                    // Writable
                                    writable: !0
                                });

                                // Range
                                LDKF.objectDefineProperty(Math, 'range', {
                                    // Configurable
                                    configurable: !0,

                                    // Value
                                    value: function range() {
                                        // Return
                                        return LDKF.abs(arguments[0] - arguments[1])
                                    },

                                    // Writable
                                    writable: !0
                                });

                                // Root
                                LDKF.objectDefineProperty(Math, 'root', {
                                    // Configurable
                                    configurable: !0,

                                    // Value
                                    value: function root() {
                                        // Return
                                        return LDKF.pow(arguments[0], 1 / arguments[1])
                                    },

                                    // Writable
                                    writable: !0
                                });

                            // Maximum
                            LDKF.objectDefineProperty(window, 'max', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function max() {
                                    // Initialization > (Iterator, Length)
                                    let iterator = 0,
                                        length = arguments.length;

                                    // Loop > Update > Arguments
                                    for (iterator; iterator < length; iterator += 1)
                                        arguments[iterator] = LDKF.$number(arguments[iterator]);

                                    // Return
                                    return LDKF.max.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // (Get) Maximum (Object)
                            LDKF.objectDefineProperty(window, 'maxg', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function maxg() {
                                    // Initialization > (Arguments, Iterator, Length)
                                    let args = LDKF.toArray(arguments),
                                        iterator = 0,
                                        length = arguments.length;

                                    // Loop > Update > Arguments
                                    for (iterator; iterator < length; iterator += 1)
                                        arguments[iterator] = LDKF.$number(arguments[iterator]);

                                    // Initialization > Max
                                    let max = LDKF.max.apply(LDKF, LDKF.toArray(arguments));

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator = 0; iterator < length; iterator += 1) {
                                        // Initialization > Argument
                                        let arg = args[iterator];

                                        // Logic > Return
                                        if (LDKF.$number(arg) === max)
                                            return arg
                                    }
                                },

                                // Writable
                                writable: !0
                            });

                            // Minimum
                            LDKF.objectDefineProperty(window, 'min', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function min() {
                                    // Initialization > (Iterator, Length)
                                    let iterator = 0,
                                        length = arguments.length;

                                    // Loop > Update > Arguments
                                    for (iterator; iterator < length; iterator += 1)
                                        arguments[iterator] = LDKF.$number(arguments[iterator]);

                                    // Return
                                    return LDKF.min.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // (Get) Minimum (Object)
                            LDKF.objectDefineProperty(window, 'ming', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function ming() {
                                    // Initialization > (Arguments, Iterator, Length)
                                    let args = LDKF.toArray(arguments),
                                        iterator = 0,
                                        length = arguments.length;

                                    // Loop > Update > Arguments
                                    for (iterator; iterator < length; iterator += 1)
                                        arguments[iterator] = LDKF.$number(arguments[iterator]);

                                    // Initialization > Min
                                    let min = LDKF.min.apply(LDKF, LDKF.toArray(arguments));

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator = 0; iterator < length; iterator += 1) {
                                        // Initialization > Argument
                                        let arg = args[iterator];

                                        // Logic > Return
                                        if (LDKF.$number(arg) === min)
                                            return arg
                                    }
                                },

                                // Writable
                                writable: !0
                            });

                            // Notify
                            LDKF.objectDefineProperty(window, 'notify', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function notify() {
                                    // Initialization > (Length, Title, Options, Force Request, Notification, Permission)
                                    let length = arguments.length,
                                        title = length ? LDKF.string(arguments[0]) : '',
                                        options = LDKF.object(arguments[1]),
                                        forceRequest = !!arguments[2],
                                        notification,
                                        permission = LDKF.get.notificationPermission();

                                    // Function > Notify
                                    function notify() {
                                        // Update > Notification
                                        notification = new LDKO.notification(title, options)
                                    }

                                    // Request Permission
                                    (
                                        forceRequest || (
                                            permission !== 'denied' &&
                                            permission !== 'granted'
                                        )
                                    ) ? LDKF.requestPermissionNotification(function(permission) {
                                        // Notify
                                        (permission === 'granted') && notify()
                                    }) : notify();

                                    // Return
                                    return notification
                                },

                                // Writable
                                writable: !0
                            });
                                // Alert
                                LDKF.objectDefineProperty(notify, 'alert', {
                                    // Configurable
                                    configurable: !0,

                                    // Enumerable
                                    enumerable: !0,

                                    // Value
                                    value: function alert() {
                                        // Initialization > Arguments
                                        let args = LDKF.toArray(arguments);

                                        // Update > Arguments
                                        LDKF.spliceArray(args, 0, 0, window);

                                        // Return
                                        return LDKF.alertWindow.apply(window, args)
                                    },

                                    // Writable
                                    writable: !0
                                });

                                // Confirm
                                LDKF.objectDefineProperty(notify, 'confirm', {
                                    // Configurable
                                    configurable: !0,

                                    // Enumerable
                                    enumerable: !0,

                                    // Value
                                    value: function confirm() {
                                        // Initialization > Arguments
                                        let args = LDKF.toArray(arguments);

                                        // Update > Arguments
                                        LDKF.spliceArray(args, 0, 0, window);

                                        // Return
                                        return LDKF.confirmWindow.apply(window, args)
                                    },

                                    // Writable
                                    writable: !0
                                });

                                // Prompt
                                LDKF.objectDefineProperty(notify, 'prompt', {
                                    // Configurable
                                    configurable: !0,

                                    // Enumerable
                                    enumerable: !0,

                                    // Value
                                    value: function prompt() {
                                        // Initialization > Arguments
                                        let args = LDKF.toArray(arguments);

                                        // Update > Arguments
                                        LDKF.spliceArray(args, 0, 0, window);

                                        // Return
                                        return LDKF.promptWindow.apply(window, args)
                                    },

                                    // Writable
                                    writable: !0
                                });

                                // Value Of
                                LDKF.objectDefineProperty(notify, 'valueOf', {
                                    // Value
                                    value: function valueOf() {
                                        // Return
                                        return LDKO.notification
                                    }
                                });

                            // Number
                            LDKF.objectDefineProperty(window, 'num', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function Number() {
                                    // Return
                                    return LDKF.$number.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            // Object
                            LDKF.objectDefineProperty(window, 'object', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function Object() {
                                    // Initialization > (Length, Object)
                                    let length = arguments.length,
                                        object = {};

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length) {
                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (length == 1)
                                            // Return
                                            return LDKF.object(LDKF.cloneObject(arguments[0]));

                                        else {
                                            // Initialization > Iterator
                                            let iterator = 0;

                                            /* Loop
                                                    Index Arguments.
                                            */
                                            for (iterator; iterator < length; iterator += 1) {
                                                // Initialization > Argument
                                                let argument = arguments[iterator];

                                                // LapyJS Development Kit Functions > Iterate Object
                                                LDKF.iterateObject(function(key, value, description) {
                                                    // Error Handling
                                                    try {
                                                        // Modification > Object > ([Key], (Constructor > Prototype))
                                                        LDKF.objectDefineProperty(object, key, description);
                                                        object.__proto__ = LDKF.objectCreate(argument.constructor.prototype)
                                                    } catch (error) {}
                                                }, argument, !0, !1)
                                            }
                                        }
                                    }

                                    // Return
                                    return object
                                },

                                // Writable
                                writable: !0
                            });

                            // On DOM Element Added
                            LDKF.objectDefineProperty(window, 'onDOMElementAdded', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMElementAdded() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM Element Added Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMElementAddedWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMElementAddedWatchListElement.evaluationString = callback;

                                            // Modification > On DOM Element Added Watch List Element > Is (Evaluation String, Function)
                                            onDOMElementAddedWatchListElement.isEvaluationString = !0;
                                            onDOMElementAddedWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMElementAddedWatchListElement.evaluationString = '';

                                            // Modification > On DOM Element Added Watch List Element > Is (Evaluation String, Function)
                                            onDOMElementAddedWatchListElement.isEvaluationString = !1;
                                            onDOMElementAddedWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMElementAdded'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM Element Added Watch List Element > Function
                                        onDOMElementAddedWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMElementAddedWatchList.length && test() && LDKF.error("'onDOMElementAdded'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM Element Added Watch List
                                        LDKF.pushArray(tmpObject.onDOMElementAddedWatchList, onDOMElementAddedWatchListElement);

                                        // Initialization > ((Former) Length, Request)
                                        let formerLength = LDKF.get.htmlAllCollectionLength(LDKF.get.documentAll()),
                                            length = 0,
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMElementAddedWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > Length
                                                length = LDKF.get.htmlAllCollectionLength(LDKF.get.documentAll());

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length > formerLength) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former Length
                                                    formerLength = length
                                                }

                                                // Update > Former Length
                                                (formerLength == length) || (formerLength = length);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMElementAdded'", 'argument', [1, 0])
                                }
                            });

                            // On DOM Element Count Change
                            LDKF.objectDefineProperty(window, 'onDOMElementCountChange', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMElementCountChange() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM Element Count Change Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMElementCountChangeWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMElementCountChangeWatchListElement.evaluationString = callback;

                                            // Modification > On DOM Element Count Change Watch List Element > Is (Evaluation String, Function)
                                            onDOMElementCountChangeWatchListElement.isEvaluationString = !0;
                                            onDOMElementCountChangeWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMElementCountChangeWatchListElement.evaluationString = '';

                                            // Modification > On DOM Element Count Change Watch List Element > Is (Evaluation String, Function)
                                            onDOMElementCountChangeWatchListElement.isEvaluationString = !1;
                                            onDOMElementCountChangeWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMElementCountChange'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM Element Count Change Watch List Element > Function
                                        onDOMElementCountChangeWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMElementCountChangeWatchList.length && test() && LDKF.error("'onDOMElementCountChange'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM Element Count Change Watch List
                                        LDKF.pushArray(tmpObject.onDOMElementCountChangeWatchList, onDOMElementCountChangeWatchListElement);

                                        // Initialization > ((Former) Length, Request)
                                        let formerLength = LDKF.get.htmlAllCollectionLength(LDKF.get.documentAll()),
                                            length = 0,
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMElementCountChangeWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > Length
                                                length = LDKF.get.htmlAllCollectionLength(LDKF.get.documentAll());

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length != formerLength) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former Length
                                                    formerLength = length
                                                }

                                                // Update > Former Length
                                                (formerLength == length) || (formerLength = length);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMElementCountChange'", 'argument', [1, 0])
                                }
                            });

                            // On DOM Element Removed
                            LDKF.objectDefineProperty(window, 'onDOMElementRemoved', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMElementRemoved() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM Element Removed Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMElementRemovedWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMElementRemovedWatchListElement.evaluationString = callback;

                                            // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                            onDOMElementRemovedWatchListElement.isEvaluationString = !0;
                                            onDOMElementRemovedWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMElementRemovedWatchListElement.evaluationString = '';

                                            // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                            onDOMElementRemovedWatchListElement.isEvaluationString = !1;
                                            onDOMElementRemovedWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMElementRemoved'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM Element Removed Watch List Element > Function
                                        onDOMElementRemovedWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMElementRemovedWatchList.length && test() && LDKF.error("'onDOMElementRemoved'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM Element Removed Watch List
                                        LDKF.pushArray(tmpObject.onDOMElementRemovedWatchList, onDOMElementRemovedWatchListElement);

                                        // Initialization > ((Former) Length, Request)
                                        let formerLength = LDKF.get.htmlAllCollectionLength(LDKF.get.documentAll()),
                                            length = 0,
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMElementRemovedWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > Length
                                                length = LDKF.get.htmlAllCollectionLength(LDKF.get.documentAll());

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length != formerLength) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former Length
                                                    formerLength = length
                                                }

                                                // Update > Former Length
                                                (formerLength == length) || (formerLength = length);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMElementRemoved'", 'argument', [1, 0])
                                }
                            });

                            // On DOM HTML Change
                            LDKF.objectDefineProperty(window, 'onDOMHTMLChange', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMHTMLChange() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM HTML Change Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMHTMLChangeWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMHTMLChangeWatchListElement.evaluationString = callback;

                                            // Modification > On DOM HTML Change Watch List Element > Is (Evaluation String, Function)
                                            onDOMHTMLChangeWatchListElement.isEvaluationString = !0;
                                            onDOMHTMLChangeWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMHTMLChangeWatchListElement.evaluationString = '';

                                            // Modification > On DOM HTML Change Watch List Element > Is (Evaluation String, Function)
                                            onDOMHTMLChangeWatchListElement.isEvaluationString = !1;
                                            onDOMHTMLChangeWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMHTMLChange'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM HTML Change Watch List Element > Function
                                        onDOMHTMLChangeWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMHTMLChangeWatchList.length && test() && LDKF.error("'onDOMHTMLChange'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM HTML Change Watch List
                                        LDKF.pushArray(tmpObject.onDOMHTMLChangeWatchList, onDOMHTMLChangeWatchListElement);

                                        // Initialization > (Element, (Former) HTML, Request)
                                        let element = LDKF.get.documentChildren(LDKO.$document)[0] || LDKC.element,
                                            formerHTML = LDKF.get.elementOuterHTML(element),
                                            HTML = '',
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMHTMLChangeWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > HTML
                                                HTML = LDKF.get.elementOuterHTML(element = LDKF.get.documentChildren(LDKO.$document)[0] || LDKC.element);

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (HTML != formerHTML) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former HTML
                                                    formerHTML = HTML
                                                }

                                                // Update > Former HTML
                                                (formerHTML == HTML) || (formerHTML = HTML);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMHTMLChange'", 'argument', [1, 0])
                                }
                            });

                            // On DOM Node Added
                            LDKF.objectDefineProperty(window, 'onDOMNodeAdded', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMNodeAdded() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM Node Added Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMNodeAddedWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMNodeAddedWatchListElement.evaluationString = callback;

                                            // Modification > On DOM Node Added Watch List Element > Is (Evaluation String, Function)
                                            onDOMNodeAddedWatchListElement.isEvaluationString = !0;
                                            onDOMNodeAddedWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMNodeAddedWatchListElement.evaluationString = '';

                                            // Modification > On DOM Node Added Watch List Element > Is (Evaluation String, Function)
                                            onDOMNodeAddedWatchListElement.isEvaluationString = !1;
                                            onDOMNodeAddedWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMNodeAdded'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM Node Added Watch List Element > Function
                                        onDOMNodeAddedWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMNodeAddedWatchList.length && test() && LDKF.error("'onDOMNodeAdded'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM Node Added Watch List
                                        LDKF.pushArray(tmpObject.onDOMNodeAddedWatchList, onDOMNodeAddedWatchListElement);

                                        // Initialization > ((Former) Length, Request)
                                        let formerLength = LDKO.allDocumentNodes.length,
                                            length = 0,
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMNodeAddedWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > Length
                                                length = LDKO.allDocumentNodes.length;

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length > formerLength) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former Length
                                                    formerLength = length
                                                }

                                                // Update > Former Length
                                                (formerLength == length) || (formerLength = length);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMNodeAdded'", 'argument', [1, 0])
                                }
                            });

                            // On DOM Node Count Change
                            LDKF.objectDefineProperty(window, 'onDOMNodeCountChange', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMNodeCountChange() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM Node Count Change Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMNodeCountChangeWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMNodeCountChangeWatchListElement.evaluationString = callback;

                                            // Modification > On DOM Node Count Change Watch List Element > Is (Evaluation String, Function)
                                            onDOMNodeCountChangeWatchListElement.isEvaluationString = !0;
                                            onDOMNodeCountChangeWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMNodeCountChangeWatchListElement.evaluationString = '';

                                            // Modification > On DOM Node Count Change Watch List Element > Is (Evaluation String, Function)
                                            onDOMNodeCountChangeWatchListElement.isEvaluationString = !1;
                                            onDOMNodeCountChangeWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMNodeCountChange'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM Node Count Change Watch List Element > Function
                                        onDOMNodeCountChangeWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMNodeCountChangeWatchList.length && test() && LDKF.error("'onDOMNodeCountChange'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM Node Count Change Watch List
                                        LDKF.pushArray(tmpObject.onDOMNodeCountChangeWatchList, onDOMNodeCountChangeWatchListElement);

                                        // Initialization > ((Former) Length, Request)
                                        let formerLength = LDKO.allDocumentNodes.length,
                                            length = 0,
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMNodeCountChangeWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > Length
                                                length = LDKO.allDocumentNodes.length;

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length != formerLength) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former Length
                                                    formerLength = length
                                                }

                                                // Update > Former Length
                                                (formerLength == length) || (formerLength = length);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMNodeCountChange'", 'argument', [1, 0])
                                }
                            });

                            // On DOM Node Removed
                            LDKF.objectDefineProperty(window, 'onDOMNodeRemoved', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMNodeRemoved() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Evaluation String, On DOM Node Removed Watch List Element)
                                        let callback = arguments[0],
                                            evaluationString,
                                            onDOMNodeRemovedWatchListElement = {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isEvaluationString(callback)) {
                                            // Update > Evaluation String
                                            evaluationString = onDOMNodeRemovedWatchListElement.evaluationString = callback;

                                            // Modification > On DOM Node Removed Watch List Element > Is (Evaluation String, Function)
                                            onDOMNodeRemovedWatchListElement.isEvaluationString = !0;
                                            onDOMNodeRemovedWatchListElement.isFunction = !1;

                                            // Update > Callback
                                            callback = LDKF.$func(callback)
                                        }

                                        else {
                                            // Update > Evaluation String
                                            evaluationString = onDOMNodeRemovedWatchListElement.evaluationString = '';

                                            // Modification > On DOM Node Removed Watch List Element > Is (Evaluation String, Function)
                                            onDOMNodeRemovedWatchListElement.isEvaluationString = !1;
                                            onDOMNodeRemovedWatchListElement.isFunction = !0
                                        }

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMNodeRemoved'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                        // Modification > On DOM Node Removed Watch List Element > Function
                                        onDOMNodeRemovedWatchListElement.function = callback;

                                        // Error
                                        tmpObject.onDOMNodeRemovedWatchList.length && test() && LDKF.error("'onDOMNodeRemoved'", 'argument', 'Callback has been added to the watch list already');

                                        // Update > Temporary Object > On DOM Node Removed Watch List
                                        LDKF.pushArray(tmpObject.onDOMNodeRemovedWatchList, onDOMNodeRemovedWatchListElement);

                                        // Initialization > ((Former) Length, Request)
                                        let formerLength = LDKO.allDocumentNodes.length,
                                            length = 0,
                                            request;

                                        // Function
                                            // Test
                                            function test() {
                                                // Initialization > (Array, Iterator)
                                                let array = tmpObject.onDOMNodeRemovedWatchList,
                                                    iterator = array.length;

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Array Element
                                                    let arrayElement = array[iterator -= 1];

                                                    // Logic > Return
                                                    if (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                        return !0
                                                }
                                            }

                                            // Watch
                                            (function watch() {
                                                // Update > Length
                                                length = LDKO.allDocumentNodes.length;

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (length != formerLength) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Update > Former Length
                                                    formerLength = length
                                                }

                                                // Update > Former Length
                                                (formerLength == length) || (formerLength = length);

                                                // (Update > Request) | Cancel Animation Frame > Request
                                                test() ?
                                                    request = LDKF.requestAnimationFrame(watch) :
                                                    LDKF.cancelAnimationFrame(request)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMNodeRemoved'", 'argument', [1, 0])
                                }
                            });

                            // On DOM Ready
                            LDKF.objectDefineProperty(window, 'onDOMReady', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function onDOMReady() {
                                    // Initialization > (Callback, Complete (Request), Document, Watch Request, Test)
                                    let callback = arguments[0],
                                        complete = !1,
                                        completeRequest,
                                        document = LDKO.$document,
                                        watchRequest,
                                        test = LDKF.addEventListenerEventTarget.valueOf();

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length) {
                                        // Update > Callback
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'onDOMReady'", 'argument', LDKF.debugMessage('Argument', ['must', 'a'], ['evaluation string', 'function']));

                                        // Function
                                            // Ready
                                            function ready() {
                                                // Return
                                                return readyState() === 'complete'
                                            }

                                            // Ready State
                                            function readyState() {
                                                // Return
                                                return LDKF.get.documentReadyState(document)
                                            }

                                            // Terminate
                                            function terminate() {
                                                // Update > Complete
                                                complete = !0;

                                                // Event > Document > DOM Content Loaded
                                                LDKF.removeEventListenerEventTarget(document, 'DOMContentLoaded', terminate)
                                            }

                                            // Legacy Terminate
                                            function legacyTerminate() {
                                                // Update > Complete
                                                ready() && (complete = !0);

                                                // Event > Document > On Ready State Change
                                                LDKF.detachEventEventTarget(document, 'onreadystatechange', legacyTerminate)
                                            }

                                        // Event > Document > (DOM Content Loaded | On Ready State Change)
                                        test ?
                                            LDKF.addEventListenerEventTarget(document, 'DOMContentLoaded', terminate) :
                                            LDKF.attachEventEventTarget(document, 'onreadystatechange', legacyTerminate);

                                        // Function
                                            // Watch
                                            (function watch() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (complete || ready()) {
                                                    // Update > Complete
                                                    complete = !0;

                                                    // Cancel Animation Frame > Watch Request
                                                    LDKF.isConstructible(watchRequest) && LDKF.cancelAnimationFrame(watchRequest)
                                                }

                                                else
                                                    // Update > Watch Request
                                                    watchRequest = LDKF.requestAnimationFrame(watch)
                                            })();

                                            // Is Complete
                                            (function isComplete() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (complete) {
                                                    // Callback
                                                    callback.call(LDKO.$document);

                                                    // Cancel Animation Frame > Complete Request
                                                    LDKF.isConstructible(completeRequest) && LDKF.cancelAnimationFrame(completeRequest)
                                                }

                                                else
                                                    // Update > Complete Request
                                                    completeRequest = LDKF.requestAnimationFrame(isComplete)
                                            })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'onDOMReady'", 'argument', [1, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            // Paste
                            LDKF.objectDefineProperty(window, 'paste', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function paste() {
                                    // Initialization > (Command, Data, Input)
                                    let command = 'paste',
                                        data = arguments[0],
                                        input = LDKF.createElementDocument('textarea');

                                    // Logic
                                    if (arguments.length) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.queryCommandEnabledDocument(command) || LDKF.queryCommandSupportedDocument(command)) {
                                            // Initialization > Input Style
                                            let inputStyle = LDKF.get.htmlElementStyle(input);

                                            // Modification
                                                // Input Style
                                                    // Pointer Events
                                                    inputStyle.pointerEvents = 'none';

                                                    // Position
                                                    inputStyle.position = 'fixed';

                                                    // Opacity
                                                    inputStyle.opacity = 0;

                                            // Initialization > Parent
                                            let parent = LDKF.get.documentBody();

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (parent)
                                                LDKF.appendChildNode(parent, input);

                                            else {
                                                // Update > Parent
                                                parent = LDKF.get.documentHead();

                                                /* Loop
                                                        [if:else statement]
                                                */
                                                if (parent)
                                                    // Insertion
                                                    LDKF.appendChildNode(parent, input);

                                                else {
                                                    // Initialization > Children
                                                    let children = LDKF.get.documentChildren(LDKO.$document);

                                                    // Insertion
                                                    LDKF.get.htmlCollectionLength(children) && LDKF.appendChildNode(children[0], input)
                                                }
                                            }

                                            // LapysJS Development Kit Functions > (Focus, Select) > Input
                                            LDKF.focusHtmlElement(input);

                                            // Initialization > (Selection, Range)
                                            let selection = LDKF.getSelectionDocument(),
                                                range = LDKF.createRangeDocument();

                                            // Range > Select Node Contents > Input
                                            LDKF.selectNodeContentsRange(range, input);

                                            // Selection
                                                // Remove All Ranges
                                                LDKF.removeAllRangesSelection(selection);

                                                // Add Range > Range
                                                LDKF.addRangeSelection(selection, range);

                                            // LapysJS Development Kit Functions
                                                // (...)
                                                LDKF.cloneContentsRange(LDKF.getRangeAtSelection(selection, 0));

                                                // Select > Input
                                                LDKF.selectHtmlTextareaElement(input);

                                                // Execute Command > [Command]
                                                LDKF.execCommandDocument(LDKO.$document, command);

                                                // Blur > Input
                                                LDKF.blurHtmlElement(input);

                                            // Set Timeout
                                            LDKF.setTimeout(function() {
                                                // Selection > Remove All Ranges
                                                LDKF.removeAllRangesSelection(selection);

                                                // Deletion
                                                LDKF.remove$ChildNode(input)
                                            });

                                            // Initialization > Text
                                            let text = LDKF.get.htmlTextareaElementValue(input);

                                            /* Logic
                                                    [if:else if:else statement statement]
                                            */
                                            if (LDKF.isInputElement(data)) {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (LDKF.isHtmlInputElement(data)) {
                                                    // Modification > Data > Value
                                                    LDKF.set.htmlInputElementValue(data, LDKF.get.htmlInputElementValue(data) + text);

                                                    // Return
                                                    return LDKF.get.htmlInputElementValue(data)
                                                }

                                                else {
                                                    // Modification > Data > Value
                                                    LDKF.set.htmlTextareaElementValue(data, LDKF.get.htmlTextareaElementValue(data) + text);

                                                    // Return
                                                    return LDKF.get.htmlTextareaElementValue(data)
                                                }
                                            }

                                            else if (LDKF.isHtmlElement(data)) {
                                                // Modification > Data > Inner Text
                                                LDKF.set.htmlElementInnerText(data, LDKF.get.htmlElementInnerText(data) + text);

                                                // Return
                                                return LDKF.get.htmlElementInnerText(data)
                                            }

                                            else
                                                // Return
                                                return LDKF.string(data) + text
                                        }

                                        // Warn
                                        LDKF.warn("'" + command + "'", 'argument', "Query command '" + command + "' not supported in this browser")
                                    }

                                    else
                                        // Error
                                        LDKF.error("'paste'", 'argument', [1, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            // Percent
                            LDKF.objectDefineProperty(window, 'perc', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKF.perc,

                                // Writable
                                writable: !0
                            });

                            // PI
                            LDKF.objectDefineProperty(window, 'PI', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKO.PI,

                                // Writable
                                writable: !0
                            });

                            // Power
                            LDKF.objectDefineProperty(window, 'pow', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKF.pow,

                                // Writable
                                writable: !0
                            });

                            // Random
                            LDKF.objectDefineProperty(window, 'rand', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function random() {
                                    // Initialization > Arguments
                                    let args = LDKF.toArray(arguments);

                                    // Return
                                    return args.length == LDKF.filterArray(args, function(item) { return LDKF.isSafeNumber(item) }).length ?
                                        LDKF.mathRandom.between.apply(LDKF.mathRandom, args) :
                                        args[LDKF.numberParseInt(LDKF.mathRandom() * args.length)]
                                },

                                // Writable
                                writable: !0
                            });

                            // Regular Expression
                            LDKF.objectDefineProperty(window, 'regex', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function RegExp() {
                                    // Initialization > (Iterator, Length, Regular Expression)
                                    let iterator = 0,
                                        length = arguments.length,
                                        regex = {
                                            // Source
                                            source: '',

                                            // Flags
                                            flags: ''
                                        };

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator; iterator < length; iterator += 1) {
                                        // Initialization > Argument
                                        let argument = arguments[iterator];

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isRegex(argument)) {
                                            // Modification > Regular Expression > (Flags, Source)
                                            regex.flags += LDKF.get.regexFlags(argument);
                                            regex.source += LDKF.get.regexSource(argument)
                                        }

                                        else
                                            // Modification > Regular Expression > Source
                                            regex.source += LDKF.string(argument)
                                    }

                                    // Initialization > Flags
                                    let flags = '';

                                    // Update > Length
                                    length = regex.flags.length;

                                    /* Loop
                                            [for statement]
                                    */
                                    for (iterator = 0; iterator < length; iterator += 1) {
                                        // Initialization > Flag
                                        let flag = regex.flags[iterator];

                                        // Update > Flags
                                        (function() {
                                            // Initialization > Flags (Iterator, Length)
                                            let flagsIterator = 0,
                                                flagsLength = flags.length;

                                            // Loop > Logic > Return
                                            for (flagsIterator; flagsIterator < flagsLength; flagsIterator += 1)
                                                if (flags[flagsIterator] == flag)
                                                    return !1;

                                            // Return
                                            return !0
                                        })() && (flags += regex.flags[iterator])
                                    }

                                    // Return
                                    return LDKF.regex(regex.source, flags)
                                },

                                // Writable
                                writable: !0
                            });

                            // Register Element
                            LDKF.objectDefineProperty(window, 'registerElement', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function registerElement() {
                                    // Initialization > (Length, Target)
                                    let length = arguments.length,
                                        that = this;

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length) {
                                        // Initialization > (Arguments, Custom Elements, Document)
                                        let args = LDKF.toArray(arguments),
                                            customElements = LDKO.customElements || tmp,
                                            document = LDKO.$document;

                                        // Update > Arguments
                                        args[0] = LDKF.string(args[0]);

                                        // Error Handling
                                        try {
                                            // LapysJS Development Kit Functions > Create Element
                                            LDKF.createElementDocument(args[0])
                                        } catch (error) {
                                            // Error
                                            (error.constructor == LDKO.domException) && LDKF.error("'registerElement'", 'argument', LDKF.debugMessage(args[0], ['not', 'a'], 'valid element tag name'));
                                            throw error
                                        }

                                        // Update > Arguments
                                        (length > 1) || (args[1] = LDKF.eval('(class HTML' + LDKF.toUpperCaseString(args[0][0]) + LDKF.replaceString(LDKF.sliceString(args[0], 1), /-./g, function(a) { return LDKF.toUpperCaseString(a[1]) }) + 'Element extends LDKO.htmlElement {})'));
                                        (length > 2) || (args[2] = null);

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (
                                            LDKF.isObject(customElements) &&
                                            customElements.constructor === LDKO.customElementRegistry
                                        ) {
                                            // Initialization > Define
                                            let define = customElements.define;

                                            // Define
                                            LDKF.isNativeFunction(define) && define.apply(customElements, args)
                                        }

                                        else if (LDKF.isNativeFunction(document.registerElement))
                                            // Document > Register Element
                                            document.registerElement.apply(document, args);

                                        else
                                            // Warn
                                            LDKF.warn("'registerElement'", 'argument', 'Custom elements are not supported within this browser')
                                    }

                                    // Return
                                    return LDKF.isNativeFunction(LDKO.customElementRegistry)
                                },

                                // Writable
                                writable: !0
                            });

                            // Recur
                            LDKF.objectDefineProperty(window, 'recur', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function recur() {
                                    // Initialization > (Length, Callback, Object, State, Is Iterable Object)
                                    let length = arguments.length,
                                        callback = arguments[0];
                                        object = length > 1 ? arguments[1] : tmp;
                                        state = length > 2 ? arguments[2] : 'defer',
                                        isIterableObject = LDKF.isBoolean(object) || LDKF.isFunction(object) || LDKF.isNumber(object) || LDKF.isRegex(object) || LDKF.isSymbol(object);

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length > 1) {
                                        // Update > Callback
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'recur'", 'argument', LDKF.debugMessage(callback, ['must', 'a'], ['evaluation string', 'function']));

                                        // Update > State
                                        state = state == 'async' || state == 'defer' ? state : !!state ? 'async' : 'defer';

                                        // Initialization > LapysJS Temporary Data
                                        const LAPYSJS_TMP = LapysJS.tmp;

                                        // Function > Is Like Object
                                        function isLikeObject() {
                                            // Initialization > Test Object
                                            let testObject = arguments[0];

                                            // Return
                                            return LDKF.isConstructible(testObject) ? testObject.constructor === constructor &&
                                                testObject.constructor.prototype === prototype &&
                                                testObject.__proto__ === __proto__ : !1
                                        }

                                        // Initialization > (Array, Code, Constructor, Prototype, (Constructor > Prototype), (Decremented) Depth, Iterator)
                                        let array = [],
                                            code = 'const LAPYSJS_TMP=LapysJS.tmp;' +
                                                'let GLOBAL=LAPYSJS_TMP.array,' +
                                                    'isLikeObject=LAPYSJS_TMP.isLikeObject,' +
                                                    'iterate=LAPYSJS_TMP.iterate,' +
                                                    'object=LAPYSJS_TMP.object,' +
                                                    'push=LAPYSJS_TMP.push,' +
                                                    'unshift=LAPYSJS_TMP.unshift;',
                                            constructor = object.constructor,
                                            prototype = constructor.prototype,
                                            __proto__ = object.__proto__,
                                            depth = LDKF.getObjectDepth(object),
                                            decrementedDepth = depth - 1,
                                            isArray = LDKF.isArray(object),
                                            iterator = 0,
                                            iterators = LDKF.getIterators(depth);

                                        // Modification > LapysJS Temporary Data
                                            // Array
                                            LAPYSJS_TMP.array = array;

                                            // Is Like Object
                                            LAPYSJS_TMP.isLikeObject = isLikeObject;

                                            // Iterate
                                            LAPYSJS_TMP.iterate = LDKF.iterateObject;

                                            // Object
                                            LAPYSJS_TMP.object = object;

                                            // Push
                                            LAPYSJS_TMP.push = LDKF.pushArray;

                                            // Unshift
                                            LAPYSJS_TMP.unshift = LDKF.unshiftArray;

                                        /* Logic
                                                [if:else if statement]

                                                --- NOTE ---
                                                    #Lapys: Code using nested iteration functions (similar to nested `for` loops)
                                                        will be generated via a string.
                                        */
                                        if (isIterableObject) {
                                            // Initialization > (Allow Call, Request)
                                            let allowCall = !1,
                                                request;

                                            // (Function > Asynchronous) | Callback
                                            state == 'async' ? (function async() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (allowCall) {
                                                    // Callback
                                                    depth && callback.call(object, null, null, null, null, null);

                                                    // Cancel Animation Frame > Request
                                                    LDKF.cancelAnimationFrame(request);
                                                }

                                                else {
                                                    // Update > (Allow Call, Request)
                                                    allowCall = !0;
                                                    request = LDKF.requestAnimationFrame(async)
                                                }
                                            })() : (depth && callback.call(object, null, null, null, null, null));
                                        }

                                        else if (depth && (LDKF.isConstructible(object) && object !== tmp)) {
                                            // Initialization > New Array Item
                                            let newArrayItem = 'push(GLOBAL, {key: key, value: value, description: description, parent: parent, parentPath: parentPath})';

                                            /* Loop
                                                    Iterate over Depth.
                                            */
                                            for (iterator; iterator < depth; iterator += 1) {
                                                // Initialization > Is (First, Last) Iteration
                                                let isFirstIteration = !iterator,
                                                    isLastIteration = iterator == decrementedDepth;

                                                // Update > Code
                                                code += (isFirstIteration ? '' : 'unshift(parentPath,value);parent=value;') +
                                                    'iterate((key,value,description)=>{' +
                                                    (isFirstIteration ? 'var parent=object,parentPath=[object];' : '') +
                                                    (isLastIteration ? newArrayItem : 'if(isLikeObject(value)){' + newArrayItem + ';')
                                            }

                                            for (iterator = 0; iterator < depth; iterator += 1) {
                                                // Initialization > Is (First, Last) Iteration
                                                let isFirstIteration = !iterator,
                                                    isLastIteration = iterator == decrementedDepth;

                                                // Update > Code
                                                code += '}, ' + (isLastIteration ? 'object' : 'value') + ', !1, !0)' + (isLastIteration ? '' : ' }') +
                                                    (isLastIteration ? '' : '\n\nelse\n\n' + newArrayItem)
                                            }

                                            /* Execution
                                                    --- NOTE ---
                                                        #Lapys: Hopefully, the string generated code
                                                            is syntactically viable.
                                            */
                                            LDKF.eval(code);

                                            /* Loop
                                                    Index Array.
                                            */
                                            for (iterator = 0; iterator < array.length; iterator += 1) {
                                                // Initialization > (Argument Set, Key, Parent, Value)
                                                let argumentSet = array[iterator],
                                                    key = argumentSet.key,
                                                    parent = argumentSet.parent,
                                                    value = argumentSet.value;

                                                // (Modification > Argument Set > Parent Path), (Loop > Modification > Argument Set > Parent Path)
                                                argumentSet.parentPath = LDKF.filterArray(argumentSet.parentPath, function(a) { return !LDKF.objectIs(a, value) })
                                                while (parent !== argumentSet.parentPath[0]) argumentSet.parentPath = LDKF.sliceArray(argumentSet.parentPath, 1);

                                                // Update > Key
                                                LDKF.isNaN(+key) || (argumentSet.key = key = +key);

                                                // Update > Array
                                                (
                                                    isArray &&
                                                    (!argumentSet.description.configurable && !argumentSet.description.enumerable && argumentSet.description.writable) &&
                                                    key == 'length' &&
                                                    LDKF.isSafeInteger(value)
                                                ) && LDKF.spliceArray(array, (iterator -= 1) + 1, 1)
                                            }

                                            // Update > Length
                                            length = array.length;

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (state == 'async') {
                                                // Initialization > (Asynchronous Request, Iterator, Properties (Length))
                                                let asyncRequest,
                                                    iterator = 0,
                                                    props = [],
                                                    propsLength = 0;

                                                /* Loop
                                                        Index Array.
                                                */
                                                for (iterator = 0; iterator < length; iterator += 1) {
                                                    // Initialization > (Argument Set, Description, Key, Parent (Path), Value)
                                                    let argumentSet = array[iterator],
                                                        description = argumentSet.description,
                                                        key = argumentSet.key,
                                                        parent = argumentSet.parent,
                                                        parentPath = argumentSet.parentPath,
                                                        value = argumentSet.value;

                                                    // Update > Properties
                                                    LDKF.pushArray(props, {key: key, value: value, parent: parent, parentPath: parentPath, description: description})
                                                }

                                                // Update > (Iterator, Properties Length)
                                                iterator = 0;
                                                propsLength = props.length;

                                                // Function > Asynchronous
                                                (function async() {
                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (iterator < propsLength) {
                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (iterator != -1) {
                                                            // Initialization > (Property, Description, Key, Parent (Path), Value)
                                                            let prop = props[iterator],
                                                                description = prop.description,
                                                                key = prop.key,
                                                                parent = prop.parent,
                                                                parentPath = prop.parentPath,
                                                                value = prop.value;

                                                            // Callback
                                                            callback.call(object, key, value, parent, parentPath, description)
                                                        }

                                                        // Update > (Iterator, Asynchronous Request)
                                                        iterator += 1;
                                                        asyncRequest = LDKF.requestAnimationFrame(async)
                                                    }

                                                    else
                                                        // Cancel Animation Frame > Asynchronous Request
                                                        LDKF.cancelAnimationFrame(asyncRequest)
                                                })()
                                            }

                                            else
                                                /* Loop
                                                        Index Array.
                                                */
                                                for (iterator = 0; iterator < length; iterator += 1) {
                                                    // Initialization > (Argument Set, Description, Key, Parent (Path), Value)
                                                    let argumentSet = array[iterator],
                                                        description = argumentSet.description,
                                                        key = argumentSet.key,
                                                        parent = argumentSet.parent,
                                                        parentPath = argumentSet.parentPath,
                                                        value = argumentSet.value;

                                                    // Callback
                                                    callback.call(object, key, value, parent, parentPath, description)
                                                }
                                        }

                                        // Modification > LapysJS Temporary Data
                                            // Array
                                            LAPYSJS_TMP.array = [];

                                            // Object
                                            LAPYSJS_TMP.object = {};

                                        // Return
                                        return depth
                                    }

                                    // Return
                                    return null
                                },

                                // Writable
                                writable: !0
                            });

                            // Release Input
                            LDKF.objectDefineProperty(window, 'releaseInput', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function releaseInput() {
                                    // Initialization > (Input, Match, Callback, Is ((HTML) Input, Regular Expression), Strictly Watched Elements, Iterator, Length)
                                    let input = arguments[0],
                                        match = arguments[1],
                                        callback = arguments[2],
                                        isInputElement = LDKF.isInputElement(input),
                                        isHtmlInputElement = LDKF.isHtmlInputElement(input),
                                        isRegex = LDKF.isRegex(match),
                                        strictlyWatchedElements = LDK.tmp.objects.strictlyWatchedElements,
                                        iterator = strictlyWatchedElements.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length > 1) {
                                        // Update > Callback
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        isInputElement || LDKF.error("'releaseInput'", 'argument', LDKF.debugMessage("Input element given ('" + LDKF.string(input) + "')", 'must', ['an HTMLInputElement (<input>)', 'HTMLTextAreaElement (<textarea>)']));
                                        isRegex || LDKF.isString(match) || LDKF.error("'releaseInput'", 'argument', LDKF.debugMessage("Match given ('" + LDKF.string(match) + "')", ['must', 'a'], ['regular expression', 'string']));
                                        arguments.length > 2 ? LDKF.isFunction(callback) || LDKF.error("'releaseInput'", 'argument', LDKF.debugMessage("Callback given ('" + LDKF.string(callback) + "')", ['must', 'a'], ['evaluation string', 'function'])) : callback = null;

                                        // Initialization > Object
                                        let object = {callback: callback, input: input, match: match};

                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Strictly Watched Element
                                            let strictlyWatchedElement = strictlyWatchedElements[iterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (
                                                (
                                                    LDKF.isNull(object.callback) ||
                                                    LDKF.toFunctionString(strictlyWatchedElement.callback) == LDKF.toFunctionString(object.callback)
                                                ) &&
                                                strictlyWatchedElement.input === object.input &&
                                                (
                                                    isRegex ?
                                                        (
                                                            LDKF.get.regexFlags(strictlyWatchedElement.match) == LDKF.get.regexFlags(object.match) &&
                                                            LDKF.get.regexSource(strictlyWatchedElement.match) == LDKF.get.regexSource(object.match)
                                                        ) :
                                                        strictlyWatchedElement.match == object.match
                                                )
                                            ) {
                                                // Update > Strictly Watched Elements
                                                LDKF.spliceArray(strictlyWatchedElements, iterator, 1);

                                                // Return
                                                return !0
                                            }
                                        }
                                    }

                                    else
                                        // Error
                                        LDKF.error("'releaseInput'", 'argument', [2, 0]);

                                    // Return
                                    return !1
                                },

                                // Writable
                                writable: !0
                            });

                            // Repeat
                            LDKF.objectDefineProperty(window, 'repeat', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function repeat() {
                                    // Initialization > (Length, Special Character)
                                    let length = arguments.length;

                                    // Initialization > (Callback, Object, State, Is Iterable Object)
                                    let callback = arguments[0];
                                        object = length > 1 ? arguments[1] : tmp,
                                        state = length > 2 ? arguments[2] : 'defer',
                                        isIterableObject = LDKF.isBoolean(object) || LDKF.isFunction(object) || LDKF.isNumber(object) || LDKF.isRegex(object) || LDKF.isSymbol(object);

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length > 1) {
                                        // Update > Callback
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'repeat'", 'argument', LDKF.debugMessage(callback, ['must', 'a'], ['evaluation string', 'function']));

                                        // Error
                                        (object === tmp) && LDKF.error("'repeat'", 'argument', [2, 0]);

                                        // Update > State
                                        state = state == 'async' || state == 'defer' ? state : !!state ? 'async' : 'defer';

                                        // Initialization > (Length, Prototype)
                                        let length = isIterableObject ? LDKF.get.objectLength(object) : 0,
                                            prototype = LDKF.isConstructible(object) ? object.constructor.prototype : {};

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (state == 'async') {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (isIterableObject) {
                                                // Initialization > (Allow Call, Iterator, Iteration Count, Request)
                                                let allowCall = !1,
                                                    iterator = LDKF.$number(object) + 1,
                                                    iterationCount = 0,
                                                    request;

                                                // Function > Asynchronous
                                                (function async() {
                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (iterator) {
                                                        // Callback | (Update > Allow Call)
                                                        allowCall ? callback.call(object, iterationCount += 1) : allowCall = !0;

                                                        // Update > (Iterator, Request)
                                                        iterator -= 1;
                                                        request = LDKF.requestAnimationFrame(async)
                                                    }

                                                    else
                                                        // Cancel Animation Frame > Request
                                                        LDKF.cancelAnimationFrame(request)
                                                })()
                                            }

                                            else {
                                                // Initialization > (Asynchronous Request, Iterator, Iteration Count, Properties (Length))
                                                let asyncRequest,
                                                    iterator = -1,
                                                    iterationCount = 0,
                                                    props = [],
                                                    propsLength = 0;

                                                // LapysJS Development Kit Functions > Iterate Object
                                                LDKF.iterateObject(function(key, value, description) {
                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (!(key in prototype)) {
                                                        // Update > (Properties, Length)
                                                        LDKF.pushArray(props, {key: key, value: value, description: description});
                                                        length += 1
                                                    }
                                                }, object, !0, !1);

                                                // Update > Properties Length
                                                propsLength = props.length;

                                                // Function > Asynchronous
                                                (function async() {
                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (iterator < propsLength) {
                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (iterator != -1) {
                                                            // Initialization > (Property, Description, Key, Value)
                                                            let prop = props[iterator],
                                                                description = prop.description,
                                                                key = prop.key,
                                                                value = prop.value;

                                                            // Callback
                                                            callback.call(object, key, value, description, iterationCount += 1)
                                                        }

                                                        // Update > (Iterator, Asynchronous Request)
                                                        iterator += 1;
                                                        asyncRequest = LDKF.requestAnimationFrame(async)
                                                    }

                                                    else
                                                        // Cancel Animation Frame > Asynchronous Request
                                                        LDKF.cancelAnimationFrame(asyncRequest)
                                                })()
                                            }
                                        }

                                        else {
                                            // Initialization > Iteration Count
                                            let iterationCount = 0;

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (isIterableObject) {
                                                // Initialization > Iterator
                                                let iterator = LDKF.$number(object);

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Callback
                                                    callback.call(object, iterationCount += 1);

                                                    // Update > Iterator
                                                    iterator -= 1
                                                }
                                            }

                                            else
                                                // LapysJS Development Kit Functions > Iterate Object
                                                LDKF.iterateObject(function(key, value, description) {
                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (!(key in prototype)) {
                                                        // Callback
                                                        callback.call(object, key, value, description, iterationCount += 1);

                                                        // Update > Length
                                                        length += 1
                                                    }
                                                }, object, !0, !1)
                                        }

                                        // Return
                                        return length
                                    }

                                    // Return
                                    return null
                                },

                                // Writable
                                writable: !0
                            });

                            // Root
                            LDKF.objectDefineProperty(window, 'root', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function root() {
                                    // Return
                                    return LDKF.pow(arguments[0], 1 / arguments[1])
                                },

                                // Writable
                                writable: !0
                            });

                            // Run
                            LDKF.objectDefineProperty(window, 'run', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function run() {
                                    // Initialization > (Callback, Return Value)
                                    let callback = arguments[0],
                                        returnValue;

                                    // Logic > Error Handling > Update > Return Value
                                    if (LDKF.isFunction(callback))
                                        try { returnValue = callback() }
                                        catch (error) { returnValue = error }

                                    // Return
                                    return returnValue
                                },

                                // Writable
                                writable: !0
                            });

                            // Select
                            LDKF.objectDefineProperty(window, 'select', {
                                // Configurable
                                configurable: !0,

                                // Enumerable
                                enumerable: !0,

                                // Value
                                value: function select() {
                                    // Initialization > Element
                                    let element = arguments[0];

                                    /* Logic
                                            [if statement]
                                    */
                                    if (arguments.length) {
                                        // Error
                                        LDKF.isHtmlElement(element) || LDKF.error("'select'", 'argument', LDKF.debugMessage('Argument', ['must', 'a'], 'HTML element'));

                                        // LapysJS Development Kit Functions > Focus > Element
                                        LDKF.focusHtmlElement(element);

                                        // Initialization > (Selection, Range)
                                        let selection = LDKF.getSelectionDocument(),
                                            range = LDKF.createRangeDocument();

                                        // Range > Select Node Contents > Element
                                        LDKF.selectNodeContentsRange(range, element);

                                        // Selection
                                            // Remove All Ranges
                                            LDKF.removeAllRangesSelection(selection);

                                            // Add Range > Range
                                            LDKF.addRangeSelection(selection, range);

                                        /* Logic
                                                [if:else if statement]

                                            > Select > Element
                                        */
                                        if (LDKF.isHtmlInputElement(element))
                                            LDKF.selectHtmlInputElement(element);

                                        else if (LDKF.isHtmlTextareaElement(element))
                                            LDKF.selectHtmlTextareaElement(element);

                                        // Return
                                        return LDKF.isInputElement(element) ?
                                            (LDKF.isHtmlInputElement(element) ?
                                                LDKF.get.htmlInputElementValue(element) :
                                                LDKF.get.htmlTextareaElementValue(element)
                                            ) :
                                            LDKF.get.htmlElementInnerText(element)
                                    }

                                    // Error
                                    LDKF.error("'select'", 'argument', [1, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            // Sequence
                            LDKF.objectDefineProperty(window, 'sequence', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function sequence() {
                                    // Initialization > (String, Format)
                                    let string = arguments[0],
                                        format = arguments[1];

                                    // Error
                                    LDKF.isString(string) || LDKF.error("'sequence'", 'argument', LDKF.debugMessage(string, ['must', 'a'], 'string'));

                                    /* Logic
                                            [switch:case:default statement]
                                    */
                                    switch (format) {
                                        // Decode URI > (Update > String)
                                        case 'decode-uri': string = LDKF.decodeURI(string); break;

                                        // Decode URI Component > (Update > String)
                                        case 'decode-uri-component': string = LDKF.decodeURIComponent(string); break;

                                        // Encode > (Update > String)
                                        case 'encode': string = LDKF.escape(string); break;

                                        // Encode URI > (Update > String)
                                        case 'encode-uri': string = LDKF.encodeURI(string); break;

                                        // Encode URI Component > (Update > String)
                                        case 'encode-uri-component': string = LDKF.encodeURIComponent(string); break;

                                        // HTML
                                        case 'html':
                                            // Initialization > Element
                                            let element = LDKC.element;

                                            // Modification > Element > Inner HTML
                                            LDKF.set.elementInnerHTML(element, string);

                                            // Update > String
                                            string = LDKF.get.elementInnerHTML(element);

                                            // Modification > Element > Inner HTML
                                            LDKF.set.elementInnerHTML(element, '');
                                            break;

                                        // [Default]
                                        default:
                                            // Error
                                            LDKF.error("'sequence'", 'argument', LDKF.debugMessage('Valid sequences', 'only', ["'decode-uri'", "'decode-uri-component'", "'encode'", "'encode-uri'", "'encode-uri-component'", "'html'"]))
                                    }

                                    // Return
                                    return string
                                },

                                // Writable
                                writable: !0
                            });

                            /* Sleep
                                    --- NOTE ---
                                        #Lapys: Inspired from PHP.
                            */
                            LDKF.objectDefineProperty(window, 'sleep', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function sleep() {
                                    // Initialization > (Duration, (Current, Initial) Lapse, Iterators)
                                    let duration = arguments[0],
                                        currentLapse = 0,
                                        initialLapse = LDKF.performanceNow(),
                                        iterators = 0;

                                    // Error
                                    arguments.length || LDKF.error("'sleep'", 'argument', [1, 0]);
                                    LDKF.isNumber(duration) || LDKF.error("'sleep'", 'argument', 'The given duration must be a number');

                                    /* Loop
                                            [while statement]

                                            --- NOTE ---
                                                #Lapys: This is what causes JavaScript to `sleep`.

                                        > Update > Current Lapse
                                    */
                                    while (currentLapse - initialLapse < duration) currentLapse = LDKF.performanceNow();

                                    // Return
                                    return duration
                                },

                                // Writable
                                writable: !0
                            });

                            // Square Root
                            LDKF.objectDefineProperty(window, 'sqrt', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKF.sqrt,

                                // Writable
                                writable: !0
                            });

                            // String
                            LDKF.objectDefineProperty(window, 'str', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function String() {
                                    // Return
                                    return LDKF.$string.apply(LDKF, LDKF.toArray(arguments))
                                },

                                // Writable
                                writable: !0
                            });

                            /* Strict Input
                                    --- NOTE ---
                                        #Lapys: Prevent input-able HTML elements from
                                            containing a specified set of text values.
                            */
                            LDKF.objectDefineProperty(window, 'strictInput', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function strictInput() {
                                    // Initialization > (Input, Match, Callback, Is ((HTML) Input, Regular Expression), Strictly Watched Elements, Iterator, Length)
                                    let input = arguments[0],
                                        match = arguments[1],
                                        callback = arguments[2],
                                        isInputElement = LDKF.isInputElement(input),
                                        isHtmlInputElement = LDKF.isHtmlInputElement(input),
                                        isRegex = LDKF.isRegex(match),
                                        strictlyWatchedElements = LDK.tmp.objects.strictlyWatchedElements,
                                        iterator = 0,
                                        length = strictlyWatchedElements.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length > 1) {
                                        // Update > Callback
                                        (arguments.length > 2) || (callback = updateInputValue);
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        isInputElement || LDKF.error("'strictInput'", 'argument', LDKF.debugMessage("Input element given ('" + LDKF.string(input) + "')", 'must', ['an HTMLInputElement (<input>)', 'HTMLTextAreaElement (<textarea>)']));
                                        isRegex || LDKF.isString(match) || LDKF.error("'strictInput'", 'argument', LDKF.debugMessage("Match given ('" + LDKF.string(match) + "')", ['must', 'a'], ['regular expression', 'string']));
                                        LDKF.isFunction(callback) || LDKF.error("'strictInput'", 'argument', LDKF.debugMessage("Callback given ('" + LDKF.string(callback) + "')", ['must', 'a'], ['evaluation string', 'function']));

                                        // Initialization > (Strictly Watched Element, Has Own Callback, Call, (Get, Set) Value, Request)
                                        let strictlyWatchedElement = {callback: callback, input: input, match: match},
                                            hasOwnCallback = callback !== updateInputValue,
                                            call = hasOwnCallback ?
                                                function call(match, invalidMatch) { return callback.call(input, match, invalidMatch) } :
                                                function call(invalidMatch, index) { return updateInputValue.call(input, invalidMatch, index) },
                                            getValue = isHtmlInputElement ?
                                                function getValue(input) { return LDKF.get.htmlInputElementValue(input) } :
                                                function getValue(input) { return LDKF.get.htmlTextareaElementValue(input) },
                                            setValue = isHtmlInputElement ?
                                                function setValue(input) { return LDKF.set.htmlInputElementValue(input, arguments[1]) } :
                                                function setValue(input) { return LDKF.set.htmlTextareaElementValue(input, arguments[1]) },
                                            request;

                                        // Function
                                            /* Is Watched
                                                    --- NOTE ---
                                                        #Lapys: Is able to return two kinds of falsy values:
                                                            - `false` if the object searched for was not in the Strictly Watched Elements list.
                                                            - `null` if the Strictly Watched Elements list is empty.
                                            */
                                            function isWatched(object) {
                                                // Initialization > (Strictly Watched Elements, Iterator)
                                                let strictlyWatchedElements = LDK.tmp.objects.strictlyWatchedElements,
                                                    iterator = strictlyWatchedElements.length;

                                                // Logic
                                                if (iterator) {
                                                    // Loop
                                                    while (iterator) {
                                                        // Initialization > Strictly Watched Element
                                                        let strictlyWatchedElement = strictlyWatchedElements[iterator -= 1];

                                                        // Logic > Return
                                                        if (
                                                            LDKF.toFunctionString(strictlyWatchedElement.callback) == LDKF.toFunctionString(object.callback) &&
                                                            strictlyWatchedElement.input === object.input &&
                                                            (
                                                                isRegex ?
                                                                    (
                                                                        LDKF.get.regexFlags(strictlyWatchedElement.match) == LDKF.get.regexFlags(object.match) &&
                                                                        LDKF.get.regexSource(strictlyWatchedElement.match) == LDKF.get.regexSource(object.match)
                                                                    ) :
                                                                    strictlyWatchedElement.match == object.match
                                                            )
                                                        )
                                                            return !0
                                                    }

                                                    // Return
                                                    return !1
                                                }

                                                // Return
                                                return null
                                            }

                                            // Update Input Value
                                            function updateInputValue(invalidMatch, index) {
                                                // Initialization > (Iterator, Length, Value)
                                                let iterator = 0,
                                                    length = invalidMatch.length,
                                                    value = getValue(input);

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (index == value.length || !index) {
                                                    let formerValue = value;

                                                    /* Loop
                                                            Index Invalid Match.

                                                        > Update > Value
                                                    */
                                                    for (iterator; iterator < length; iterator += 1)
                                                        value = LDKF.replaceString(value, invalidMatch[iterator], '');

                                                    // Set Value > Input
                                                    setValue(input, value)
                                                }

                                                else {
                                                    // Initialization > Value (After, Before) Index
                                                    let valueAfterIndex = LDKF.sliceString(value, index),
                                                        valueBeforeIndex = LDKF.sliceString(value, 0, index);

                                                    /* Loop
                                                            Index Invalid Match.
                                                    */
                                                    for (iterator; iterator < length; iterator += 1) {
                                                        // Initialization > Invalid
                                                        let invalid = invalidMatch[iterator];

                                                        /* Logic
                                                                [if:else for statement]

                                                                --- NOTE ---
                                                                    #Lapys: `else...for` statements are not a thing, lol.

                                                            > Update > Value (After, Before) Index
                                                        */
                                                        if ((LDKF.matchString(valueAfterIndex, invalid) || []).length)
                                                            valueAfterIndex = LDKF.replaceString(valueAfterIndex, invalid, '');

                                                        else for (iterator; iterator < length; iterator += 1)
                                                            valueBeforeIndex = LDKF.replaceString(valueBeforeIndex, invalidMatch[iterator], '')
                                                    }

                                                    // Set Value > Input
                                                    setValue(input, valueBeforeIndex + valueAfterIndex)
                                                }
                                            }

                                        // Error
                                        isWatched(strictlyWatchedElement) && LDKF.error("'strictInput'", 'argument', 'Given element and match is already being watched');

                                        // Update > Strictly Watched Elements
                                        LDKF.pushArray(strictlyWatchedElements, strictlyWatchedElement);

                                        // Initialization > Former Value
                                        let formerValue = getValue(input);

                                        // Function > Watch
                                        (function watch() {
                                            // Initialization > Watched
                                            let watched = isWatched(strictlyWatchedElement);

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.isNull(watched) || !input || !watched)
                                                // Cancel Animation Frame > Request
                                                LDKF.cancelAnimationFrame(request);

                                            else {
                                                // Initialization > (Invalid Match, Value)
                                                let invalidMatch = [],
                                                    value = getValue(input);

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (isRegex)
                                                    /* Loop
                                                            [while statement]
                                                    */
                                                    while ((LDKF.matchString(value, match) || []).length) {
                                                        // Initialization > (Regular Expression, Iterator, Length)
                                                        let regexMatch = LDKF.matchString(value, match),
                                                            iterator = 0,
                                                            length = regexMatch.length;

                                                        /* Loop
                                                                Index Regular Expression Match.

                                                            > Update > Invalid Match
                                                        */
                                                        for (iterator = 0; iterator < length; iterator += 1)
                                                            LDKF.pushArray(invalidMatch, regexMatch[iterator]);

                                                        // Update > Value
                                                        value = LDKF.replaceString(value, match, '')
                                                    }

                                                else
                                                    /* Loop
                                                            [while statement]

                                                        > Update > (Invalid Match, Value)
                                                    */
                                                    while ((function() {
                                                        /* Initialization > (Iterator, Length)
                                                                --- NOTE ---
                                                                    #Lapys: Determine if Match is a substring of Value.
                                                        */
                                                        let iterator = 0,
                                                            length = value.length;

                                                        /* Loop
                                                                Iterate through Value.
                                                        */
                                                        for (iterator; iterator < length; iterator += 1) {
                                                            // Initialization > Character
                                                            let character = value[iterator];

                                                            // Logic > Return
                                                            if (
                                                                character == match ||
                                                                (function() {
                                                                    /* Initialization > Match (Iterator, Length)
                                                                            --- NOTE ---
                                                                                #Lapys: For multiple-character matches.
                                                                    */
                                                                    let matchIterator = 0,
                                                                        matchLength = match.length;

                                                                    /* Loop
                                                                            Iterate through Match.

                                                                        > Logic > Return
                                                                    */
                                                                    for (matchIterator; matchIterator < matchLength; matchIterator += 1)
                                                                        if (value[iterator + matchIterator] != match[matchIterator])
                                                                            return !1;

                                                                    // Return
                                                                    return !0
                                                                })()
                                                            )
                                                                return !0
                                                        }
                                                    })(value, match)) {
                                                        LDKF.pushArray(invalidMatch, match);
                                                        value = LDKF.replaceString(value, match, '')
                                                    }

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (hasOwnCallback) {
                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (formerValue != value) {
                                                        // Call
                                                        call(match, invalidMatch);

                                                        // Update > Former Value
                                                        formerValue = value
                                                    }
                                                }

                                                else
                                                    // Call
                                                    call(invalidMatch, LDKF.queryInputElementCaretPosition(input))

                                                // Update > Request
                                                request = LDKF.requestAnimationFrame(watch)
                                            }
                                        })()
                                    }

                                    else
                                        // Error
                                        LDKF.error("'strictInput'", 'argument', [2, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            /* Stringify
                                    --- WARN ---
                                        #Lapys: Be careful not to stringify some objects,
                                            like the global object: `window`.
                            */
                            LDKF.objectDefineProperty(window, 'stringify', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function stringify() {
                                    // Initialization > Object
                                    let object = arguments[0];

                                    /* Logic
                                            [if statement]
                                    */
                                    if (arguments.length) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.isArray(object) || LDKF.isObject(object)) {
                                            // Initialization > Keys
                                            let keys = [];

                                            // LapysJS Development Kit Functions > Iterate Object
                                            LDKF.iterateObject(function(key, value, description) {
                                                // Initialization > Configurable
                                                let configurable = description.configurable;

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (configurable)
                                                    try {
                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if ('value' in description)
                                                            // Modification > Object > [Key]
                                                            (function() {
                                                                // Initialization > Iterator
                                                                let iterator = keys.length;

                                                                // Loop > Logic > Return
                                                                while (iterator)
                                                                    if (keys[iterator -= 1] == key)
                                                                        return !1;

                                                                // Return
                                                                return !0
                                                            })() && LDKF.objectDefineProperty(object, key, {
                                                                // Configurable
                                                                configurable: configurable,

                                                                // Enumerable
                                                                enumerable: description.enumerable,

                                                                // Value
                                                                value: LDKF.string(description.value),

                                                                // Writable
                                                                writable: description.writable
                                                            });

                                                        else {
                                                            // Initialization > (Get, Set)
                                                            let get = description.get,
                                                                set = description.set;

                                                            // Modification > Object > [Key]
                                                            (get === LDK.tmp.objects.objectPrototypeLengthDescriptionGetter) || LDKF.objectDefineProperty(object, key, {
                                                                // Configurable
                                                                configurable: configurable,

                                                                // Enumerable
                                                                enumerable: description.enumerable,

                                                                /* Get
                                                                        --- NOTE ---
                                                                            #Lapys: Modify the getter to return a stringified version of its return value.
                                                                */
                                                                get: LDKF.isFunction(get) ? (LDKF.isNativeFunction(get) ? get : LDKF.$func(get.name, LDKF.get.functionParameters(get), 'return LDKF.string((' + LDKF.toFunctionString(get) + ').apply(this, arguments))')) : get,

                                                                /* Set
                                                                        --- NOTE ---
                                                                            #Lapys: Modify the setter to convert all arguments to string.
                                                                */
                                                                set: LDKF.isFunction(set) ? (LDKF.isNativeFunction(set) ? set : LDKF.$func(set.name, LDKF.get.functionParameters(set), 'for (let i = 0; i < arguments.length; i += 1) arguments[i] = LDKF.string(arguments[i]); return (' + LDKF.toFunctionString(set) + ').apply(this, arguments)')) : set
                                                            })
                                                        }
                                                    } catch (error) {
                                                        // Error
                                                        LDKF.error("Error in stringifying '" + object.constructor.name + "' object property")
                                                    }

                                                // Update > Keys
                                                LDKF.pushArray(keys, key)
                                            }, object, !0, !1)
                                        }

                                        // Return
                                        return object
                                    }

                                    // Return
                                    return null
                                },

                                // Writable
                                writable: !0
                            });

                            // Symbol
                            LDKF.objectDefineProperty(window, 'sym', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function Symbol() {
                                    // Return
                                    return LDKF.symbol(LDKF.$string.apply(LDKF, LDKF.toArray(arguments)))
                                },

                                // Writable
                                writable: !0
                            });

                            // Timeout
                            LDKF.objectDefineProperty(window, 'timeout', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function timeout() {
                                    // Initialization > Length
                                    let length = arguments.length;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length) {
                                        // Initialization > (Callback, Timeout)
                                        let callback = arguments[0],
                                            timeout = arguments[1];

                                        // Update > Callback
                                        LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                        // Error
                                        LDKF.isFunction(callback) || LDKF.error("'timeout'", 'argument', 'First argument must be a function');

                                        // Return
                                        return LDKF.setTimeout(callback, timeout)
                                    }

                                    else
                                        // Error
                                        LDKF.error("'timeout'", 'argument', [1, 0])
                                },

                                // Writable
                                writable: !0
                            });

                            // Write
                            LDKF.objectDefineProperty(window, 'write', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: function write() {
                                    // Initialization > Document Element
                                    let documentElement = LDKF.get.documentChildren(LDKO.$document)[0];

                                    // Error
                                    documentElement || LDKF.error("'write'", 'argument', 'Expected document to have at least one child element to write on');

                                    // Return
                                    return LDKF.writeHtmlElement(documentElement, arguments[0])
                                },

                                // Writable
                                writable: !0
                            });

                    /* Array Data
                            --- WARN ---
                                #Lapys: All array methods should be pluralistic or generalized.
                    */
                        // Add Element
                        LDKF.objectDefineProperty(currentPrototype, 'addElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function addElement() {
                                // Initialization > Array
                                let array = this;

                                // Update > Array
                                LDKF.$pushArray(array, LDKF.toArray(arguments));

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Add Element To Back
                        LDKF.objectDefineProperty(currentPrototype, 'addElementToBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function addElementToBack() {
                                // Initialization > (Arguments, Array)
                                let args = [0, 0],
                                    array = this;

                                // Update > (Arguments, Array)
                                LDKF.$pushArray(args, LDKF.toArray(arguments));
                                LDKF.$spliceArray(array, args);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Add Element To Front
                        LDKF.objectDefineProperty(currentPrototype, 'addElementToFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function addElementToFront() {
                                // Initialization > Array
                                let array = this;

                                // Update > Array
                                LDKF.$pushArray(array, LDKF.toArray(arguments));

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Build (Elements)
                                --- NOTE ---
                                    #Lapys: Update each element of an array
                                        using callbacks.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'build', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function build() {
                                // Initialization > (Array, Callbacks, Iterator, Length)
                                let array = this,
                                    callbacks = arguments,
                                    iterator = 0,
                                    length = callbacks.length;

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Callback
                                    let callback = callbacks[iterator];

                                    // Update > Callback
                                    LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error(["'build'", "'Array'"], 'argument', LDKF.debugMessage(callback, ['must', 'a'], ['evaluation string', 'function']))
                                }

                                // Initialization > Callback (Iterator, Length)
                                let callbackIterator = 0,
                                    callbackLength = callbacks.length;

                                // Update > Length
                                length = array.length;

                                // Loop > Loop > Update > Array
                                for (iterator = 0; iterator != length; iterator += 1)
                                    for (callbackIterator = 0; callbackIterator != callbackLength; callbackIterator += 1)
                                        array[iterator] = callbacks[callbackIterator].call(array, array[iterator]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Collate
                                --- NOTE ---
                                    #Lapys: Update a given value using all
                                        elements of an array.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'collate', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function collate() {
                                // Initialization > (Array, Callbacks, Data, Iterator, Length)
                                let array = this,
                                    callbacks = LDKF.sliceArray(LDKF.toArray(arguments), 1),
                                    data = arguments[0],
                                    iterator = 0,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (length != 1) {
                                        // Update > Length
                                        length = callbacks.length;

                                        /* Loop
                                                Index Callbacks.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Callback
                                            let callback = callbacks[iterator];

                                            // Update > Callback
                                            LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                            // Error
                                            LDKF.isFunction(callback) || LDKF.error(["'collate'", "'Array'"], 'argument', LDKF.debugMessage(callback, ['must', 'a'], ['evaluation string', 'function']))
                                        }

                                        // Initialization > Callback (Iterator, Length)
                                        let callbackIterator = 0,
                                            callbackLength = callbacks.length;

                                        // Update > Length
                                        length = array.length;

                                        // Loop > Loop > Update > Data
                                        for (iterator = 0; iterator != length; iterator += 1)
                                            for (callbackIterator = 0; callbackIterator != callbackLength; callbackIterator += 1)
                                                data = callbacks[callbackIterator].call(array, data, array[iterator])
                                    }

                                    // Return
                                    return data
                                }

                                else
                                    // Error
                                    LDKF.error(["'collate'", "'Array'"], 'argument', [1, 0]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Crush
                                --- NOTE ---
                                    #Lapys: Crush both sides of an array
                                        by a given number of elements.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'crush', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function crush() {
                                // Initialization > (Array, Length)
                                let array = this,
                                    length = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isSafeInteger(length)) {
                                        // Initialization > New Array
                                        let newArray = [];

                                        // Update > Array
                                        LDKF.crushArray(array);

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (length === 0 || length === -0)
                                            // Return
                                            return array;

                                        else {
                                            // Update > (Length, New Array)
                                            length = LDKF.abs(length);
                                            newArray = LDKF.sliceArray(LDKF.sliceArray(array, length), 0, -length)
                                        }

                                        // (Loop > Update > Array), (Update > Array)
                                        LDKF.spliceArray(array, 0, array.length);
                                        LDKF.$pushArray(array, newArray);

                                        // Return
                                        return array
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'crush'", "'Array'"], 'argument', LDKF.debugMessage(length, ['must', 'a'], 'safe integer'));

                                else
                                    // Error
                                    LDKF.error(["'crush'", "'Array'"], 'argument', [1, 0]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Compact
                                --- NOTE ---
                                    #Lapys: Remove a given number of elements
                                        from one side of the array.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'compact', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function compact() {
                                // Initialization > (Array, Length)
                                let array = this,
                                    length = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isSafeInteger(length)) {
                                        // Initialization > New Array
                                        let newArray = [];

                                        // Update > Array
                                        LDKF.crushArray(array);

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (length === 0 || length === -0)
                                            // Return
                                            return array;

                                        else if (length > 0)
                                            // Update > New Array
                                            newArray = LDKF.sliceArray(array, length);

                                        else
                                            // Update > New Array
                                            newArray = LDKF.sliceArray(array, 0, length);

                                        // (Loop > Update > Array), (Update > Array)
                                        LDKF.spliceArray(array, 0, array.length);
                                        LDKF.$pushArray(array, newArray);

                                        // Return
                                        return array
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'compact'", "'Array'"], 'argument', LDKF.debugMessage(length, ['must', 'a'], 'safe integer'));

                                else
                                    // Error
                                    LDKF.error(["'compact'", "'Array'"], 'argument', [1, 0]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Distinct
                                --- NOTE ---
                                    #Lapys: Return unique (single-occurring) items from
                                        a given array.

                                        Same as `Array.prototype.removeRepeatedElements`
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'distinct', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function distinct() {
                                // Initialization > (Array, Iterator, Repeated)
                                let array = this,
                                    iterator = array.length,
                                    repeated = LDKF.getReplicatedElementsFromArray(array);

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    /* Logic
                                            [if statement]
                                    */
                                    if ((function() {
                                        // Initialization > Iterator
                                        let iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (repeated[iterator -= 1] === item)
                                                return !0
                                    })()) {
                                        // Update > (Array, Iterator)
                                        LDKF.spliceArray(array, iterator, 1);
                                        (iterator > array.length) && (iterator = array.length)
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Fill
                                --- NOTE ---
                                    #Lapys: Change every element of an Array to specified data value.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'fill', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function fill() {
                                // Initialization > (Array, Data, Iterator, Length)
                                let array = this,
                                    data = arguments[0],
                                    iterator = array.length;

                                // Loop > Update > Array
                                while (iterator)
                                    array[iterator -= 1] = data;

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // First Element
                        LDKF.objectDefineProperty(currentPrototype, 'firstElement', tmpObject.arrayPrototypeFirstElementDescription = {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function firstElement() {
                                // Return
                                return this[0]
                            }
                        });
                            // Definition
                            LDKF.objectDefineProperty(LDKO.htmlAllCollectionProto, 'firstElement', tmpObject.arrayPrototypeFirstElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlAllCollectionProto, '$1', tmpObject.arrayPrototypeFirstElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlCollectionProto, 'firstElement', tmpObject.arrayPrototypeFirstElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlCollectionProto, '$1', tmpObject.arrayPrototypeFirstElementDescription);
                            LDKF.objectDefineProperty(LDKO.nodeListProto, 'firstElement', tmpObject.arrayPrototypeFirstElementDescription);
                            LDKF.objectDefineProperty(LDKO.nodeListProto, '$1', tmpObject.arrayPrototypeFirstElementDescription);

                        // Flatten
                        LDKF.objectDefineProperty(currentPrototype, 'flatten', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function flatten() {
                                // Initialization > (Array, Depth, Flattened Array, Iterator, Length)
                                let array = this,
                                    depth = arguments[0],
                                    flattenedArray = [],
                                    iterator = array.length,
                                    length = arguments.length;

                                // Error Handling > Update > Flattened Array
                                try { flattenedArray = new array.constructor }
                                catch (error) {}

                                // Update > Flattened Array
                                LDKF.$pushArray(flattenedArray, LDKF.crushArray(array));

                                // Error
                                length && (LDKF.isSafeInteger(depth) || LDKF.error(["'flatten'", "'Array'"], 'argument', LDKF.debugMessage(depth, ['must', 'a'], 'integer')));

                                /* Logic
                                        [if:else statement]
                                */
                                if (!length || (depth === 0 || depth > 0))
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length && depth === 0)
                                        // Return
                                        return array;

                                    else {
                                        // Initialization > (Constructor, Prototype)
                                        let constructor = array.constructor,
                                            prototype = constructor.prototype;

                                        // Function
                                            // Flatten
                                            function flatten(array) {
                                                // Initialization > (Flattened Array, Iterator, Length)
                                                let flattenedArray = [],
                                                    iterator = 0,
                                                    length = LDKF.get.objectLength(array);

                                                /* Loop
                                                        Index Array.
                                                */
                                                for (iterator; iterator < length; iterator += 1) {
                                                    // Initialization > Item
                                                    let item = array[iterator];

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (isLikeArray(item)) {
                                                        // Initialization > Item (Iterator, Length)
                                                        let itemIterator = 0,
                                                            itemLength = LDKF.get.objectLength(item);

                                                        /* Loop
                                                                Index Item.

                                                            > Update > Flattened Array
                                                        */
                                                        for (itemIterator; itemIterator < itemLength; itemIterator += 1)
                                                            LDKF.pushArray(flattenedArray, item[itemIterator])
                                                    }

                                                    else
                                                        // Update > Flattened Array
                                                        LDKF.pushArray(flattenedArray, item)
                                                }

                                                // Return
                                                return flattenedArray
                                            }

                                            // Is Like Array
                                            function isLikeArray(object) {
                                                // Return
                                                return object.constructor === constructor &&
                                                    object.constructor.prototype === prototype
                                            }

                                        /* Loop
                                                [while statement]

                                            > Update > (Flattened Array, Depth)
                                        */
                                        while (
                                            length ? depth : !0 &&
                                            (function() {
                                                // Update > Iterator
                                                iterator = flattenedArray.length;

                                                // Loop > Logic > Return
                                                while (iterator)
                                                    if (isLikeArray(flattenedArray[iterator -= 1]))
                                                        return !0
                                            })()
                                        ) {
                                            flattenedArray = flatten(flattenedArray);
                                            depth -= 1
                                        }
                                    }

                                else {
                                    // Initialization > Constructor
                                    let constructor = flattenedArray.constructor;

                                    /* Loop
                                            [while statement]

                                        > Update > (Flattened Array, Depth)
                                    */
                                    while (depth) {
                                        // Initialization > Array
                                        let array = [];

                                        // Error Handling > Update > Array
                                        try { array = new constructor }
                                        catch (error) {}

                                        // Update > ((Flattened) Array, Depth)
                                        array[0] = flattenedArray;
                                        flattenedArray = array;
                                        depth += 1
                                    }
                                }

                                // (Loop > Update > Array), (Update > Array)
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, flattenedArray);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Free
                        LDKF.objectDefineProperty(currentPrototype, 'free', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function free() {
                                // Initialization > Array
                                let array = this;

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Frequencies
                        LDKF.objectDefineProperty(currentPrototype, 'frequency', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function frequency() {
                                // Return
                                return LDKF.getFrequenciesFromArray(this)
                            },

                            // Set
                            set: function setFrequency() { return LDKF.objectDefineProperty(this, 'frequency', {configurable: !0, enumerable: !0, value: arguments[0], writable: !0}) }
                        });

                        // Get Duplicated Elements
                        LDKF.objectDefineProperty(currentPrototype, 'getDuplicatedElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getDuplicatedElements() {
                                // Return
                                return LDKF.getReplicatedElementsFromArray(this)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Elements of Type
                        LDKF.objectDefineProperty(currentPrototype, 'getElementsOfType', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getElementsOfType() {
                                // Return
                                return LDKF.getElementsOfTypeFromArray(this, LDKF.toArray(arguments))
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Falsy Elements
                        LDKF.objectDefineProperty(currentPrototype, 'getFalsyElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getFalsyElements() {
                                // Return
                                return LDKF.getFalsyElementsFromArray(this)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Highest Occurring Elements
                        LDKF.objectDefineProperty(currentPrototype, 'getHighestOccurringElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getHighestOccurringElements() {
                                // Return
                                return LDKF.getHighestOccurringElementsFromArray(this)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Lowest Occurring Elements
                        LDKF.objectDefineProperty(currentPrototype, 'getLowestOccurringElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getLowestOccurringElements() {
                                // Return
                                return LDKF.getLowestOccurringElementsFromArray(this)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Repeated Elements
                        LDKF.objectDefineProperty(currentPrototype, 'getRepeatedElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getRepeatedElements() {
                                // Return
                                return LDKF.getReplicatedElementsFromArray(this)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Truthy Elements
                        LDKF.objectDefineProperty(currentPrototype, 'getTruthyElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getTruthyElements() {
                                // Return
                                return LDKF.getTruthyElementsFromArray(this)
                            },

                            // Writable
                            writable: !0
                        });

                        // Has Element
                        LDKF.objectDefineProperty(currentPrototype, 'hasElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function hasElement() {
                                // Initialization > (Array, Data, Iterator, Length)
                                let array = this,
                                    data = arguments[0],
                                    iterator = array.length,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length == 1) {
                                    // Loop > Logic > Return
                                    while (iterator)
                                        if (data === array[iterator -= 1])
                                            return !0;
                                }

                                else if (length > 1) {
                                    // Update > Data
                                    data = arguments;

                                    // Initialization > Has Element
                                    let hasElement = [];

                                    // Modification > Has Element > Length
                                    hasElement.length = length = data.length;

                                    /* Loop
                                            [while statement]
                                    */
                                    while (length) {
                                        // Initialization > Datum
                                        let datum = data[length -= 1];

                                        // Update > Iterator
                                        iterator = array.length;

                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator)
                                            /* Logic
                                                    [if statement]
                                            */
                                            if (datum === array[iterator -= 1]) {
                                                // Update > Has Element
                                                hasElement[length] = !0;

                                                // Break
                                                break
                                            }
                                    }

                                    // Return
                                    return (function() {
                                        // Update > Iterator
                                        iterator = hasElement.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (!hasElement[iterator -= 1])
                                                return !1;

                                        // Return
                                        return !0
                                    })()
                                }

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Indistinct
                        LDKF.objectDefineProperty(currentPrototype, 'indistinct', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function indistinct() {
                                // Initialization > (Array, Iterator, Repeated)
                                let array = this,
                                    iterator = array.length,
                                    repeated = LDKF.getReplicatedElementsFromArray(array);

                                /* Loop
                                        Index Array.
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    /* Logic
                                            [if statement]

                                        > Update > (Array, Iterator)
                                    */
                                    if (!(function() {
                                        // Initialization > Iterator
                                        let iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === repeated[iterator -= 1])
                                                return !0
                                    })()) {
                                        LDKF.spliceArray(array, iterator, 1);
                                        iterator += 1
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Last Element
                        LDKF.objectDefineProperty(currentPrototype, 'lastElement', tmpObject.arrayPrototypeLastElementDescription = {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function lastElement() {
                                // Return
                                return this[LDKF.toArray(this).length - 1]
                            }
                        });
                            // Definition
                            LDKF.objectDefineProperty(LDKO.htmlAllCollectionProto, 'lastElement', tmpObject.arrayPrototypeLastElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlAllCollectionProto, '$n', tmpObject.arrayPrototypeLastElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlCollectionProto, 'lastElement', tmpObject.arrayPrototypeLastElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlCollectionProto, '$n', tmpObject.arrayPrototypeLastElementDescription);
                            LDKF.objectDefineProperty(LDKO.nodeListProto, 'lastElement', tmpObject.arrayPrototypeLastElementDescription);
                            LDKF.objectDefineProperty(LDKO.nodeListProto, '$n', tmpObject.arrayPrototypeLastElementDescription);

                        /* Mode
                                --- NOTE ---
                                    #Lapys: Same as `Array.prototype.getHighestOccurringElements`.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'mode', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function mode() {
                                // Return
                                return LDKF.getHighestOccurringElementsFromArray(this)
                            },

                            // Set
                            set: function setMode() { return LDKF.objectDefineProperty(this, 'mode', {configurable: !0, enumerable: !0, value: arguments[0], writable: !0}) }
                        });

                        /* Pad
                                --- NOTE ---
                                    #Lapys: Expand an array from one end
                                        of the array.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'pad', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function pad() {
                                // Initialization > (Array, Length)
                                let array = this,
                                    length = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isSafeInteger(length)) {
                                        // Initialization > New Array
                                        let newArray = [];

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (length === 0 || length === -0)
                                            // Return
                                            return array;

                                        else if (length > 0)
                                            // Update > Array
                                            LDKF.$spliceArray(array, new LDKF.array(length + 2));

                                        else
                                            // Update > Array
                                            LDKF.$pushArray(array, LDKF.array(-length));

                                        // Return
                                        return array
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'pad'", "'Array'"], 'argument', LDKF.debugMessage(length, ['must', 'a'], 'safe integer'));

                                else
                                    // Error
                                    LDKF.error(["'pad'", "'Array'"], 'argument', [1, 0]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Random Element
                        LDKF.objectDefineProperty(currentPrototype, 'randomElement', tmpObject.arrayPrototypeRandomElementDescription = {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function randomElement() {
                                // Return
                                return this[LDKF.numberParseInt(LDKF.mathRandom() * LDKF.toArray(this).length)]
                            },

                            // Set
                            set: function setRandomElement() { return LDKF.objectDefineProperty(this, 'randomElement', {configurable: !0, enumerable: !0, value: arguments[0], writable: !0}) }
                        });
                            // Definition
                            LDKF.objectDefineProperty(LDKO.htmlAllCollectionProto, 'randomElement', tmpObject.arrayPrototypeRandomElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlAllCollectionProto, '$r', tmpObject.arrayPrototypeRandomElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlCollectionProto, 'randomElement', tmpObject.arrayPrototypeRandomElementDescription);
                            LDKF.objectDefineProperty(LDKO.htmlCollectionProto, '$r', tmpObject.arrayPrototypeRandomElementDescription);
                            LDKF.objectDefineProperty(LDKO.nodeListProto, 'randomElement', tmpObject.arrayPrototypeRandomElementDescription);
                            LDKF.objectDefineProperty(LDKO.nodeListProto, '$r', tmpObject.arrayPrototypeRandomElementDescription);

                        // Randomize
                        LDKF.objectDefineProperty(currentPrototype, 'randomize', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function randomize() {
                                // Initialization > (Array, Iterator, Randomized Array)
                                let array = this,
                                    $array = LDKF.cloneObject(array),
                                    iterator = array.length,
                                    randomizedArray = [];

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Random Index
                                    let randomIndex = LDKF.numberParseInt(LDKF.mathRandom() * $array.length);

                                    // Update > ((Randomized) Array, Iterator)
                                    LDKF.pushArray(randomizedArray, $array[randomIndex]);
                                    LDKF.spliceArray($array, randomIndex, 1);
                                    iterator -= 1
                                }

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, randomizedArray);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Duplicated Element
                        LDKF.objectDefineProperty(currentPrototype, 'removeDuplicatedElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeDuplicatedElement() {
                                // Initialization > (Array, Clone, Occurrences)
                                let array = this,
                                    clone = LDKF.arrayFrom(array),
                                    occurrences = LDKF.getFrequenciesFromArray(clone);

                                /* Logic
                                        [if statement]
                                */
                                if (occurrences.length) {
                                    // Initialization > Duplicate
                                    let duplicate = occurrences[0].item;

                                    // Update > Clone
                                    LDKF.spliceArray(clone, LDKF.indexOfArray(array, duplicate), 1);

                                    // Initialization > Index
                                    let index = LDKF.indexOfArray(clone, duplicate);

                                    // Update > Array
                                    (index == -1) || LDKF.spliceArray(array, index + 1, 1)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Duplicated Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeDuplicatedElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeDuplicatedElementFromBack() {
                                // Initialization > (Array, Clone, Occurrences)
                                let array = this,
                                    clone = LDKF.arrayFrom(array),
                                    occurrences = LDKF.getFrequenciesFromArray(clone);

                                /* Logic
                                        [if statement]
                                */
                                if (occurrences.length) {
                                    // Initialization > Duplicate
                                    let duplicate = occurrences[0].item;

                                    // Update > Clone
                                    LDKF.spliceArray(clone, LDKF.indexOfArray(array, duplicate), 1);

                                    // Initialization > Index
                                    let index = LDKF.indexOfArray(clone, duplicate);

                                    // Update > Array
                                    (index == -1) || LDKF.spliceArray(array, index + 1, 1)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Duplicated Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeDuplicatedElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeDuplicatedElementFromFront() {
                                // Initialization > (Array, Clone, Occurrences)
                                let array = this,
                                    clone = LDKF.arrayFrom(array),
                                    occurrences = LDKF.getFrequenciesFromArray(clone);

                                /* Logic
                                        [if statement]
                                */
                                if (occurrences.length) {
                                    // Initialization > Duplicate
                                    let duplicate = occurrences[0].item;

                                    // Update > Clone
                                    LDKF.spliceArray(clone, LDKF.lastIndexOfArray(array, duplicate), 1);

                                    // Initialization > Index
                                    let index = LDKF.lastIndexOfArray(clone, duplicate);

                                    // Update > Array
                                    (index == -1) || LDKF.spliceArray(array, -(index + 1), 1)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Duplicated Elements
                        LDKF.objectDefineProperty(currentPrototype, 'removeDuplicatedElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeDuplicatedElements() {
                                // Initialization > (Array, Occurrences, Iterator, Duplicated)
                                let array = this,
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = occurrences.length,
                                    duplicated = [];

                                // Loop > Update > Duplicated
                                while (iterator)
                                    LDKF.spliceArray(duplicated, 0, 0, occurrences[iterator -= 1].item);

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, duplicated);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Duplicated Elements From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeDuplicatedElementsFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeDuplicatedElementsFromBack() {
                                // Initialization > (Array, Occurrences, Iterator, Duplicated)
                                let array = this,
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = occurrences.length,
                                    duplicated = [];

                                // Loop > Update > Duplicated
                                while (iterator)
                                    LDKF.spliceArray(duplicated, 0, 0, occurrences[iterator -= 1].item);

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, duplicated);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Duplicated Elements From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeDuplicatedElementsFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeDuplicatedElementsFromFront() {
                                // Initialization > (Array, Iterator, Duplicated)
                                let array = this,
                                    iterator = array.length,
                                    duplicated = [];

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    // Update > Duplicated
                                    (function() {
                                        // Initialization > Iterator
                                        let iterator = duplicated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (duplicated[iterator -= 1] === item)
                                                return !0
                                    })() || LDKF.spliceArray(duplicated, 0, 0, item);
                                }

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, duplicated);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Element
                        LDKF.objectDefineProperty(currentPrototype, 'removeElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElement() {
                                // Initialization > (Array, Item)
                                let array = this,
                                    item = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Index
                                    let index = LDKF.indexOfArray(array, item);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (index == -1)
                                        // Return
                                        return array;

                                    else {
                                        // Update > Array
                                        LDKF.spliceArray(array, index, 1);

                                        // Return
                                        return array
                                    }
                                }

                                else
                                    // Return
                                    return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElementFromBack() {
                                // Initialization > (Array, Item)
                                let array = this,
                                    item = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Index
                                    let index = LDKF.indexOfArray(array, item);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (index == -1)
                                        // Return
                                        return array;

                                    else {
                                        // Update > Array
                                        LDKF.spliceArray(array, index, 1);

                                        // Return
                                        return array
                                    }
                                }

                                else
                                    // Return
                                    return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElementFromFront() {
                                // Initialization > (Array, Item)
                                let array = this,
                                    item = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Index
                                    let index = LDKF.lastIndexOfArray(array, item);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (index == -1)
                                        // Return
                                        return array;

                                    else {
                                        // Update > Array
                                        LDKF.spliceArray(array, index, 1);

                                        // Return
                                        return array
                                    }
                                }

                                else
                                    // Return
                                    return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Element of Type
                        LDKF.objectDefineProperty(currentPrototype, 'removeElementOfType', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElementOfType() {
                                // Initialization > (Array, Iterator, Length, Types)
                                let array = this,
                                    iterator = 0,
                                    length = array.length,
                                    types = LDKF.getElementsOfTypeFromArray(array, LDKF.toArray(arguments), 'removeElementOfType');

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Item
                                    let item = array[iterator];

                                    /* Logic
                                            [if statement]
                                    */
                                    if ((function() {
                                        // Initialization > Iterator
                                        let iterator = types.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === types[iterator -= 1])
                                                return !0
                                    })()) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Element of Type From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeElementOfTypeFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElementOfTypeFromBack() {
                                // Initialization > (Array, Iterator, Length, Types)
                                let array = this,
                                    iterator = 0,
                                    length = array.length,
                                    types = LDKF.getElementsOfTypeFromArray(array, LDKF.toArray(arguments), 'removeElementOfType');

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Item
                                    let item = array[iterator];

                                    /* Logic
                                            [if statement]
                                    */
                                    if ((function() {
                                        // Initialization > Iterator
                                        let iterator = types.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === types[iterator -= 1])
                                                return !0
                                    })()) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Element of Type From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeElementOfTypeFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElementOfTypeFromFront() {
                                // Initialization > (Array, Iterator, Types)
                                let array = this,
                                    iterator = array.length,
                                    types = LDKF.getElementsOfTypeFromArray(array, LDKF.toArray(arguments), 'removeElementOfType');

                                /* Loop
                                        Index Array.
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    /* Logic
                                            [if statement]
                                    */
                                    if ((function() {
                                        // Initialization > Iterator
                                        let iterator = types.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === types[iterator -= 1])
                                                return !0
                                    })()) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Elements
                        LDKF.objectDefineProperty(currentPrototype, 'removeElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElements() {
                                // Initialization > (Array, Arguments, Filtered)
                                let array = this,
                                    args = LDKF.toArray(arguments),
                                    filtered = LDKF.filterArray(array, function(item) { return LDKF.indexOfArray(args, item) == -1 });

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, filtered);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Elements of Type
                        LDKF.objectDefineProperty(currentPrototype, 'removeElementsOfType', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeElementsOfType() {
                                // Initialization > (Array, Iterator, Types)
                                let array = this,
                                    iterator = array.length,
                                    types = LDKF.getElementsOfTypeFromArray(array, LDKF.toArray(arguments), 'removeElementOfType');

                                /* Loop
                                        Index Array.
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    /* Logic
                                            [if statement]
                                    */
                                    if ((function() {
                                        // Initialization > Iterator
                                        let iterator = types.length;

                                        /* Loop
                                                Index Types.
                                        */
                                        while (iterator)
                                            /* Logic
                                                    [if statement]
                                            */
                                            if (item === types[iterator -= 1]) {
                                                // Update > Types
                                                LDKF.spliceArray(types, iterator, 1);

                                                // Return
                                                return !0
                                            }
                                    })()) {
                                        // Update > (Array, Iterator)
                                        LDKF.spliceArray(array, iterator, 1);
                                        iterator += 1
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Falsy Element
                        LDKF.objectDefineProperty(currentPrototype, 'removeFalsyElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeFalsyElement() {
                                // Initialization > (Array, Iterator, Length)
                                let array = this,
                                    iterator = 0,
                                    length = array.length;

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1)
                                    /* Logic
                                            [if statement]
                                    */
                                    if (!array[iterator]) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Falsy Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeFalsyElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeFalsyElementFromBack() {
                                // Initialization > (Array, Iterator, Length)
                                let array = this,
                                    iterator = 0,
                                    length = array.length;

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1)
                                    /* Logic
                                            [if statement]
                                    */
                                    if (!array[iterator]) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Falsy Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeFalsyElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeFalsyElementFromFront() {
                                // Initialization > (Array, Iterator)
                                let array = this,
                                    iterator = array.length;

                                /* Loop
                                        Index Array.
                                */
                                while (iterator)
                                    /* Logic
                                            [if statement]
                                    */
                                    if (!array[iterator -= 1]) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Falsy Elements
                        LDKF.objectDefineProperty(currentPrototype, 'removeFalsyElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeFalsyElements() {
                                // Initialization > (Array, Filtered)
                                let array = this,
                                    filtered = LDKF.filterArray(array, LDKO.boolean);

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, filtered);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Repeated Element
                        LDKF.objectDefineProperty(currentPrototype, 'removeRepeatedElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeRepeatedElement() {
                                // Initialization > (Array, Occurrences, Iterator)
                                let array = this,
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = occurrences.length;

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > Common Item
                                    let commonItem = (function() {
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Occurrence
                                            let occurrence = occurrences[iterator -= 1];

                                            // Logic > Return
                                            if (occurrence.occurrence != 1)
                                                return occurrence.item;
                                        }

                                        // Return
                                        return tmp
                                    })();

                                    // Update > Array
                                    (commonItem === tmp) || LDKF.spliceArray(array, LDKF.indexOfArray(array, commonItem), 1)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Repeated Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeRepeatedElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeRepeatedElementFromBack() {
                                // Initialization > (Array, Occurrences, Iterator)
                                let array = this,
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = occurrences.length;

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > Common Item
                                    let commonItem = (function() {
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Occurrence
                                            let occurrence = occurrences[iterator -= 1];

                                            // Logic > Return
                                            if (occurrence.occurrence != 1)
                                                return occurrence.item;
                                        }

                                        // Return
                                        return tmp
                                    })();

                                    // Update > Array
                                    (commonItem === tmp) || LDKF.spliceArray(array, LDKF.indexOfArray(array, commonItem), 1)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Repeated Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeRepeatedElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeRepeatedElementFromFront() {
                                // Initialization > (Array, Occurrences, Iterator)
                                let array = this,
                                    occurrences = LDKF.getFrequenciesFromArray(array),
                                    iterator = occurrences.length;

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > Common Item
                                    let commonItem = (function() {
                                        /* Loop
                                                [while statement]
                                        */
                                        while (iterator) {
                                            // Initialization > Occurrence
                                            let occurrence = occurrences[iterator -= 1];

                                            // Logic > Return
                                            if (occurrence.occurrence != 1)
                                                return occurrence.item;
                                        }

                                        // Return
                                        return tmp
                                    })();

                                    // Update > Array
                                    (commonItem === tmp) || LDKF.spliceArray(array, LDKF.lastIndexOfArray(array, commonItem), 1)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Repeated Elements
                        LDKF.objectDefineProperty(currentPrototype, 'removeRepeatedElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeRepeatedElements() {
                                // Initialization > (Array, Iterator, Repeated)
                                let array = this,
                                    iterator = array.length,
                                    repeated = LDKF.getReplicatedElementsFromArray(array);

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Initialization > Item
                                    let item = array[iterator -= 1];

                                    /* Logic
                                            [if statement]
                                    */
                                    if ((function() {
                                        // Initialization > Iterator
                                        let iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (repeated[iterator -= 1] === item)
                                                return !0
                                    })()) {
                                        // Update > (Array, Iterator)
                                        LDKF.spliceArray(array, iterator, 1);
                                        (iterator > array.length) && (iterator = array.length)
                                    }
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Truthy Element
                        LDKF.objectDefineProperty(currentPrototype, 'removeTruthyElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeTruthyElement() {
                                // Initialization > (Array, Iterator, Length)
                                let array = this,
                                    iterator = 0,
                                    length = array.length;

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1)
                                    /* Logic
                                            [if statement]
                                    */
                                    if (array[iterator]) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Truthy Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'removeTruthyElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeTruthyElementFromBack() {
                                // Initialization > (Array, Iterator, Length)
                                let array = this,
                                    iterator = 0,
                                    length = array.length;

                                /* Loop
                                        Index Array.
                                */
                                for (iterator; iterator != length; iterator += 1)
                                    /* Logic
                                            [if statement]
                                    */
                                    if (array[iterator]) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Truthy Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'removeTruthyElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeTruthyElementFromFront() {
                                // Initialization > (Array, Iterator)
                                let array = this,
                                    iterator = array.length;

                                /* Loop
                                        Index Array.
                                */
                                while (iterator)
                                    /* Logic
                                            [if statement]
                                    */
                                    if (array[iterator -= 1]) {
                                        // Update > Array
                                        LDKF.spliceArray(array, iterator, 1);

                                        // Return
                                        return array
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Remove Truthy Elements
                        LDKF.objectDefineProperty(currentPrototype, 'removeTruthyElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeTruthyElements() {
                                // Initialization > (Array, Filtered)
                                let array = this,
                                    filtered = LDKF.filterArray(array, function(item) { return !item });

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, filtered);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Repeat
                        LDKF.objectDefineProperty(currentPrototype, 'repeat', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function repeat() {
                                // Initialization > (Array, Length)
                                let array = this,
                                    length = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isSafeInteger(length)) {
                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (length === 0 || length === -0)
                                            // Update > Array
                                            LDKF.spliceArray(array, 0, array.length);

                                        else if (length > 0) {
                                            // Initialization > Copy
                                            let copy = LDKF.arrayFrom(array);

                                            // Update > Length
                                            length -= 1;

                                            /* Loop
                                                    Iterate through Length.

                                                > Update > (Array, Length)
                                            */
                                            while (length) {
                                                LDKF.$pushArray(array, copy);
                                                length -= 1
                                            }
                                        }

                                        // Return
                                        return array
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'repeat'", "'Array'"], 'argument', LDKF.debugMessage(length, ['must', 'a'], 'safe integer'));

                                else
                                    // Error
                                    LDKF.error(["'repeat'", "'Array'"], 'argument', [1, 0]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Duplicated Element
                        LDKF.objectDefineProperty(currentPrototype, 'replaceDuplicatedElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceDuplicatedElement() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    duplicates = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = duplicates.length,
                                    replacement = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > (Index, Data)
                                    let index = LDKF.indexOfArray(array, duplicates[0]),
                                        data = array[index];

                                    // Update > Array
                                    array[index] = tmp;

                                    // Update > Array
                                    LDKF.replaceElementArray.call('replaceDuplicatedElement', array, function(item) {
                                        // Return
                                        return (function() {
                                            // Update > Iterator
                                            iterator = duplicates.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item === duplicates[iterator -= 1])
                                                    return !0
                                        })()
                                    }, replacement);

                                    // Update > Array
                                    array[index] = data
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Duplicated Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceDuplicatedElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceDuplicatedElementFromBack() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    duplicates = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = duplicates.length,
                                    replacement = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > (Index, Data)
                                    let index = LDKF.indexOfArray(array, duplicates[0]),
                                        data = array[index];

                                    // Update > Array
                                    array[index] = tmp;

                                    // Update > Array
                                    LDKF.replaceElementArray.call('replaceDuplicatedElementFromBack', array, function(item) {
                                        // Return
                                        return (function() {
                                            // Update > Iterator
                                            iterator = duplicates.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item === duplicates[iterator -= 1])
                                                    return !0
                                        })()
                                    }, replacement);

                                    // Update > Array
                                    array[index] = data
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Duplicated Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceDuplicatedElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceDuplicatedElementFromFront() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    duplicates = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = duplicates.length,
                                    replacement = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Update > Array
                                    LDKF.reverseArray(array);

                                    // Initialization > (Index, Data)
                                    let index = LDKF.indexOfArray(array, duplicates[0]),
                                        data = array[index];

                                    // Update > Array
                                    array[index] = tmp;

                                    // Update > Array
                                    LDKF.replaceElementArray.call('replaceDuplicatedElementFromFront', array, function(item) {
                                        // Return
                                        return (function() {
                                            // Update > Iterator
                                            iterator = duplicates.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item === duplicates[iterator -= 1])
                                                    return !0
                                        })()
                                    }, replacement);

                                    // Update > Array
                                    array[index] = data;

                                    // Update > Array
                                    LDKF.reverseArray(array)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Duplicated Elements
                        LDKF.objectDefineProperty(currentPrototype, 'replaceDuplicatedElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceDuplicatedElements() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    duplicates = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = duplicates.length,
                                    replacement = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > (Index, Data)
                                    let index = LDKF.indexOfArray(array, duplicates[0]),
                                        data = array[index];

                                    // Update > Array
                                    array[index] = tmp;

                                    // Update > Array
                                    LDKF.replaceElementsArray.call('replaceDuplicatedElements', array, function(item) {
                                        // Return
                                        return (function() {
                                            // Update > Iterator
                                            iterator = duplicates.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item === duplicates[iterator -= 1])
                                                    return !0
                                        })()
                                    }, replacement);

                                    // Update > Array
                                    array[index] = data
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Duplicated Elements From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceDuplicatedElementsFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceDuplicatedElementsFromBack() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    duplicates = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = duplicates.length,
                                    replacement = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > (Index, Data)
                                    let index = LDKF.indexOfArray(array, duplicates[0]),
                                        data = array[index];

                                    // Update > Array
                                    array[index] = tmp;

                                    // Update > Array
                                    LDKF.replaceElementsArray.call('replaceDuplicatedElementsFromBack', array, function(item) {
                                        // Return
                                        return (function() {
                                            // Update > Iterator
                                            iterator = duplicates.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item === duplicates[iterator -= 1])
                                                    return !0
                                        })()
                                    }, replacement);

                                    // Update > Array
                                    array[index] = data
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Duplicated Elements From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceDuplicatedElementsFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceDuplicatedElementsFromFront() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    duplicates = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = duplicates.length,
                                    replacement = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    // Initialization > (Index, Data)
                                    let index = LDKF.lastIndexOfArray(array, duplicates[0]),
                                        data = array[index];

                                    // Update > Array
                                    array[index] = tmp;

                                    // Update > Array
                                    LDKF.replaceElementsArray.call('replaceDuplicatedElementsFromFront', array, function(item) {
                                        // Return
                                        return (function() {
                                            // Update > Iterator
                                            iterator = duplicates.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (item === duplicates[iterator -= 1])
                                                    return !0
                                        })()
                                    }, replacement);

                                    // Update > Array
                                    array[index] = data
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Element
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElement() {
                                // Initialization > Arguments
                                let args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, this);

                                // Return
                                return LDKF.replaceElementArray.apply('replaceElement', args)
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElementFromBack() {
                                // Initialization > Arguments
                                let args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, this);

                                // Return
                                return LDKF.replaceElementArray.apply('replaceElementFromBack', args)
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElementFromFront() {
                                // Initialization > Arguments
                                let args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, this);

                                // Return
                                return LDKF.replaceElementFromFrontArray.apply('replaceElementFromFront', args)
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Element of Type
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElementOfType', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElementOfType() {
                                // Initialization > (Array, Match, Type(s), Replacement, Iterator, Length)
                                let array = this,
                                    match = !1,
                                    type = LDKF.sliceArray(LDKF.toArray(arguments), 0, -1),
                                    types = LDKC.valueTypes,
                                    replacement = arguments[arguments.length - 1],
                                    iterator = 0,
                                    length = type.length;

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length)
                                    /* Loop
                                            Index Type.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Type
                                        let $type = LDKF.string(type[iterator]);

                                        // Error
                                        (function() {
                                            // Initialization > Iterator
                                            let iterator = types.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if ($type === types[iterator -= 1])
                                                    return !0
                                        })() || LDKF.error(["'replaceElementOfType'", "'Array'"], 'argument', LDKF.debugMessage("'" + $type + "'", ['must', 'a'], 'valid data type'));

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (match)
                                            // Return
                                            return array;

                                        else
                                            // Update > Array
                                            LDKF.replaceElementArray.call('replaceElementOfType', array, function(item) { return match = typeof item == $type }, replacement)
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Element of Type From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElementOfTypeFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElementOfTypeFromBack() {
                                // Initialization > (Array, Match, Type(s), Replacement, Iterator, Length)
                                let array = this,
                                    match = !1,
                                    type = LDKF.sliceArray(LDKF.toArray(arguments), 0, -1),
                                    types = LDKC.valueTypes,
                                    replacement = arguments[arguments.length - 1],
                                    iterator = 0,
                                    length = type.length;

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length)
                                    /* Loop
                                            Index Type.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Type
                                        let $type = LDKF.string(type[iterator]);

                                        // Error
                                        (function() {
                                            // Initialization > Iterator
                                            let iterator = types.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if ($type === types[iterator -= 1])
                                                    return !0
                                        })() || LDKF.error(["'replaceElementOfTypeFromBack'", "'Array'"], 'argument', LDKF.debugMessage("'" + $type + "'", ['must', 'a'], 'valid data type'));

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (match)
                                            // Return
                                            return array;

                                        else
                                            // Update > Array
                                            LDKF.replaceElementArray.call('replaceElementOfTypeFromBack', array, function(item) { return match = typeof item == $type }, replacement)
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Element of Type From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElementOfTypeFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElementOfTypeFromFront() {
                                // Initialization > (Array, Match, Type(s), Replacement, Iterator, Length)
                                let array = this,
                                    match = !1,
                                    type = LDKF.sliceArray(LDKF.toArray(arguments), 0, -1),
                                    types = LDKC.valueTypes,
                                    replacement = arguments[arguments.length - 1],
                                    iterator = 0,
                                    length = type.length;

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length)
                                    /* Loop
                                            Index Type.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Type
                                        let $type = LDKF.string(type[iterator]);

                                        // Error
                                        (function() {
                                            // Initialization > Iterator
                                            let iterator = types.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if ($type === types[iterator -= 1])
                                                    return !0
                                        })() || LDKF.error(["'replaceElementOfTypeFromFront'", "'Array'"], 'argument', LDKF.debugMessage("'" + $type + "'", ['must', 'a'], 'valid data type'));

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (match)
                                            // Return
                                            return array;

                                        else
                                            // Update > Array
                                            LDKF.replaceElementFromFrontArray.call('replaceElementOfTypeFromFront', array, function(item) { return match = typeof item == $type }, replacement)
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Elements
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElements() {
                                // Initialization > Arguments
                                let args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, this);

                                // Return
                                return LDKF.replaceElementsArray.apply('replaceElements', args)
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Elements of Type
                        LDKF.objectDefineProperty(currentPrototype, 'replaceElementsOfType', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceElementsOfType() {
                                // Initialization > (Array, Type(s), Replacement, Iterator, Length)
                                let array = this,
                                    type = LDKF.sliceArray(LDKF.toArray(arguments), 0, -1),
                                    types = LDKC.valueTypes,
                                    replacement = arguments[arguments.length - 1],
                                    iterator = 0,
                                    length = type.length;

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length)
                                    /* Loop
                                            Index Type.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Type
                                        let $type = LDKF.string(type[iterator]);

                                        // Error
                                        (function() {
                                            // Initialization > Iterator
                                            let iterator = types.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if ($type === types[iterator -= 1])
                                                    return !0
                                        })() || LDKF.error(["'replaceElementsOfType'", "'Array'"], 'argument', LDKF.debugMessage("'" + $type + "'", ['must', 'a'], 'valid data type'));

                                        // Update > Array
                                        LDKF.replaceElementsArray.call('replaceElementsOfType', array, function(item) { return typeof item == $type }, replacement)
                                    }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Falsy Element
                        LDKF.objectDefineProperty(currentPrototype, 'replaceFalsyElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceFalsyElement() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementArray(array, function(item) { return !item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Falsy Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceFalsyElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceFalsyElementFromBack() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementArray(array, function(item) { return !item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Falsy Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceFalsyElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceFalsyElementFromFront() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementFromFrontArray(array, function(item) { return !item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Falsy Elements
                        LDKF.objectDefineProperty(currentPrototype, 'replaceFalsyElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceFalsyElements() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementsArray(array, function(item) { return !item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Repeated Element
                        LDKF.objectDefineProperty(currentPrototype, 'replaceRepeatedElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceRepeatedElement() {
                                // Initialization > (Array, Repeated, Iterator, Replacement)
                                let array = this,
                                    repeated = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = repeated.length,
                                    replacement = arguments[0];

                                // Update > Array
                                iterator && LDKF.replaceElementArray.call('replaceRepeatedElement', array, function(item) {
                                    // Return
                                    return (function() {
                                        // Update > Iterator
                                        iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === repeated[iterator -= 1])
                                                return !0
                                    })()
                                }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Repeated Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceRepeatedElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceRepeatedElementFromBack() {
                                // Initialization > (Array, Repeated, Iterator, Replacement)
                                let array = this,
                                    repeated = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = repeated.length,
                                    replacement = arguments[0];

                                // Update > Array
                                iterator && LDKF.replaceElementArray.call('replaceRepeatedElementFromBack', array, function(item) {
                                    // Return
                                    return (function() {
                                        // Update > Iterator
                                        iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === repeated[iterator -= 1])
                                                return !0
                                    })()
                                }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Repeated Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceRepeatedElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceRepeatedElementFromFront() {
                                // Initialization > (Array, Repeated, Iterator, Replacement)
                                let array = this,
                                    repeated = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = repeated.length,
                                    replacement = arguments[0];

                                // Update > Array
                                iterator && LDKF.replaceElementFromFrontArray.call('replaceRepeatedElementFromFront', array, function(item) {
                                    // Return
                                    return (function() {
                                        // Update > Iterator
                                        iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === repeated[iterator -= 1])
                                                return !0
                                    })()
                                }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Repeated Elements
                        LDKF.objectDefineProperty(currentPrototype, 'replaceRepeatedElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceRepeatedElements() {
                                // Initialization > (Array, Duplicates, Iterator, Replacement)
                                let array = this,
                                    repeated = LDKF.getReplicatedElementsFromArray(array),
                                    iterator = repeated.length,
                                    replacement = arguments[0];

                                // Update > Array
                                iterator && LDKF.replaceElementsArray.call('replaceRepeatedElements', array, function(item) {
                                    // Return
                                    return (function() {
                                        // Update > Iterator
                                        iterator = repeated.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (item === repeated[iterator -= 1])
                                                return !0
                                    })()
                                }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Truthy Element
                        LDKF.objectDefineProperty(currentPrototype, 'replaceTruthyElement', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceTruthyElement() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementArray(array, function(item) { return item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Truthy Element From Back
                        LDKF.objectDefineProperty(currentPrototype, 'replaceTruthyElementFromBack', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceTruthyElementFromBack() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementArray(array, function(item) { return item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Truthy Element From Front
                        LDKF.objectDefineProperty(currentPrototype, 'replaceTruthyElementFromFront', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceTruthyElementFromFront() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementFrontArray(array, function(item) { return item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Truthy Elements
                        LDKF.objectDefineProperty(currentPrototype, 'replaceTruthyElements', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function replaceTruthyElements() {
                                // Initialization > (Array, Replacement)
                                let array = this,
                                    replacement = arguments[0];

                                // Update > Array
                                LDKF.replaceElementsArray(array, function(item) { return item }, replacement);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        /* Stretch
                                --- NOTE ---
                                    #Lapys: Expand both sides of an array.
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'stretch', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function stretch() {
                                // Initialization > (Array, Length)
                                let array = this,
                                    length = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isSafeInteger(length)) {
                                        // Initialization > New Array
                                        let newArray = [];

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (length === 0 || length === -0)
                                            // Return
                                            return array;

                                        else {
                                            // Update > (Length, Array)
                                            length = LDKF.abs(length);
                                            LDKF.$spliceArray(array, new LDKF.array(length + 2));
                                            LDKF.$pushArray(array, LDKF.array(length))
                                        }

                                        // Return
                                        return array
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'stretch'", "'Array'"], 'argument', LDKF.debugMessage(length, ['must', 'a'], 'safe integer'));

                                else
                                    // Error
                                    LDKF.error(["'stretch'", "'Array'"], 'argument', [1, 0]);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Swap
                        LDKF.objectDefineProperty(currentPrototype, 'swap', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function swap() {
                                // Initialization > (Array, Iterator, (Decremented) Length)
                                let array = this,
                                    iterator = arguments.length,
                                    decrementedLength = iterator - 1,
                                    length = iterator;

                                // Function > Swap
                                function swap(indexA, indexB) {
                                    // Initialization > Item
                                    let item = array[indexB];

                                    // Update > Array
                                    array[indexB] = array[indexA];
                                    array[indexA] = item
                                }

                                /* Loop
                                        Index Arguments.

                                    > Error
                                */
                                while (iterator)
                                    LDKF.isSafeInteger(arguments[iterator -= 1]) || LDKF.error(["'swap'", "'Array'"], 'argument', LDKF.debugMessage(arguments[iterator], ['not', 'a'], 'valid array index'));

                                /* Loop
                                        Index Arguments.
                                */
                                for (iterator; iterator < length; iterator += 2) {
                                    // Initialization > Index (A, B)
                                    let indexA = arguments[iterator],
                                        indexB = iterator + 1 > decrementedLength ? arguments[iterator - 1] : arguments[iterator + 1];

                                    // Swap
                                    swap(indexA, indexB)
                                }

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Transform
                        LDKF.objectDefineProperty(currentPrototype, 'transform', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function transform() {
                                // Initialization > (Array, Callback)
                                let array = this,
                                    callback = arguments[0];

                                // Error
                                LDKF.isFunction(callback) || LDKF.error(callback, ['not', 'a'], 'function');

                                // Initialization > Filter
                                let filter = LDKF.filterArray(array, callback);

                                // Update > Array
                                LDKF.spliceArray(array, 0, array.length);
                                LDKF.$pushArray(array, filter);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Trim
                        LDKF.objectDefineProperty(currentPrototype, 'trim', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function trim() {
                                // Initialization > (Array, Arguments)
                                let array = this,
                                    args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, array);

                                // Update > Arguments
                                LDKF.trimLeftArray.apply(LDKF, args);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 1);
                                LDKF.spliceArray(args, 0, 0, array);

                                // Update > Arguments
                                LDKF.trimRightArray.apply(LDKF, args);

                                // Return
                                return array
                            },

                            // Writable
                            writable: !0
                        });

                        // Trim Left
                        LDKF.objectDefineProperty(currentPrototype, 'trimLeft', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function trimLeft() {
                                // Initialization > Arguments
                                let args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, this);

                                // Return
                                return LDKF.trimLeftArray.apply(LDKF, args)
                            },

                            // Writable
                            writable: !0
                        });

                        // Trim Right
                        LDKF.objectDefineProperty(currentPrototype, 'trimRight', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function trimRight() {
                                // Initialization > Arguments
                                let args = LDKF.toArray(arguments);

                                // Update > Arguments
                                LDKF.spliceArray(args, 0, 0, this);

                                // Return
                                return LDKF.trimRightArray.apply(LDKF, args)
                            },

                            // Writable
                            writable: !0
                        });

                    /* Boolean Data */
                        // All
                        LDKF.objectDefineProperty(LDKO.boolean, 'all', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: {
                                // Falsy
                                falsy: function falsy() {return!!(!LDKF.filterArray(LDKF.toArray(arguments),LDKO.boolean).length&&arguments.length)},

                                // Truthy
                                truthy: function truthy() {return!!(!LDKF.filterArray(LDKF.toArray(arguments),function(item) {return!item}).length&&arguments.length)}
                            }
                        });

                        // Compare
                        LDKF.objectDefineProperty(LDKO.boolean, 'compare', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: {
                                // Equals
                                equals: function equals() {if(!arguments.length)return null;return LDKF.objectIs(arguments[0],arguments[1])},

                                // Similar
                                similar: function similar() {if(!arguments.length)return null;let data=arguments[0],metadata=arguments[1];try{return data==metadata}catch(error){}return data===metadata}
                            }
                        });

                        // Logic
                        LDKF.objectDefineProperty(LDKO.boolean, 'logic', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: {
                                // AND
                                and: function and() {let iterator=arguments.length;if(!iterator)return null;while(iterator)if(!arguments[iterator-=1])return!1;return!0},

                                // NOT AND
                                nand: function nand() {let iterator=arguments.length;if(!iterator)return null;while(iterator)if(arguments[iterator-=1])return!1;return!0},

                                // NOT OR
                                nor: function nor() {let iterator=arguments.length;if(!iterator)return null;return!(function(){while(iterator)if(arguments[iterator-=1])return!0;return!1})()},

                                // NOT
                                not: function not() {if(!arguments.length)return null;return!arguments[0]},

                                // OR
                                or: function or() {let iterator=arguments.length;if(!iterator)return null;while(iterator)if(arguments[iterator-=1])return!0;return!1},

                                // Exclusive NOR
                                xnor: function xnor() {if(!arguments.length)return null;return !(LDKF.filterArray(LDKF.toArray(arguments),LDKO.boolean).length%2)},

                                // Exclusive OR
                                xor: function xor() {if(!arguments.length)return null;return !!(LDKF.filterArray(LDKF.toArray(arguments),LDKO.boolean).length%2)}
                            }
                        });

                        // Is False
                        LDKF.objectDefineProperty(LDKO.boolean, 'isFalse', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function isFalse() {if(!arguments.length)return null;return LDKF.objectIs(arguments[0],!1)},

                            // Writable
                            writable: !0
                        });

                        // Is Falsy
                        LDKF.objectDefineProperty(LDKO.boolean, 'isFalsy', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function isFalsy() {if(!arguments.length)return null;return!arguments[0]},

                            // Writable
                            writable: !0
                        });

                        // Is True
                        LDKF.objectDefineProperty(LDKO.boolean, 'isTrue', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function isTrue() {if(!arguments.length)return null;return LDKF.objectIs(arguments[0],!0)},

                            // Writable
                            writable: !0
                        });

                        // Is Truthy
                        LDKF.objectDefineProperty(LDKO.boolean, 'isTruthy', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function isTruthy() {if(!arguments.length)return null;return!!arguments[0]},

                            // Writable
                            writable: !0
                        });

                    /* Document Data */
                        // Favorite Icon
                        LDKF.objectDefineProperty(currentPrototype = LDKO.documentProto, 'favicon', new (function Object() {
                            // Initialization > (Relationships, Target)
                            let relationships = ['apple-touch-icon', 'icon', 'shortcut icon'],
                                that = this;

                            // Modification > Target
                                // Configurable
                                that.configurable = !0;

                                // Enumerable
                                that.enumerable = !0;

                                // Get
                                that.get = function getFavoriteIcon() {
                                    // Initialization > (Iterator, (Decremented) Length, Query)
                                    let iterator = 0,
                                        length = relationships.length,
                                        decrementedLength = length - 1,
                                        query = '';

                                    /* Loop
                                            Index Relationship.s

                                        > Update > Query
                                    */
                                    for (iterator; iterator < length; iterator += 1)
                                        query += "link[rel='" + relationships[iterator] + "']" + (iterator == decrementedLength ? '' : ', ');

                                    // Initialization > Elements
                                    let elements = LDKF.querySelectorAllDocument(query);

                                    // Update > Length
                                    length = elements.length;

                                    /* Loop
                                            Index Elements.

                                        > Update > Elements
                                    */
                                    for (iterator = 0; iterator < length; iterator += 1)
                                        elements[LDKF.replaceString(LDKF.replaceString(relationships[iterator], / {1,}[a-z]/g, function(a) { return LDKF.toUpperCaseString(a[a.length - 1]) }), /-[a-z]/g, function(a) { return LDKF.toUpperCaseString(a[1]) })] = LDKF.get.htmlLinkElementHref(elements[iterator]);

                                    // Modification > Elements > To String
                                    LDKF.objectDefineProperty(elements, 'toString', {
                                        // Value
                                        value: function toString() {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if ('shortcutIcon' in elements)
                                                // Return
                                                return elements.shortcutIcon;

                                            else {
                                                // Initialization > (Keys (Length), Selection)
                                                let keys = LDKF.objectKeys(elements),
                                                    keysLength = keys.length,
                                                    selection = [];

                                                /* Loop
                                                        Iterate Keys.
                                                */
                                                for (iterator = 0; iterator < keysLength; iterator += 1) {
                                                    // Initialization > Key
                                                    let key = keys[iterator];

                                                    // Update > Selection
                                                    LDKF.isNaN(+key) && LDKF.pushArray(selection, key)
                                                }

                                                // Return
                                                return elements[selection[LDKF.numberParseInt(LDKF.mathRandom() * selection.length)]]
                                            }
                                        }
                                    });

                                    // Return
                                    return elements
                                };

                                // Set
                                that.set = function setFavoriteIcon() {
                                    // Initialization > (Attributes, Source, Parent, Type(s), Length, Iterator, Document Fragment)
                                    let attributes = LDKF.object(arguments[2]),
                                        source = LDKF.string(arguments[0]),
                                        parent = LDKF.get.documentHead(),
                                        type = arguments.length > 1 ? LDKF.string(arguments[1]) : 'ico',
                                        types = [],
                                        length = relationships.length,
                                        iterator = 0,
                                        documentFragment = LDKF.createDocumentFragmentDocument();

                                    /* Loop
                                            Iterate over Length.

                                        > Update > Types
                                    */
                                    for (iterator; iterator < length; iterator += 1)
                                        types[iterator] = 'img/' + type;

                                    /* Loop
                                            Index Relationships.
                                    */
                                    for (iterator = 0; iterator < length; iterator += 1) {
                                        // Initialization > (Relationship, Type, Element)
                                        let relationship = relationships[iterator],
                                            type = types[iterator],
                                            element = LDKF.createElementDocument('link');

                                        // Modification > Element > (Hyperlink Reference, Relationship, Type)
                                        LDKF.set.htmlLinkElementHref(element, source);
                                        LDKF.set.htmlLinkElementRel(element, relationship);
                                        LDKF.set.htmlLinkElementType(element, type);

                                        // Insertion
                                        LDKF.appendChildNode(documentFragment, element)
                                    }

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (parent)
                                        // Insertion
                                        LDKF.appendChildNode(parent, documentFragment);

                                    else
                                        // Error Handling
                                        try {
                                            // Insertion
                                            LDKF.appendChildDocument(documentFragment)
                                        } catch (error) {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (error.constructor == LDKO.domException) {
                                                // Initialization > Children
                                                let children = LDKF.get.documentChildren(LDKO.$document);

                                                // Insertion
                                                LDKF.get.htmlCollectionLength(children) && LDKF.appendChildNode(children[0], documentFragment)
                                            }

                                            else
                                                // Error
                                                throw error
                                        }
                                };

                            // Return
                            return that
                        }));

                        // Main Element
                        LDKF.objectDefineProperty(currentPrototype, 'mainElement', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function mainElement() {
                                // Return
                                return LDKF.$getElementsByTagNameDocument(this, 'main')[0]
                            }
                        });

                        // Title Element
                        LDKF.objectDefineProperty(currentPrototype, 'titleElement', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function titleElement() {
                                // Return
                                return LDKF.$getElementsByTagNameDocument(this, 'title')[0]
                            }
                        });

                    /* Document Fragment Data */
                        // Get Elements By Class Name
                        LDKF.objectDefineProperty(currentPrototype = LDKO.documentFragmentProto, 'getElementsByClassName', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getElementsByClassName() {
                                // Initialization > (Fragment, Selector)
                                let fragment = this,
                                    selector = LDKF.string(arguments[0]);

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    // Return
                                    return LDKF.toArray(LDKF.querySelectorAllDocumentFragment(fragment, "[class='" + selector + "']"));

                                else
                                    // Error
                                    LDKF.error(["'getElementsByClassName'", "'DocumentFragment'"], 'argument', [1, 0])
                            },

                            //  Writable
                            writable: !0
                        });

                        // Get Elements By Tag Name
                        LDKF.objectDefineProperty(currentPrototype, 'getElementsByTagName', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getElementsByTagName() {
                                // Initialization > (Fragment, Selector)
                                let fragment = this,
                                    selector = LDKF.string(arguments[0]);

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    // Return
                                    return LDKF.toArray(LDKF.querySelectorAllDocumentFragment(fragment, LDKF.replaceString(selector, /[^a-zA-Z\-]/g, '')));

                                else
                                    // Error
                                    LDKF.error(["'getElementsByClassName'", "'DocumentFragment'"], 'argument', [1, 0])
                            },

                            //  Writable
                            writable: !0
                        });

                    /* Element Data */
                        // Add Attribute
                        LDKF.objectDefineProperty(currentPrototype = LDKO.elementProto, 'addAttr', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function addAttribute() {
                                // Initialization > (Element, Attribute)
                                let element = this,
                                    attribute = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Name
                                    let name = LDKF.isAttr(attribute) ? LDKF.get.attributeName(attribute) : LDKF.string(attribute);

                                    /* Logic
                                            [if statement]
                                    */
                                    if (!LDKF.hasAttributeElement(element, name)) {
                                        // Modification > Element > [Name]
                                        LDKF.setAttributeElement(element, name, '');

                                        // Return
                                        return LDKF.getAttributeNodeElement(element, name)
                                    }

                                    // Return
                                    return null
                                }

                                else
                                    // Error
                                    LDKF.error(["'getElementsByClassName'", "'Element'"], 'argument', [1, 0]);

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'attr', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function attribute() {
                                // Initialization > (Element, Length)
                                let element = this,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Arguments, ...)
                                    let args = LDKF.toArray(arguments),
                                        $0 = arguments[0],
                                        $1 = arguments[1];

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (length == 1) {
                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isArray($0) || LDKF.isObject($0))
                                            // Modification > Element > (...)
                                            LDKF.setAttrElement(element, $0, '');

                                        else
                                            // Modification > Element > (...)
                                            LDKF.delAttrElement(element, $0)
                                    }

                                    else if (length == 2)
                                        // Modification > Element > (...)
                                        LDKF.$setAttrElement(element, args);

                                    else
                                        // Modification > Element > (...)
                                        LDKF.$delAttrElement(element, args)
                                }

                                else
                                    // Error
                                    LDKF.error(["'attribute'", "'Element'"], 'argument')
                            },

                            // Writable
                            writable: !0
                        });

                        // Bounding Box
                        LDKF.objectDefineProperty(currentPrototype, 'boundingBox', new (function Object() {
                            // Initialization > Target
                            let that = this;

                            // Modification > Target
                                // Configurable
                                that.configurable = !0;

                                // Enumerable
                                that.enumerable = !0;

                                // Get
                                that.get = tmpObject.elementPrototypeBoundingBoxDescriptionGetter = function getBoundingBox() {
                                    // Initialization > (Element, Bounding (Client Rectangle, Box))
                                    let element = this,
                                        boundingClientRect = LDKF.getBoundingClientRectElement(this),
                                        boundingBox = LDKF.customObject('ElementBoundingBox', new (function Object() {
                                            // Initialization > Target
                                            let that = this;

                                            // Modification > Target
                                                // Bottom
                                                LDKF.objectDefineProperty(that, 'bottom', {
                                                    // Get
                                                    get: function getBottom() { return LDKF.get.domRectangleReadOnlyBottom(boundingClientRect) },

                                                    // Set
                                                    set: function setBottom() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).bottom = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Height
                                                LDKF.objectDefineProperty(that, 'height', {
                                                    // Get
                                                    get: function getHeight() { return LDKF.get.domRectangleHeight(boundingClientRect) },

                                                    // Set
                                                    set: function setHeight() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).height = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Left
                                                LDKF.objectDefineProperty(that, 'left', {
                                                    // Get
                                                    get: function getLeft() { return LDKF.get.domRectangleReadOnlyLeft(boundingClientRect) },

                                                    // Set
                                                    set: function setLeft() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).left = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Right
                                                LDKF.objectDefineProperty(that, 'right', {
                                                    // Get
                                                    get: function getRight() { return LDKF.get.domRectangleReadOnlyRight(boundingClientRect) },

                                                    // Set
                                                    set: function setRight() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).right = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Top
                                                LDKF.objectDefineProperty(that, 'top', {
                                                    // Get
                                                    get: function getTop() { return LDKF.get.domRectangleReadOnlyTop(boundingClientRect) },

                                                    // Set
                                                    set: function setTop() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).top = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Width
                                                LDKF.objectDefineProperty(that, 'width', {
                                                    // Get
                                                    get: function getWidth() { return LDKF.get.domRectangleWidth(boundingClientRect) },

                                                    // Set
                                                    set: function setWidth() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).width = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // X
                                                LDKF.objectDefineProperty(that, 'x', {
                                                    // Get
                                                    get: function getX() { return LDKF.get.domRectangleX(boundingClientRect) },

                                                    // Set
                                                    set: function setX() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).left = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Y
                                                LDKF.objectDefineProperty(that, 'y', {
                                                    // Get
                                                    get: function getY() { return LDKF.get.domRectangleY(boundingClientRect) },

                                                    // Set
                                                    set: function setY() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).top = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                                // Z
                                                LDKF.objectDefineProperty(that, 'z', {
                                                    // Get
                                                    get: function getZ() { return LDKF.getPropertyValueCSSStyleDeclaration(LDKF.getComputedStyle(element), 'z-index') || LDKF.get.htmlElementStyle(element).zIndex },

                                                    // Set
                                                    set: function setZ() {
                                                        // Initialization > Data
                                                        let data = arguments[0];

                                                        // Style > Element > Left
                                                        LDKF.get.htmlElementStyle(element).zIndex = LDKF.string(data);

                                                        // Return
                                                        return data
                                                    }
                                                });

                                            // Return
                                            return that
                                        }), LDKO.domRectangleProto);

                                    // Return
                                    return boundingBox
                                };

                                // Set
                                that.set = function setBoundingBox() {
                                    // Initialization > (Element, Bounding Box, Data)
                                    let element = this,
                                        boundingBox = that.get.call(element),
                                        data = LDKF.$number(arguments[0]);

                                    // Modification > Bounding Box
                                        // Bottom
                                        boundingBox.bottom = data;

                                        // Left
                                        boundingBox.left = data;

                                        // Right
                                        boundingBox.right = data;

                                        // Top
                                        boundingBox.top = data;

                                        // X
                                        boundingBox.x = data;

                                        // Y
                                        boundingBox.y = data;

                                    // Return
                                    return data
                                };

                            // Return
                            return that
                        }));

                        // Descendant Element Index
                        LDKF.objectDefineProperty(currentPrototype, 'descendantElementIndex', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function descendantElementIndex() {
                                // Initialization > (Element, Parent)
                                let element = this,
                                    parent = LDKF.get.nodeParentNode(element);

                                // Return
                                return parent ? LDKF.indexOfArray(LDKF.toArray(LDKF.isElement(parent) ? LDKF.get.elementChildren(parent) : [element]), element) : -1
                            }
                        });

                        // Focusable
                        LDKF.objectDefineProperty(currentPrototype, 'focusable', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function getFocusable() {
                                // Logic > Return
                                if (LDKF.includesArray(LDKE.active, 'focus-attribute'))
                                    return LDKF.getAttributeElement(this, 'focusable') === 'true'
                            },

                            // Set
                            set: function setFocusable() {
                                // Return
                                return LDKF.includesArray(LDKE.active, 'focus-attribute') ? LDKF.$setAttributeElement(this, 'focusable', arguments[0]) : void 0
                            }
                        });

                        // Get Animation Length
                        LDKF.objectDefineProperty(currentPrototype, 'getAnimationLength', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getAnimationLength() {
                                // Initialization > (Element, Format, Delay, Duration)
                                let element = this,
                                    format = LDKF.string(arguments[0]),
                                    delay = LDKF.string(LDKF.getPropertyValueCSSStyleDeclaration(LDKF.getComputedStyle(element), 'animation-delay') || LDKF.get.htmlElementStyle(element).animationDelay),
                                    duration = LDKF.string(LDKF.getPropertyValueCSSStyleDeclaration(LDKF.getComputedStyle(element), 'animation-duration') || LDKF.get.htmlElementStyle(element).animationDuration);

                                // Function > Test
                                function test(string) {
                                    // Initialization > Iterator
                                    let iterator = string.length;

                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Character
                                        let character = string[iterator -= 1];

                                        // Logic > Return
                                        if (
                                            string[iterator - 1] != 'm' &&
                                            character == 's'
                                        )
                                            return !0
                                    }
                                }

                                // Update > (Delay, Duration)
                                delay = test(delay) ? LDKF.$number(delay) : LDKF.$number(delay) / 1e3;
                                duration = test(duration) ? LDKF.$number(duration) : LDKF.$number(duration) / 1e3;

                                /* Logic
                                        [switch:case statement]
                                */
                                switch (format) {
                                    // Delay
                                    case 'delay': return delay; break;

                                    // Duration
                                    case 'duration': return duration
                                }

                                // Return
                                return delay + duration
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'getAttr', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getAttribute() {
                                // Initialization > (Element, Attribute)
                                let element = this,
                                    attribute = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Name
                                    let name = LDKF.isAttr(attribute) ? LDKF.get.attributeName(attribute) : LDKF.string(attribute);

                                    // Logic > Return
                                    if (LDKF.hasAttributeElement(element, name))
                                        return LDKF.getAttributeElement(element, name);

                                    // Return
                                    return null
                                }

                                else
                                    // Error
                                    LDKF.error(["'getAttribute'", "'Element'"], 'argument', [1, 0]);

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Attribute Node
                        LDKF.objectDefineProperty(currentPrototype, 'getAttrNode', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getAttributeNode() {
                                // Initialization > (Element, Attribute)
                                let element = this,
                                    attribute = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Name
                                    let name = LDKF.isAttr(attribute) ? LDKF.get.attributeName(attribute) : LDKF.string(attribute);

                                    // Logic > Return
                                    if (LDKF.hasAttributeElement(element, name))
                                        return LDKF.getAttributeNodeElement(element, name);

                                    // Return
                                    return null
                                }

                                else
                                    // Error
                                    LDKF.error(["'getAttribute'", "'Element'"], 'argument', [1, 0]);

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Element By ID
                        LDKF.objectDefineProperty(currentPrototype, 'getElementById', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getElementById() {
                                // Initialization > (Element, Selector)
                                let element = this,
                                    selector = LDKF.string(arguments[0]);

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    // Return
                                    return LDKF.toArray(LDKF.querySelectorAllElement(element, "[id='" + selector + "']"));

                                else
                                    // Error
                                    LDKF.error(["'getElementsByClassName'", "'DocumentFragment'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Transition Length
                        LDKF.objectDefineProperty(currentPrototype, 'getTransitionLength', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getTransitionLength() {
                                // Initialization > (Element, Format, Delay, Duration)
                                let element = this,
                                    format = LDKF.string(arguments[0]),
                                    delay = LDKF.string(LDKF.getPropertyValueCSSStyleDeclaration(LDKF.getComputedStyle(element), 'transition-delay') || LDKF.get.htmlElementStyle(element).transitionDelay),
                                    duration = LDKF.string(LDKF.getPropertyValueCSSStyleDeclaration(LDKF.getComputedStyle(element), 'transition-duration') || LDKF.get.htmlElementStyle(element).transitionDuration);

                                // Function > Test
                                function test(string) {
                                    // Initialization > Iterator
                                    let iterator = string.length;

                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Character
                                        let character = string[iterator -= 1];

                                        // Logic > Return
                                        if (
                                            string[iterator - 1] != 'm' &&
                                            character == 's'
                                        )
                                            return !0
                                    }
                                }

                                // Update > (Delay, Duration)
                                delay = test(delay) ? LDKF.$number(delay) : LDKF.$number(delay) / 1e3;
                                duration = test(duration) ? LDKF.$number(duration) : LDKF.$number(duration) / 1e3;

                                /* Logic
                                        [switch:case statement]
                                */
                                switch (format) {
                                    // Delay
                                    case 'delay': return delay; break;

                                    // Duration
                                    case 'duration': return duration
                                }

                                // Return
                                return delay + duration
                            },

                            // Writable
                            writable: !0
                        });

                        // Has Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'hasAttr', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function hasAttribute() {
                                // Initialization > (Element, Attribute)
                                let element = this,
                                    attribute = arguments[0];

                                // Return
                                return arguments.length ? (LDKF.hasAttributeElement(element, LDKF.isAttr(attribute) ? LDKF.get.attributeName(attribute) : LDKF.string(attribute))) : !!LDKF.get.namedNodeMapLength(LDKF.get.elementAttributes(element))
                            },

                            // Writable
                            writable: !0
                        });

                        // Height
                        LDKF.objectDefineProperty(currentPrototype, 'height', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function getHeight() { return LDKF.get.elementBoundingBox(this).height },

                            // Set
                            set: function setHeight() {
                                // Initialization > Data
                                let data = arguments[0];

                                // Style > Target > Height
                                LDKF.get.htmlElementStyle(this).height = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                // Return
                                return data
                            }
                        });

                        // Insert Adjacent Comment
                        LDKF.objectDefineProperty(currentPrototype, 'insertAdjacentComment', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function insertAdjacentComment() {
                                // Error Handling
                                try {
                                    // Return
                                    return LDKF.insertAdjacentHTMLElement(this, arguments[0], '<!--' + LDKF.string(arguments[1]) + '-->')
                                } catch (error) {
                                    // Error
                                    LDKF.error(["'insertAdjacentComment'", "'Element'"], 'argument', error.message)
                                }
                            },

                            // Writable
                            writable: !0
                        });

                        // Insert Child
                        LDKF.objectDefineProperty(currentPrototype, 'insertChild', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function insertChild() {
                                // Initialization > (Element, Node, Order)
                                let element = this,
                                    node = arguments[1],
                                    order = arguments[0];

                                /* Logic
                                        [if statement]

                                    > Update > (Node, Order)
                                */
                                if (arguments.length < 2) {
                                    node = arguments[0];
                                    order = 'end'
                                }

                                // Update > Order
                                (order == 'first') && (order = 'begin');
                                (order == 'last') && (order = 'end');

                                // Error
                                (order == 'begin' || order == 'end') || LDKF.error(["'insertChild'", "'Element'"], 'argument', LDKF.debugMessage(order, ['only', 'values'], ["'begin' (or 'first')", "'end' (or 'last')"]));
                                LDKF.isNode(node) || LDKF.error(["'insertChild'", "'Element'"], 'argument', LDKF.debugMessage(node, ['must', 'a'], 'node'));

                                // Insertion
                                LDKF.appendChildNode(element, node);
                                (order == 'begin') && LDKF.insertBeforeNode(element, node, LDKF.get.nodeFirstChild(element));

                                // Return
                                return node
                            },

                            // Writable
                            writable: !0
                        });

                        // Next Element Siblings
                        LDKF.objectDefineProperty(currentPrototype, 'nextElementSiblings', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function _nextElementSiblings() {
                                // Initialization > (Element, Parent, Children, Index, Iterator, Next Element Siblings)
                                let element = this,
                                    parent = LDKF.get.nodeParentNode(element),
                                    children = LDKF.toArray(LDKF.isElement(parent) ? LDKF.get.elementChildren(parent) : [element]),
                                    index = LDKF.indexOfArray(children, element),
                                    iterator = children.length,
                                    nextElementSiblings = [];

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Update > Iterator
                                    iterator -= 1;

                                    // Logic > Break
                                    if (iterator == index)
                                        break;

                                    // Update > Next Element Siblings
                                    LDKF.spliceArray(nextElementSiblings, 0, 0, children[iterator])
                                }

                                // Return
                                return nextElementSiblings
                            }
                        });

                        // Previous Element Siblings
                        LDKF.objectDefineProperty(currentPrototype, 'previousElementSiblings', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function _previousElementSiblings() {
                                // Initialization > (Element, Parent, Children, Index, Iterator, Previous Element Siblings)
                                let element = this,
                                    parent = LDKF.get.nodeParentNode(element),
                                    children = LDKF.toArray(LDKF.isElement(parent) ? LDKF.get.elementChildren(parent) : [element]),
                                    index = LDKF.indexOfArray(children, element),
                                    iterator = 0,
                                    length = children.length,
                                    previousElementSiblings = [];

                                /* Loop
                                        [for statement]
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Logic > Break
                                    if (iterator == index)
                                        break;

                                    // Update > Previous Element Siblings
                                    LDKF.pushArray(previousElementSiblings, children[iterator])
                                }

                                // Return
                                return previousElementSiblings
                            }
                        });

                        // Remove Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'delAttr', tmpObject.elementPrototypeDelAttrDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function removeAttribute() {
                                // Initialization > (Element, Iterator, Length)
                                let element = this,
                                    iterator = 0,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > Return Value
                                    let returnValue = !1;

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Name
                                        let attribute = arguments[iterator],
                                            name = LDKF.isAttr(attribute) ? LDKF.get.attributeName(attribute) : LDKF.string(attribute);

                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.hasAttributeElement(element, name)) {
                                            // Update > LapysJS Development Kit Experimental Features
                                            (element === LapysJS.script && name == 'features') && LDKF.spliceArray(LDKE.active, 0, LDKE.active.length);

                                            // Modification > Element > [Name]
                                            LDKF.removeAttributeElement(element, name);

                                            // Update > Return Value
                                            returnValue = null
                                        }
                                    }

                                    // Return
                                    return returnValue
                                }

                                else {
                                    // Initialization > (Attributes, Return Value)
                                    let attributes = LDKF.get.elementAttributes(element),
                                        returnValue = null;

                                    // Update > Iterator
                                    (iterator = LDKF.get.namedNodeMapLength(attributes)) || (returnValue = !1);

                                    // Loop
                                    while (iterator) {
                                        // Initialization > Name
                                        let name = LDKF.get.attributeName(attributes[iterator -= 1]);

                                        // Update > LapysJS Development Kit Experimental Features
                                        (element === LapysJS.script && name == 'features') && LDKF.spliceArray(LDKE.active, 0, LDKE.active.length);

                                        // Modification > Element > [Name]
                                        LDKF.removeAttributeElement(element, name)
                                    }

                                    // Return
                                    return returnValue
                                }

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Replace Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'replAttr', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function replaceAttribute() {
                                // Initialization > (Element, Length)
                                let element = this,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (...)
                                    let $0 = arguments[0],
                                        $1 = arguments[1],
                                        $2 = arguments[2];

                                    // Function
                                        // Replace
                                        function replace() {
                                            // Initialization > ((Old, New) Attribute (Name, Value))
                                            let oldAttributeName = arguments[0],
                                                newAttributeName = arguments[1],
                                                newAttributeValue = arguments[2];

                                            // Update > Old Attribute Name
                                            oldAttributeName = LDKF.isAttr(oldAttributeName) ? LDKF.get.attributeName(oldAttributeName) : LDKF.string(oldAttributeName);

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.hasAttributeElement(element, oldAttributeName)) {
                                                /* Logic
                                                        [if:else statement]

                                                    > Update > New Attribute Value
                                                */
                                                if (arguments.length > 2)
                                                    newAttributeValue = LDKF.isAttr(newAttributeValue) ? LDKF.get.newAttributeValue(newAttributeValue) : LDKF.string(newAttributeValue);

                                                else
                                                    newAttributeValue = LDKF.isAttr(newAttributeName) ? LDKF.get.attributeValue(newAttributeName) : '';

                                                // Update > New Attribute Name
                                                newAttributeName = LDKF.isAttr(newAttributeName) ? LDKF.get.attributeName(newAttributeName) : LDKF.string(newAttributeName);

                                                // Modification > Element > ([Old Attribute Name], [New Attribute Name])
                                                LDKF.removeAttributeElement(element, oldAttributeName);
                                                LDKF.setAttributeElement(element, newAttributeName, newAttributeValue)
                                            }
                                        }

                                        // Test Object Definition
                                        function testObjectDefinition(object) {
                                            // Return
                                            return LDKF.isArray(object) && ((object || []).length == 2 || (object || []).length == 3)
                                        }

                                    // Error
                                    (length == 1 && !testObjectDefinition($0)) && LDKF.error(["'replaceAttribute'", "'Element'"], 'argument', 'Invalid argument set');

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (length < 4 && !testObjectDefinition($0) && !testObjectDefinition($1) && !testObjectDefinition($2)) {
                                        // Replace
                                        length == 3 ? replace($0, $1, $2) : replace($0, $1);

                                        // Return
                                        return null
                                    }

                                    else if (testObjectDefinition($0)) {
                                        // Initialization > Iterator
                                        let iterator = length;

                                        // Loop > Error
                                        while (iterator)
                                            testObjectDefinition(arguments[iterator -= 1]) || LDKF.error(["'replaceAttribute'", "'Element'"], 'argument', 'Invalid argument set');

                                        /* Loop
                                                Index Arguments.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Argument
                                            let argument = arguments[iterator];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.isArray(argument))
                                                // Replace
                                                argument.length == 2 ? replace(argument[0], argument[1]) : replace(argument[0], argument[1], argument[2])
                                        }

                                        // Return
                                        return null
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'replaceAttribute'", "'Element'"], 'argument', 'Invalid argument set')
                                }

                                else
                                    // Error
                                    LDKF.error(["'replaceAttribute'", "'Element'"], 'argument');

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Script
                        LDKF.objectDefineProperty(currentPrototype, 'script', tmpObject.elementPrototypeScriptDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function getScript() {
                                /* Logic
                                        [if statement]
                                */
                                if (LDKF.includesArray(LDKE.active, 'script-attribute')) {
                                    // Initialization > (Element, Script)
                                    let element = this,
                                        script = LDKF.hasAttributeElement(element, 'script') ? LDKF.getAttributeElement(element, 'script') : null;

                                    // Return
                                    return LDKF.isExecutable(script).value && !LDKF.isNull(script) ?
                                        LDKF.$func("var end = (function() { let element = this; return function end() { element.removeAttribute('script') } }).call(this); return (" + LDKF.$func(script) + ').apply(this, arguments)') :
                                        null
                                }
                            },

                            // Set
                            set: function setScript() {
                                // Return
                                return LDKF.includesArray(LDKE.active, 'script-attribute') ? LDKF.$setAttributeElement(this, 'script', arguments[0]) : void 0
                            }
                        });

                        // Set Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'setAttr', tmpObject.elementPrototypeSetAttrDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function setAttribute() {
                                // Initialization > (Element, Is Object Definitive, Iterator, Length)
                                let element = this,
                                    isObjectDefinitive = !1,
                                    iterator = 0,
                                    length = arguments.length;

                                // Function > Test Object Definition
                                function testObjectDefinition(object) {
                                    // Return
                                    return (LDKF.isArray(object) && (object || []).length == 2) || LDKF.isObject(object)
                                }

                                /* Loop
                                        Index Arguments.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Argument
                                    let argument = arguments[iterator];

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (isObjectDefinitive)
                                        // Error
                                        testObjectDefinition(argument) || LDKF.error(["'setAttribute'", "'Element'"], 'argument', 'Invalid argument set');

                                    else
                                        // Update > Is Object Definitive
                                        testObjectDefinition(argument) && (isObjectDefinitive = !0)
                                }

                                /* Logic
                                        [if:else statement]
                                */
                                if (isObjectDefinitive)
                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator = 0; iterator != length; iterator += 1) {
                                        // Initialization > Argument
                                        let argument = arguments[iterator];

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (LDKF.isArray(argument))
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (array.length == 2)
                                                // Modification > Element > (...)
                                                LDKF.$setAttributeElement(
                                                    element,
                                                    LDKF.isAttr(argument[0]) ? LDKF.get.attributeName(argument[0]) : LDKF.string(argument[0]),
                                                    LDKF.isAttr(argument[1]) ? LDKF.get.attributeValue(argument[1]) : LDKF.string(argument[1])
                                                );

                                            else {
                                                // Initialization > Argument (Iterator, Length)
                                                let argumentIterator = 0,
                                                    argumentLength = argument.length;

                                                /* Loop
                                                        [for statement]

                                                    > Error Handling > Modification > Element > (...)
                                                */
                                                for (argumentIterator; argumentIterator != argumentLength; argumentIterator += 1)
                                                    try { LDKF.$setAttributeElement(element, LDKF.string(argument[argumentIterator]), '') }
                                                    catch (error) {}
                                            }

                                        else
                                            // LapysJS Development Kit Functions > Iterate Object
                                            LDKF.iterateObject(function(key, value, description) {
                                                // Logic > Error Handling > Modification > Element > [Key]
                                                if ('value' in description)
                                                    try { LDKF.$setAttributeElement(element, key, LDKF.string(value)) }
                                                    catch (error) {}
                                            }, argument)
                                    }

                                else
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (length == 2)
                                        // Modification > Element > (...)
                                        LDKF.$setAttributeElement(
                                            element,
                                            LDKF.isAttr(arguments[0]) ? LDKF.get.attributeName(arguments[0]) : LDKF.string(arguments[0]),
                                            LDKF.isAttr(arguments[1]) ? LDKF.get.attributeValue(arguments[1]) : LDKF.string(arguments[1])
                                        );

                                    else
                                        /* Loop
                                                Index Arguments.
                                        */
                                        for (iterator = 0; iterator != length; iterator += 1) {
                                            // Initialization > Argument
                                            let argument = arguments[iterator];

                                            // Modification > Element > (...)
                                            LDKF.isAttr(argument) ? LDKF.setAttributeNodeElement(element, argument) : LDKF.$setAttributeElement(element, LDKF.string(argument), '')
                                        }
                            },

                            // Writable
                            writable: !0
                        });

                        LDKF.objectDefineProperty(currentPrototype, 'setAttribute', tmpObject.elementPrototypeSetAttributeDescription = (function() {
                            // Initialization > (Description, Method)
                            let description = LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'setAttribute'),
                                method = description.value;

                            /* Modification > Description > Value
                                    --- NOTE ---
                                        #Lapys: Modify the public `Element.prototype.setAttribute` method
                                            to account for experimental LapysJS features such as `script-attribute`.
                            */
                            description.value = function setAttribute() {
                                // Initialization > (Name, Value)
                                let element = this,
                                    name = arguments[0],
                                    value = arguments[1];

                                /* Logic
                                        [if statement]

                                        --- NOTE ---
                                            #Lapys: Detect if a specific LapysJS feature is active.
                                */
                                if (LDKF.includesArray(LDKE.active, 'script-attribute')) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (name === 'script') {
                                        // Update > Value
                                        value = LDKF.string(value);

                                        // Initialization > Script
                                        let script = element.script;

                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.isExecutable(value).value) {
                                            // Modification > Element > [Name]
                                            LDKF.setAttributeElement(element, name, value);

                                            // Update > Script
                                            script = element.script;

                                            // Script
                                            LDKF.isFunction(script) && (LDKF.sliceString(LDKF.get.functionBody(script), ' {'.length, -'}'.length) == value) && script.call(element)
                                        }

                                        // Return
                                        return script
                                    }
                                }

                                // Return
                                return method.apply(element, LDKF.toArray(arguments))
                            };

                            // Return
                            return description
                        })());

                        // Set Attribute Node
                        LDKF.objectDefineProperty(currentPrototype, 'setAttributeNode', (function() {
                            // Initialization > (Description, Method)
                            let description = LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'setAttributeNode'),
                                method = description.value;

                            // Modification > Description > Value
                            description.value = function setAttributeNode() {
                                // Initialization > (Element, Node)
                                let element = this,
                                    node = arguments[0];

                                /* Logic
                                        [if statement]

                                        --- NOTE ---
                                            #Lapys: Detect if a specific LapysJS feature is active.
                                */
                                if (LDKF.includesArray(LDKE.active, 'script-attribute')) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (LDKF.isAttr(node)) {
                                        // Initialization > (Name, Value)
                                        let name = LDKF.get.attributeName(node),
                                            value = LDKF.get.attributeValue(node);

                                        /* Logic
                                                [if statement]
                                        */
                                        if (name === 'script')
                                            // Return
                                            return LDKF.$setAttributeElement(element, name, value)
                                    }
                                }

                                // Return
                                return method.apply(element, LDKF.toArray(arguments))
                            };

                            // Return
                            return description
                        })());

                        // Set Attribute Node Namespace
                        LDKF.objectDefineProperty(currentPrototype, 'setAttributeNodeNS', (function() {
                            // Initialization > (Description, Method)
                            let description = LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'setAttributeNodeNS'),
                                method = description.value;

                            // Modification > Description > Value
                            description.value = function setAttributeNodeNS() {
                                // Initialization > (Element, Node)
                                let element = this,
                                    node = arguments[1];

                                /* Logic
                                        [if statement]

                                        --- NOTE ---
                                            #Lapys: Detect if a specific LapysJS feature is active.
                                */
                                if (LDKF.includesArray(LDKE.active, 'script-attribute')) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (LDKF.isAttr(node)) {
                                        // Initialization > (Name, Value)
                                        let name = LDKF.get.attributeName(node),
                                            value = LDKF.get.attributeValue(node);

                                        /* Logic
                                                [if statement]
                                        */
                                        if (name === 'script')
                                            // Return
                                            return LDKF.$setAttributeElement(element, name, value)
                                    }
                                }

                                // Return
                                return method.apply(element, LDKF.toArray(arguments))
                            };

                            // Return
                            return description
                        })());

                        // Set Attribute Namespace
                        LDKF.objectDefineProperty(currentPrototype, 'setAttributeNS', (function() {
                            // Initialization > (Description, Method)
                            let description = LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'setAttributeNS'),
                                method = description.value;

                            // Modification > Description > Value
                            description.value = function setAttributeNS() {
                                // Initialization > (Name, Value)
                                let element = this,
                                    name = arguments[1],
                                    value = arguments[2];

                                /* Logic
                                        [if statement]

                                        --- NOTE ---
                                            #Lapys: Detect if a specific LapysJS feature is active.
                                */
                                if (LDKF.includesArray(LDKE.active, 'script-attribute')) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (name === 'script')
                                        // Return
                                        return LDKF.$setAttributeElement(element, name, value)
                                }

                                // Return
                                return method.apply(element, LDKF.toArray(arguments))
                            };

                            // Return
                            return description
                        })());

                        // Swap Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'swapAttr', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function swapAttribute() {
                                // Initialization > (Element, Length)
                                let element = this,
                                    length = arguments.length;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (...)
                                    let $0 = arguments[0],
                                        $1 = arguments[1];

                                    // Function
                                        // Swap
                                        function swap() {
                                            // Initialization > (Old, New) Attribute
                                            let oldAttribute = {name: arguments[0]},
                                                newAttribute = {name: arguments[1]};

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.isAttr(oldAttribute.name))
                                                // Update > Old Attribute
                                                oldAttribute = {name: LDKF.get.attributeName(oldAttribute), value: LDKF.get.attributeValue(oldAttribute)};

                                            else {
                                                // Initialization > Name
                                                let name = LDKF.string(oldAttribute);

                                                // Update > Old Attribute
                                                oldAttribute = {name: name, value: LDKF.getAttributeElement(element, name)}
                                            }

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.isAttr(newAttribute.name))
                                                // Update > New Attribute
                                                newAttribute = {name: LDKF.get.attributeName(newAttribute), value: LDKF.get.attributeValue(newAttribute)};

                                            else {
                                                // Initialization > Name
                                                let name = LDKF.string(newAttribute);

                                                // Update > New Attribute
                                                newAttribute = {name: name, value: LDKF.getAttributeElement(element, name)}
                                            }

                                            /* Logic
                                                    [if statement]

                                                > Modification > Element > (...)
                                            */
                                            if (LDKF.hasAttributeElement(element, oldAttribute.name) && LDKF.hasAttributeElement(element, newAttribute.name)) {
                                                LDKF.setAttributeElement(element, oldAttribute.name, newAttribute.value);
                                                LDKF.setAttributeElement(element, newAttribute.name, oldAttribute.value)
                                            }
                                        }

                                        // Test Object Definition
                                        function testObjectDefinition(object) {
                                            // Return
                                            return LDKF.isArray(object) && (object || []).length == 2
                                        }

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (length == 2 && !testObjectDefinition($0) && !testObjectDefinition($1)) {
                                        // Swap
                                        swap($0, $1);

                                        // Return
                                        return null
                                    }

                                    else if (testObjectDefinition($0)) {
                                        // Initialization > Iterator
                                        let iterator = length;

                                        // Loop > Error
                                        while (iterator)
                                            testObjectDefinition(arguments[iterator -= 1]) || LDKF.error(["'swapAttribute'", "'Element'"], 'argument', 'Invalid argument set');

                                        /* Loop
                                                Index Arguments.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Argument
                                            let argument = arguments[iterator];

                                            // Swap
                                            swap(argument[0], argument[1])
                                        }

                                        // Return
                                        return null
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'swapAttribute'", "'Element'"], 'argument', 'Invalid argument set')
                                }

                                else
                                    // Error
                                    LDKF.error(["'swapAttribute'", "'Element'"], 'argument');

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Toggle Attribute
                        LDKF.objectDefineProperty(currentPrototype, 'toggleAttribute', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function toggleAttribute() {
                                // Initialization > (Element, Name, Force (Passed, On, Off))
                                let element = this,
                                    name = arguments[0],
                                    force = arguments[1],
                                    forcePassed = arguments.length == 2,
                                    forceOn = !!force,
                                    forceOff = forcePassed && !force;

                                /* Logic
                                        [if:else statement]
                                */
                                if (LDKF.isNull(LDKF.getAttributeElement(element, name))) {
                                    // Logic > Return
                                    if (forceOff)
                                        return !1;

                                    // Modification > Element > [Name]
                                    LDKF.setAttributeElement(element, name, '');

                                    // Return
                                    return !0
                                }

                                else {
                                    // Logic > Return
                                    if (forceOn)
                                        return !0;

                                    // Modification > Element > [Name]
                                    LDKF.removeAttributeElement(element, name);

                                    // Return
                                    return !1
                                }
                            },

                            // Writable
                            writable: !0
                        });

                        // Width
                        LDKF.objectDefineProperty(currentPrototype, 'width', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function getWidth() { return LDKF.get.elementBoundingBox(this).width },

                            // Set
                            set: function setWidth() {
                                // Initialization > Data
                                let data = arguments[0];

                                // Style > Target > Width
                                LDKF.get.htmlElementStyle(this).width = LDKF.isSafeNumber(data) ? data + 'px' : LDKF.string(data);

                                // Return
                                return data
                            }
                        });

                    /* Error Data */
                        // Message
                        LDKF.objectDefineProperty(currentPrototype = LDKO.errorProto, 'message', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'message').value,

                            // Writable
                            writable: !1
                        });

                    /* Event Target Data */
                        // Add Event Listener
                        LDKF.objectDefineProperty(currentPrototype = LDKO.eventTargetProto, 'addEventListener', (function() {
                            // Initialization > (Description, Method (Name))
                            let description = {configurable: !1, enumerable: !1, writable: !0},
                                method = (LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'addEventListener') || LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'attachEvent')).value,
                                methodName = method.name;

                            // Modification
                                // Description > Value
                                description.value = tmpObject.eventTargetPrototypeAddEventListenerDescriptorValue = function addEvent() {
                                    // Initialization > (Target, Length, Listener, Options, Type, Return Value)
                                    let target = this,
                                        length = arguments.length,
                                        listener = arguments[1],
                                        options = arguments[2],
                                        type = arguments[0],
                                        returnValue;

                                    // Error Handling
                                    try {
                                        // Update
                                            // Return Value
                                            returnValue = method.apply(target, arguments);

                                            // Temporary Object > Event Reference List
                                            LDKF.pushArray(tmpObject.eventReferenceList, (function() {
                                                // Initialization > (Listener, Options, Type)
                                                let listener = arguments[1],
                                                    options = arguments[2],
                                                    type = arguments[0];

                                                // Update > (Options, Type)
                                                length > 2 ?
                                                    (typeof options == 'boolean') && (options = {capture: !!options, once: !1, passive: !1}) :
                                                    options = {capture: !1, once: !1, passive: !1};
                                                (methodName == 'attachEvent' && (type[0] == 'o' && type[1] == 'n')) && (type = LDKF.sliceString(type, 2));

                                                // Return
                                                return {listener: listener, options: options, target: target, type: type}
                                            })(type, listener, options))
                                    } catch (error) {
                                        // Error
                                        throw error
                                    }

                                    // Return
                                    return returnValue
                                };

                            // Return
                            return description
                        })());

                        // Ancestor Query Selector
                        LDKF.objectDefineProperty(currentPrototype, 'ancestorQuerySelector', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function ancestorQuerySelector() {
                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target)) {
                                    // Initialization > Query
                                    let query = arguments.length ? LDKF.string(arguments[0]) : '';

                                    // Return
                                    return LDKF.ancestorQuerySelector.call(target, query)
                                }

                                // Return
                                return target
                            },

                            // Writable
                            writable: !0
                        });

                        // Ancestor Query Selector All
                        LDKF.objectDefineProperty(currentPrototype, 'ancestorQuerySelectorAll', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function ancestorQuerySelectorAll() {
                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target)) {
                                    // Initialization > Query
                                    let query = arguments.length ? LDKF.string(arguments[0]) : '';

                                    // Return
                                    return LDKF.customArray('LapysJSNodeList', LDKF.ancestorQuerySelectorAll.call(target, query));
                                }

                                // Return
                                return target
                            },

                            // Writable
                            writable: !0
                        });

                        LDKF.objectDefineProperty(currentPrototype, '$a', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function $a() {
                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target)) {
                                    // Initialization > (Query, Selection)
                                    let query = arguments.length ? LDKF.string(arguments[0]) : '',
                                        selection = LDKF.customArray('LapysJSNodeList', LDKF.ancestorQuerySelectorAll.call(target, query));

                                    // Return
                                    return selection.length > 1 ? selection : selection[0] || null
                                }

                                // Return
                                return target
                            },

                            // Writable
                            writable: !0
                        });

                        // All
                        LDKF.objectDefineProperty(currentPrototype, '$all', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $all() {
                                // Initialization > Target
                                let target = LDKF.isWindow(this) ?
                                    (LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0] || null) :
                                    this;

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target))
                                    // Return
                                    return LDKF.isNode(target) ? LDKF.concatArray([target], LDKF.allNodeNodes(target)) : null
                            }
                        });

                        // Children
                        LDKF.objectDefineProperty(currentPrototype, '$x', tmpObject.eventTargetProto$xDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $x() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, Selection)
                                let target = LDKF.isWindow(this) ? LDKF.get.documentChildren(LDKO.$document)[0] : this,
                                    selection = LDKF.customArray('LapysJSNodeList', LDKF.get.elementChildren(target));

                                // Return
                                return selection
                            }
                        });
                            // Definition
                            LDKF.objectDefineProperty(window, '$x', tmpObject.eventTargetProto$xDescription);

                        // Child Nodes
                        LDKF.objectDefineProperty(currentPrototype, '$X', tmpObject.eventTargetProto$XDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $X() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, Selection)
                                let target = LDKF.isWindow(this) ? LDKF.get.documentChildren(LDKO.$document)[0] : this,
                                    selection = LDKF.customArray('LapysJSNodeList', LDKF.get.nodeChildNodes(target));

                                // Return
                                return selection
                            }
                        });
                            // Definition
                            LDKF.objectDefineProperty(window, '$X', tmpObject.eventTargetProto$XDescription);

                        /* Delete Event
                                --- CODE ---
                                    #Lapys:
                                        - listener = <evaluation string> | <function>
                                        - option = <object>
                                        - type = <string>

                                        - delEvent(<type> | <type-array>[, <... type> | <... type-array>])
                                        - delEvent(<type> | <type-array>, <listener> | <listener-array>)
                                        - delEvent(<type> | <type-array>, <listener> | <listener-array>, <option> | <option-array>)

                                        - When using functions as listeners, make sure the same function is used,
                                            not unique functions with the same source code.

                                --- NOTE ---
                                    #Lapys: Unlike the `Element.prototype.delAttr` method,
                                        the objects stored as events in an event target are not constructible.

                                        - We have `Event` objects, but we do not have `EventDescription` objects
                                            that contain information such as the event listener, type and so on.

                                        - Same naming analogy proffers to `HTMLElement.prototype.delStyle`
                        */
                        LDKF.objectDefineProperty(currentPrototype, 'delEvent', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function deleteEvent() {
                                // Initialization > (Target, Length)
                                let target = this,
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    /* Initialization > (...)
                                            --- NOTE ---
                                                #Lapys: Cache the arguments.
                                    */
                                    let $0 = arguments[0],
                                        $1 = arguments[1],
                                        $2 = arguments[2];

                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (
                                        tmpObject.eventReferenceList.length &&
                                        (
                                            (length == 1 && !LDKF.isJSONLikeObject($0)) ||
                                            (length == 2 &&
                                                (
                                                    !LDKF.isJSONLikeObject($0) &&
                                                    (!LDKF.isFunction($1) && !LDKF.isJSONLikeObject($1))
                                                )
                                            ) ||
                                            (length > 3 &&
                                                (
                                                    !LDKF.isJSONLikeObject($0) &&
                                                    (!LDKF.isFunction($1) && !LDKF.isJSONLikeObject($1)) &&
                                                    !LDKF.isJSONLikeObject($2)
                                                )
                                            )
                                        )
                                    ) {
                                        // Initialization > (Arguments, Event Reference List)
                                        let args = LDKF.toArray(arguments),
                                            eventReferenceList = tmpObject.eventReferenceList;

                                        // Loop > Update > Arguments
                                        while ((function() {
                                            // Initialization > Iterator
                                            let iterator = args.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (LDKF.isArray(args[iterator -= 1]))
                                                    return !0
                                        })()) args = LDKF.$concatArray([], args);

                                        // Initialization > Iterator
                                        let iterator = arguments.length;

                                        /* Loop
                                                Index Arguments.
                                        */
                                        while (iterator) {
                                            // Initialization > (Argument, Event Reference List Iterator)
                                            let arg = LDKF.string(args[iterator -= 1]),
                                                eventReferenceListIterator = eventReferenceList.length;

                                            /* Loop
                                                    Index Event Reference List
                                            */
                                            while (eventReferenceListIterator) {
                                                // Initialization > Event Reference
                                                let eventReference = eventReferenceList[eventReferenceListIterator -= 1];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (
                                                    arg == eventReference.type &&
                                                    target === eventReference.target
                                                ) {
                                                    // Event > Target > [Event Reference > Type]
                                                    LDKF.delEvent(target, eventReference.type, eventReference.listener);

                                                    /* Modification > Event Reference > Pending
                                                            --- NOTE ---
                                                                #Lapys: — Pending to be deleted...
                                                    */
                                                    eventReference.pending = !0
                                                }
                                            }
                                        }

                                        // Initialization > Event Reference List Iterator
                                        let eventReferenceListIterator = eventReferenceList.length;

                                        /* Loop
                                                Index Event Reference List.
                                        */
                                        while (eventReferenceListIterator) {
                                            // Initialization > Event Reference
                                            let eventReference = eventReferenceList[eventReferenceListIterator -= 1];

                                            // Update > Event Reference List
                                            eventReference.pending && (eventReferenceList[eventReferenceListIterator] = void 0)
                                        }

                                        // Update > Temporary Object > Event Reference List
                                        LDKF.resetArray(tmpObject.eventReferenceList, LDKF.filterArray(eventReferenceList, function(item) { return !LDKF.isUndefined(item) }));

                                        // Return
                                        return !0
                                    }

                                    else if (
                                        !tmpObject.eventReferenceList.length ||
                                        (
                                            (length == 2 &&
                                                LDKF.isString($0) && LDKF.isFunction($1)
                                            ) ||
                                            (length > 3 &&
                                                LDKF.isString($0) && LDKF.isFunction($1) &&
                                                LDKF.isJSONLikeObject($2)
                                            )
                                        )
                                    ) {
                                        // Initialization > (Event Reference List, Iterator)
                                        let eventReferenceList = tmpObject.eventReferenceList,
                                            iterator = eventReferenceList.length;

                                        /* Loop
                                                Index Event Reference List.
                                        */
                                        while (iterator) {
                                            // Initialization > Event Reference
                                            let eventReference = eventReferenceList[iterator -= 1];

                                            // Update > Event Reference List
                                            (
                                                target === eventReference.target &&
                                                $1 === eventReference.listener &&
                                                (length > 3 ?
                                                    (
                                                        (LDKF.isBoolean($2) ? ($2 == eventReference.options.capture) : !1) ||
                                                        (
                                                            !!$2.capture === eventReference.options.capture &&
                                                            !!$2.once === eventReference.options.once &&
                                                            !!$2.passive === eventReference.options.passive
                                                        )
                                                    ) :
                                                    !0
                                                ) &&
                                                $0 == eventReference.type
                                            ) && (eventReferenceList[iterator] = void 0)
                                        }

                                        // Update > Temporary Object > Event Reference List
                                        LDKF.resetArray(tmpObject.eventReferenceList, LDKF.filterArray(eventReferenceList, function(item) { return !LDKF.isUndefined(item) }));

                                        // Event > Target > (...)
                                        length > 3 ? LDKF.delEvent(target, $0, $1, $2) : LDKF.delEvent(target, $0, $1);

                                        // Return
                                        return !0
                                    }

                                    else if (tmpObject.eventReferenceList.length) {
                                        // Initialization > (Event References, Event Reference List (Length, Iterator), Iterator)
                                        let eventReferences,
                                            eventReferenceList = tmpObject.eventReferenceList,
                                            eventReferenceListLength = eventReferenceList.length,
                                            eventReferenceListIterator = eventReferenceListLength,
                                            iterator = 0;

                                        // Error Handling
                                        try {
                                            // Update > Event References
                                            eventReferences = LDKF.queryEventReferences.apply(target, arguments)
                                        } catch (error) {
                                            // Error
                                            LDKF.error(["'delEvent'", "'EventTarget'"], 'argument', LDKF.sliceString(error.message, LDKI.errorMessagePrefix.length))
                                        }

                                        // Update > Length
                                        length = eventReferences.length;

                                        /* Loop
                                                Index Event References.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > (Event Reference, Listener, Options, Type)
                                            let eventReference = eventReferences[iterator],
                                                listener = eventReference.listener,
                                                options = eventReference.options,
                                                type = eventReference.type;

                                            /* Loop
                                                    Index Event Reference List.
                                            */
                                            while (eventReferenceListIterator) {
                                                // Initialization > Event Reference List Event Reference
                                                let eventReferenceListEventReference = eventReferenceList[eventReferenceListIterator -= 1];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (eventReferenceListEventReference) {
                                                    // Initialization > Event Reference List Event Reference (Listener, Options, Type)
                                                    let eventReferenceListEventReferenceListener = eventReferenceListEventReference.listener,
                                                        eventReferenceListEventReferenceOptions = eventReferenceListEventReference.options,
                                                        eventReferenceListEventReferenceType = eventReferenceListEventReference.type;

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (
                                                        target === eventReferenceListEventReferenceListener.target &&
                                                        (
                                                            LDKF.get.functionBody(listener) == LDKF.get.functionBody(eventReferenceListEventReferenceListener) &&
                                                            LDKF.get.functionHead(listener) == LDKF.get.functionHead(eventReferenceListEventReferenceListener)
                                                        ) &&
                                                        (
                                                            options.capture == eventReferenceListEventReferenceOptions.capture &&
                                                            options.once == eventReferenceListEventReferenceOptions.once &&
                                                            options.passive == eventReferenceListEventReferenceOptions.passive
                                                        ) &&
                                                        type == eventReferenceListEventReferenceType
                                                    ) {
                                                        // Update > Event Reference List
                                                        eventReferenceList[eventReferenceListIterator] = void 0;

                                                        // Event > Target > (...)
                                                        LDKF.delEvent(target, eventReferenceListEventReferenceType, eventReferenceListEventReferenceListener)
                                                    }
                                                }
                                            }

                                            // Update > Event Reference List Iterator
                                            eventReferenceListIterator = eventReferenceListLength
                                        }

                                        // Update > Temporary Object > Event Reference List
                                        LDKF.resetArray(tmpObject.eventReferenceList, LDKF.filterArray(eventReferenceList, function(item) { return !LDKF.isUndefined(item) }));

                                        // Return
                                        return !0
                                    }
                                }

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Descendant Query Selector
                        LDKF.objectDefineProperty(currentPrototype, 'descendantQuerySelector', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function descendantQuerySelector() {
                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target)) {
                                    // Initialization > Query
                                    let query = arguments.length ? LDKF.string(arguments[0]) : '';

                                    // Return
                                    return LDKF.descendantQuerySelector.call(target, query)
                                }

                                // Return
                                return target
                            },

                            // Writable
                            writable: !0
                        });

                        // Descendant Query Selector All
                        LDKF.objectDefineProperty(currentPrototype, 'descendantQuerySelectorAll', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function descendantQuerySelectorAll() {
                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target)) {
                                    // Initialization > Query
                                    let query = arguments.length ? LDKF.string(arguments[0]) : '';

                                    // Return
                                    return LDKF.customArray('LapysJSNodeList', LDKF.descendantQuerySelectorAll.call(target, query));
                                }

                                // Return
                                return target
                            },

                            // Writable
                            writable: !0
                        });

                        LDKF.objectDefineProperty(currentPrototype, '$d', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function $d() {
                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                /* Logic
                                        [if:else if statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    // Return
                                    return null;

                                else if (!LDKF.isNull(target)) {
                                    // Initialization > (Query, Selection)
                                    let query = arguments.length ? LDKF.string(arguments[0]) : '',
                                        selection = LDKF.customArray('LapysJSNodeList', LDKF.descendantQuerySelectorAll.call(target, query));

                                    // Return
                                    return selection.length > 1 ? selection : selection[0] || null
                                }

                                // Return
                                return target
                            },

                            // Writable
                            writable: !0
                        });

                        // First Child
                        LDKF.objectDefineProperty(currentPrototype, '$1', tmpObject.eventTargetPrototype$1Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $1() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                // Return
                                return LDKF.isNull(target) ? target : LDKF.get.$parentNodeFirstElementChild(target) || LDKF.get.nodeFirstChild(target) || null
                            }
                        });

                        // Second Child
                        LDKF.objectDefineProperty(currentPrototype, '$2', tmpObject.eventTargetPrototype$2Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $2() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $1 = tmpObject.eventTargetPrototype$1Description.get.call(target);

                                // Return
                                return LDKF.isNull($1) ? null : ((LDKF.isElement($1) ? LDKF.get.elementNextElementSibling($1) || LDKF.get.nodeNextSibling($1) : LDKF.get.nodeNextSibling($1)) || null)
                            }
                        });

                        // Third Child
                        LDKF.objectDefineProperty(currentPrototype, '$3', tmpObject.eventTargetPrototype$3Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $3() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $2 = tmpObject.eventTargetPrototype$2Description.get.call(target);

                                // Return
                                return LDKF.isNull($2) ? null : ((LDKF.isElement($2) ? LDKF.get.elementNextElementSibling($2) || LDKF.get.nodeNextSibling($2) : LDKF.get.nodeNextSibling($2)) || null)
                            }
                        });

                        // Fourth Child
                        LDKF.objectDefineProperty(currentPrototype, '$4', tmpObject.eventTargetPrototype$4Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $4() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $3 = tmpObject.eventTargetPrototype$3Description.get.call(target);

                                // Return
                                return LDKF.isNull($3) ? null : ((LDKF.isElement($3) ? LDKF.get.elementNextElementSibling($3) || LDKF.get.nodeNextSibling($3) : LDKF.get.nodeNextSibling($3)) || null)
                            }
                        });

                        // Fifth Child
                        LDKF.objectDefineProperty(currentPrototype, '$5', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $5() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $4 = tmpObject.eventTargetPrototype$4Description.get.call(target);

                                // Return
                                return LDKF.isNull($4) ? null : ((LDKF.isElement($4) ? LDKF.get.elementNextElementSibling($4) || LDKF.get.nodeNextSibling($4) : LDKF.get.nodeNextSibling($4)) || null)
                            }
                        });

                        // Get Elements By Class Name
                        LDKF.objectDefineProperty(currentPrototype, '$c', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function $c() {
                                // Initialization > (Target, Options, Query, Selection)
                                let target = LDKF.isWindow(this) ? ((this === window ? LDKO.$document : this.document) || null) : this,
                                    options = LDKF.sliceArray(LDKF.toArray(arguments), 1),
                                    query = LDKF.string(arguments[0]),
                                    selection = [];

                                /* Logic
                                        [if:else if:else statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    return null;

                                else if (LDKF.isDocument(target))
                                    // Update > Selection
                                    selection = LDKF.$querySelectorAllDocument(target, query == '*' ? '[class]' : "[class='" + query + "']");

                                else if (LDKF.isDocumentFragment(target))
                                    // Update > Selection
                                    selection = LDKF.querySelectorAllDocumentFragment(target, query == '*' ? '[class]' : "[class='" + query + "']");

                                else if (LDKF.isElement(target))
                                    // Update > Selection
                                    selection = LDKF.querySelectorAllElement(target, query == '*' ? '[class]' : "[class='" + query + "']");

                                else
                                    // Error
                                    LDKF.error(["'$c'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                // Update > Selection
                                selection = LDKF.customArray('LapysJSNodeList', LDKF.arrayFrom(selection));

                                /* Logic
                                        [if statement]
                                */
                                if (options.length) {
                                    // Function > Test
                                    function test() {
                                        // Initialization > Option
                                        let option = arguments[0];

                                        // Return
                                        return option == 'first' || option == 'last' || option == 'list' || LDKF.isSafeInteger(option) ? !0 : LDKF.warn(option, ['not', 'a'], 'valid query selection option')
                                    }

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (options.length > 1) {
                                        // Initialization > (Results, Iterator, Length)
                                        let results = [],
                                            iterator = 0,
                                            length = options.length;

                                        /* Loop
                                                Index Options.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Option
                                            let option = options[iterator];

                                            // Logic
                                            if (test(option))
                                                /* Logic
                                                        [switch:case:default statement]

                                                    > Update > Results
                                                */
                                                switch (option) {
                                                    // First
                                                    case 'first': LDKF.pushArray(results, selection[0] || null); break;

                                                    // Last
                                                    case 'last': LDKF.pushArray(results, selection[selection.length - 1] || null); break;

                                                    // List
                                                    case 'list': LDKF.pushArray(results, selection); break;

                                                    // [Default]
                                                    default: LDKF.pushArray(results, selection[option] || null)
                                                }
                                        }

                                        // Return
                                        return LDKF.customArray('LapysJSNodeList', results)
                                    }

                                    else {
                                        // Initialization > Option
                                        let option = options[0];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (test(option)) {
                                            /* Logic
                                                    [switch:case statement]
                                            */
                                            switch (option) {
                                                // First
                                                case 'first': return selection[0] || null; break;

                                                // Last
                                                case 'last': return selection[selection.length - 1] || null; break;

                                                // List
                                                case 'list': return selection
                                            }

                                            // Return
                                            return selection[option] || null
                                        }
                                    }
                                }

                                // Return
                                return selection.length > 1 ? selection : selection[0] || null
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Elements By ID
                        LDKF.objectDefineProperty(currentPrototype, '$i', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function $i() {
                                // Initialization > (Target, Options, Query, Selection)
                                let target = LDKF.isWindow(this) ? ((this === window ? LDKO.$document : this.document) || null) : this,
                                    options = LDKF.sliceArray(LDKF.toArray(arguments), 1),
                                    query = LDKF.string(arguments[0]),
                                    selection = [];

                                /* Logic
                                        [if:else if:else statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    return null;

                                else if (LDKF.isDocument(target))
                                    // Update > Selection
                                    selection = LDKF.$querySelectorAllDocument(target, query == '*' ? '[id]' : "[id='" + query + "']");

                                else if (LDKF.isDocumentFragment(target))
                                    // Update > Selection
                                    selection = LDKF.querySelectorAllDocumentFragment(target, query == '*' ? '[id]' : "[id='" + query + "']");

                                else if (LDKF.isElement(target))
                                    // Update > Selection
                                    selection = LDKF.querySelectorAllElement(target, query == '*' ? '[id]' : "[id='" + query + "']");

                                else
                                    // Error
                                    LDKF.error(["'$i'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                // Update > Selection
                                selection = LDKF.customArray('LapysJSNodeList', LDKF.arrayFrom(selection));

                                /* Logic
                                        [if statement]
                                */
                                if (options.length) {
                                    // Function > Test
                                    function test() {
                                        // Initialization > Option
                                        let option = arguments[0];

                                        // Return
                                        return option == 'first' || option == 'last' || option == 'list' || LDKF.isSafeInteger(option) ? !0 : LDKF.warn(option, ['not', 'a'], 'valid query selection option')
                                    }

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (options.length > 1) {
                                        // Initialization > (Results, Iterator, Length)
                                        let results = [],
                                            iterator = 0,
                                            length = options.length;

                                        /* Loop
                                                Index Options.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Option
                                            let option = options[iterator];

                                            // Logic
                                            if (test(option))
                                                /* Logic
                                                        [switch:case:default statement]

                                                    > Update > Results
                                                */
                                                switch (option) {
                                                    // First
                                                    case 'first': LDKF.pushArray(results, selection[0] || null); break;

                                                    // Last
                                                    case 'last': LDKF.pushArray(results, selection[selection.length - 1] || null); break;

                                                    // List
                                                    case 'list': LDKF.pushArray(results, selection); break;

                                                    // [Default]
                                                    default: LDKF.pushArray(results, selection[option] || null)
                                                }
                                        }

                                        // Return
                                        return LDKF.customArray('LapysJSNodeList', results)
                                    }

                                    else {
                                        // Initialization > Option
                                        let option = options[0];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (test(option)) {
                                            /* Logic
                                                    [switch:case statement]
                                            */
                                            switch (option) {
                                                // First
                                                case 'first': return selection[0] || null; break;

                                                // Last
                                                case 'last': return selection[selection.length - 1] || null; break;

                                                // List
                                                case 'list': return selection
                                            }

                                            // Return
                                            return selection[option] || null
                                        }
                                    }
                                }

                                // Return
                                return selection.length > 1 ? selection : selection[0] || null
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Elements By Tag Name
                        LDKF.objectDefineProperty(currentPrototype, '$t', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function $t() {
                                // Initialization > (Target, Options, Query, Selection)
                                let target = LDKF.isWindow(this) ? ((this === window ? LDKO.$document : this.document) || null) : this,
                                    options = LDKF.sliceArray(LDKF.toArray(arguments), 1),
                                    query = LDKF.string(arguments[0]),
                                    selection = [];

                                /* Logic
                                        [if:else if:else statement]
                                */
                                if (LDKF.isXmlHttpRequestEventTarget(target))
                                    return null;

                                else if (LDKF.isDocument(target))
                                    // Update > Selection
                                    selection = LDKF.$getElementsByTagNameDocument(target, query);

                                else if (LDKF.isDocumentFragment(target))
                                    // Update > Selection
                                    selection = LDKF.getElementsByTagNameDocumentFragment(target, query);

                                else if (LDKF.isElement(target))
                                    // Update > Selection
                                    selection = LDKF.getElementsByTagNameElement(target, query);

                                else
                                    // Error
                                    LDKF.error(["'$t'", "'EventTarget'"], 'argument', 'Could not retrieve selection');

                                // Update > Selection
                                selection = LDKF.customArray('LapysJSNodeList', LDKF.arrayFrom(selection));

                                /* Logic
                                        [if statement]
                                */
                                if (options.length) {
                                    // Function > Test
                                    function test() {
                                        // Initialization > Option
                                        let option = arguments[0];

                                        // Return
                                        return option == 'first' || option == 'last' || option == 'list' || LDKF.isSafeInteger(option) ? !0 : LDKF.warn(option, ['not', 'a'], 'valid query selection option')
                                    }

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (options.length > 1) {
                                        // Initialization > (Results, Iterator, Length)
                                        let results = [],
                                            iterator = 0,
                                            length = options.length;

                                        /* Loop
                                                Index Options.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Option
                                            let option = options[iterator];

                                            // Logic
                                            if (test(option))
                                                /* Logic
                                                        [switch:case:default statement]

                                                    > Update > Results
                                                */
                                                switch (option) {
                                                    // First
                                                    case 'first': LDKF.pushArray(results, selection[0] || null); break;

                                                    // Last
                                                    case 'last': LDKF.pushArray(results, selection[selection.length - 1] || null); break;

                                                    // List
                                                    case 'list': LDKF.pushArray(results, selection); break;

                                                    // [Default]
                                                    default: LDKF.pushArray(results, selection[option] || null)
                                                }
                                        }

                                        // Return
                                        return LDKF.customArray('LapysJSNodeList', results)
                                    }

                                    else {
                                        // Initialization > Option
                                        let option = options[0];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (test(option)) {
                                            /* Logic
                                                    [switch:case statement]
                                            */
                                            switch (option) {
                                                // First
                                                case 'first': return selection[0] || null; break;

                                                // Last
                                                case 'last': return selection[selection.length - 1] || null; break;

                                                // List
                                                case 'list': return selection
                                            }

                                            // Return
                                            return selection[option] || null
                                        }
                                    }
                                }

                                // Return
                                return selection.length > 1 ? selection : selection[0] || null
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Event
                        LDKF.objectDefineProperty(currentPrototype, 'getEvent', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getEvent() {
                                // Initialization > (Target, Arguments, All, Event References List, Iterator, Length, Result)
                                let target = this,
                                    args = LDKF.toArray(arguments),
                                    all = !args.length,
                                    eventReferencesList = tmpObject.eventReferenceList,
                                    iterator = 0,
                                    length = eventReferencesList.length,
                                    result = LDKF.customArray('EventReference');

                                // Loop > Update > Arguments
                                while ((function() {
                                    // Initialization > Iterator
                                    let iterator = args.length;

                                    // Loop > Logic > Return
                                    while (iterator)
                                        if (LDKF.isArray(args[iterator -= 1]))
                                            return !0
                                })()) args = LDKF.$concatArray([], args);

                                /* Loop
                                        Index Event References List.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > (Event Reference, Type)
                                    let eventReference = eventReferencesList[iterator],
                                        type = eventReference.type;

                                    // Update > Result
                                    (
                                        target === eventReference.target &&
                                        (
                                            all ||
                                            (function() {
                                                // Initialization > Iterator
                                                let iterator = args.length;

                                                // Loop > Logic > Return
                                                while (iterator)
                                                    if (LDKF.string(args[iterator -= 1]) == type)
                                                        return !0
                                            })()
                                        )
                                    ) && LDKF.pushArray(result, LDKF.customObject('EventOption', {
                                        // Listener
                                        listener: eventReference.listener,

                                        // Options
                                        options: eventReference.options,

                                        // Type
                                        type: type
                                    }))
                                }

                                // Return
                                return result
                            },

                            // Writable
                            writable: !0
                        });

                        // Last Child
                        LDKF.objectDefineProperty(currentPrototype, '$n', tmpObject.eventTargetPrototype$nDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $n() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > Target
                                let target = LDKF.isDocument(this) || LDKF.isWindow(this) ?
                                    ((LDKF.isDocument(this) ? LDKF.get.documentChildren(this)[0] : LDKF.get.documentChildren(this === window ? LDKO.$document : this.document)[0]) || null) :
                                    (LDKF.isDocumentFragment(this) ? null : this);

                                // Return
                                return LDKF.isNull(target) ? target : LDKF.get.$parentNodeLastElementChild(target) || LDKF.get.nodeLastChild(target) || null
                            }
                        });

                        // Penult Child
                        LDKF.objectDefineProperty(currentPrototype, '$n1', tmpObject.eventTargetPrototype$n1Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $n1() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $n = tmpObject.eventTargetPrototype$nDescription.get.call(target);

                                // Return
                                return LDKF.isNull($n) ? null : ((LDKF.isElement($n) ? LDKF.get.elementPreviousElementSibling($n) || LDKF.get.nodePreviousSibling($n) : LDKF.get.nodePreviousSibling($n)) || null)
                            }
                        });

                        LDKF.objectDefineProperty(currentPrototype, '$n2', tmpObject.eventTargetPrototype$n2Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $n2() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $n1 = tmpObject.eventTargetPrototype$n1Description.get.call(target);

                                // Return
                                return LDKF.isNull($n1) ? null : ((LDKF.isElement($n1) ? LDKF.get.elementPreviousElementSibling($n1) || LDKF.get.nodePreviousSibling($n1) : LDKF.get.nodePreviousSibling($n1)) || null)
                            }
                        });

                        LDKF.objectDefineProperty(currentPrototype, '$n3', tmpObject.eventTargetPrototype$n3Description = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $n3() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $n2 = tmpObject.eventTargetPrototype$n2Description.get.call(target);

                                // Return
                                return LDKF.isNull($n2) ? null : ((LDKF.isElement($n2) ? LDKF.get.elementPreviousElementSibling($n2) || LDKF.get.nodePreviousSibling($n2) : LDKF.get.nodePreviousSibling($n2)) || null)
                            }
                        });

                        LDKF.objectDefineProperty(currentPrototype, '$n4', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $n4() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, (...))
                                let target = this,
                                    $n3 = tmpObject.eventTargetPrototype$n3Description.get.call(target);

                                // Return
                                return LDKF.isNull($n3) ? null : ((LDKF.isElement($n3) ? LDKF.get.elementPreviousElementSibling($n3) || LDKF.get.nodePreviousSibling($n3) : LDKF.get.nodePreviousSibling($n3)) || null)
                            }
                        });

                        // Query Selector
                        LDKF.objectDefineProperty(currentPrototype, '$$', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function $$() {
                                // Initialization > (Target, Options, Query, Selection)
                                let target = LDKF.isWindow(this) ? ((this === window ? LDKO.$document : this.document) || null) : this,
                                    options = LDKF.sliceArray(LDKF.toArray(arguments), 1),
                                    query = LDKF.string(arguments[0]),
                                    selection = [];

                                // Error Handling
                                try {
                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isXmlHttpRequestEventTarget(target))
                                        return null;

                                    else if (LDKF.isDocument(target))
                                        // Update > Selection
                                        selection = LDKF.$querySelectorAllDocument(target, query);

                                    else if (LDKF.isDocumentFragment(target))
                                        // Update > Selection
                                        selection = LDKF.querySelectorAllDocumentFragment(target, query);

                                    else if (LDKF.isElement(target))
                                        // Update > Selection
                                        selection = LDKF.querySelectorAllElement(target, query);

                                    else
                                        // Error
                                        LDKF.error(["'$$'", "'EventTarget'"], 'argument', 'Could not retrieve selection')
                                } catch (error) {
                                    // Error
                                    (error.constructor === LDKO.domException) && LDKF.error(["'$$'", "'EventTarget'"], 'argument', "Invalid selector value '" + query + "'");
                                    throw error
                                }

                                // Update > Selection
                                selection = LDKF.customArray('LapysJSNodeList', LDKF.arrayFrom(selection));

                                /* Logic
                                        [if statement]
                                */
                                if (options.length) {
                                    // Function > Test
                                    function test() {
                                        // Initialization > Option
                                        let option = arguments[0];

                                        // Return
                                        return option == 'first' || option == 'last' || option == 'list' || LDKF.isSafeInteger(option) ? !0 : LDKF.warn(option, ['not', 'a'], 'valid query selection option')
                                    }

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (options.length > 1) {
                                        // Initialization > (Results, Iterator, Length)
                                        let results = [],
                                            iterator = 0,
                                            length = options.length;

                                        /* Loop
                                                Index Options.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Option
                                            let option = options[iterator];

                                            // Logic
                                            if (test(option))
                                                /* Logic
                                                        [switch:case:default statement]

                                                    > Update > Results
                                                */
                                                switch (option) {
                                                    // First
                                                    case 'first': LDKF.pushArray(results, selection[0] || null); break;

                                                    // Last
                                                    case 'last': LDKF.pushArray(results, selection[selection.length - 1] || null); break;

                                                    // List
                                                    case 'list': LDKF.pushArray(results, selection); break;

                                                    // [Default]
                                                    default: LDKF.pushArray(results, selection[option] || null)
                                                }
                                        }

                                        // Return
                                        return LDKF.customArray('LapysJSNodeList', results)
                                    }

                                    else {
                                        // Initialization > Option
                                        let option = options[0];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (test(option)) {
                                            /* Logic
                                                    [switch:case statement]
                                            */
                                            switch (option) {
                                                // First
                                                case 'first': return selection[0] || null; break;

                                                // Last
                                                case 'last': return selection[selection.length - 1] || null; break;

                                                // List
                                                case 'list': return selection
                                            }

                                            // Return
                                            return selection[option] || null
                                        }
                                    }
                                }

                                // Return
                                return selection.length > 1 ? selection : selection[0] || null
                            },

                            // Writable
                            writable: !0
                        });

                        // Random Selector
                        LDKF.objectDefineProperty(currentPrototype, '$r', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function $r() {
                                // Logic > Return
                                if (LDKF.isXmlHttpRequestEventTarget(this))
                                    return null;

                                // Initialization > (Target, Elements, Length)
                                let target = LDKF.isWindow(this) ? ((this === window ? LDKO.$document : this.document) || null) : this,
                                    elements = target === document ? LDKF.get.documentAll() : LDKF.get.$documentAll(target),
                                    length = elements.length;

                                // Return
                                return length ? elements[LDKF.numberParseInt(LDKF.mathRandom() * length)] : null
                            }
                        });

                        // Remove Event Listener
                        LDKF.objectDefineProperty(currentPrototype = LDKO.eventTargetProto, 'removeEventListener', (function() {
                            // Initialization > (Description, Method (Name))
                            let description = {configurable: !1, enumerable: !1, writable: !0},
                                method = (LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'removeEventListener') || LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'detachEvent')).value,
                                methodName = method.name;

                            // Modification
                                // Description > Value
                                description.value = tmpObject.eventTargetPrototypeRemoveEventListenerDescriptorValue = function removeEvent() {
                                    // Initialization > (Target, Length, Listener, Options, Type, Return Value)
                                    let target = this,
                                        length = arguments.length,
                                        listener = arguments[1],
                                        options = arguments[2],
                                        type = arguments[0],
                                        returnValue;

                                    // Error Handling
                                    try {
                                        // Update
                                            // Return Value
                                            returnValue = method.apply(target, arguments);

                                            // (...)
                                            (function() {
                                                // Initialization > (Listener, Options, Type)
                                                let listener = arguments[1],
                                                    options = arguments[2],
                                                    type = arguments[0];

                                                // Update > (Options, Type)
                                                length > 2 ?
                                                    (typeof options == 'boolean') && (options = {capture: !!options, once: !1, passive: !1}) :
                                                    options = {capture: !1, once: !1, passive: !1};
                                                (methodName == 'detachEvent' && (type[0] == 'o' && type[1] == 'n')) && (type = LDKF.sliceString(type, 2));

                                                // Initialization > Iterator
                                                let iterator = tmpObject.eventReferenceList.length;

                                                /* Loop
                                                        Index Temporary Object > Event Reference List
                                                */
                                                while (iterator) {
                                                    // Initialization > Event Reference
                                                    let eventReference = tmpObject.eventReferenceList[iterator -= 1];

                                                    // Logic
                                                    if (
                                                        eventReference.listener === listener &&
                                                        eventReference.options === options &&
                                                        eventReference.target === target &&
                                                        eventReference.type === type
                                                    ) {
                                                        // Update > Temporary Object > Event Reference List
                                                        LDKF.spliceArray(tmpObject.eventReferenceList, iterator, 1);

                                                        // Break
                                                        break
                                                    }
                                                }
                                            })(type, listener, options)
                                    } catch (error) {
                                        // Error
                                        throw error
                                    }

                                    // Return
                                    return returnValue
                                };

                            // Return
                            return description
                        })());

                        // Run Event
                        LDKF.objectDefineProperty(currentPrototype, 'runEvent', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function runEvent() {
                                // Initialization > (Target, Type, Length)
                                let target = this,
                                    type = LDKF.string(arguments[0]),
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Initialization > (Event, Test)
                                    let event,
                                        test = LDKF.isNativeFunction(LDKO.documentCreateEvent);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (test) {
                                        // Update > Event
                                        event = LDKF.createEventDocument('HTMLEvents');

                                        // Initialize Event > Event
                                        LDKF.initEventEvent(event, type, !0, !0);
                                    }

                                    else {
                                        // Update > Event
                                        event = LDKO.documentCreateEventObject.call(LDKO.$document)

                                        // Modification > Event > Event Type
                                        event.eventType = type;
                                    }

                                    // Modification > Event > Event Name
                                    event.eventName = type;

                                    // (...)
                                    test ?
                                        LDKF.dispatchEventEventTarget(target, event) :
                                        LDKF.fireEventEventTarget(target, 'on' + event.eventType, event);

                                    // Return
                                    return !0
                                }

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Set Event
                        LDKF.objectDefineProperty(currentPrototype, 'setEvent', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function setEvent() {
                                // Initialization > (Target, Event References, Length)
                                let target = this,
                                    eventReferences = [],
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Initialization > (Event References, Iterator)
                                    let eventReferences,
                                        iterator = 0;

                                    // Error Handling
                                    try {
                                        // Update > Event References
                                        eventReferences = LDKF.queryEventReferences.apply(target, arguments)
                                    } catch (error) {
                                        // Error
                                        LDKF.error(["'setEvent'", "'EventTarget'"], 'argument', LDKF.sliceString(error.message, LDKI.errorMessagePrefix.length))
                                    }

                                    // Update > Length
                                    length = eventReferences.length;

                                    /* Loop
                                            Index Event References.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > (Event Reference, Listener, Options, Type)
                                        let eventReference = eventReferences[iterator],
                                            listener = eventReference.listener,
                                            options = eventReference.options,
                                            type = eventReference.type;

                                        // Event > Target > [Type]
                                        LDKF.addEvent(eventReference.target = target, type, listener, options);

                                        // Update > Event References
                                        eventReferences[iterator] = LDKF.customObject('EventOption', eventReference)
                                    }

                                    // Return
                                    return LDKF.customArray('EventReferenceList', eventReferences)
                                }
                            },

                            // Writable
                            writable: !0
                        });

                    /* Function Data */
                        // Apply
                        LDKF.objectDefineProperty(currentPrototype = LDKO.funcProto, 'apply', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'apply').value,

                            // Writable
                            writable: !1
                        });

                        // Body
                        LDKF.objectDefineProperty(currentPrototype, 'body', new (function Object() {
                            // Initialization > Target
                            let $that = this;

                            // Modification > Target
                                // Configurable
                                $that.configurable = !0;

                                // Enumerable
                                $that.enumerable = !1;

                                // Get
                                $that.get = function getBody() {
                                    // Initialization > (Target, Allow Parsing, Code (Length), (Function Head (Last)) Index, (First, Parse-Lock) Character, (Update) Stream)
                                    let that = this,
                                        allowParsing = !0,
                                        code = LDKF.toFunctionString(that),
                                        codeLength = code.length,
                                        functionHeadIndex = -1,
                                        functionHeadLastIndex = functionHeadIndex,
                                        index = 0,
                                        firstCharacter = code[index],
                                        parseLockCharacter = '',
                                        stream = '',
                                        updateStream = !1;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (firstCharacter == 'f' || firstCharacter == '(')
                                        /* Loop
                                                Iterate through Code.
                                        */
                                        for (index; index < codeLength; index += 1) {
                                            // Initialization > (Character, Next Character)
                                            let character = code[index],
                                                nextCharacter = code[index + 1];

                                            // Update > Stream
                                            updateStream && (stream += character);

                                            if (allowParsing) {
                                                // Logic > Update
                                                    // Allow Parsing
                                                    if (
                                                        character == '/' &&
                                                        (nextCharacter == '*' || nextCharacter == '/')
                                                    )
                                                        allowParsing = !1;

                                                    // Allow Parsing, Parse-Lock Character
                                                    if (character == '"' || character == "'" || character == '`') {
                                                        allowParsing = !1;
                                                        parseLockCharacter = character
                                                    }

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (!updateStream) {
                                                    // Update > (Function Head (Last) Index. Update Stream)
                                                    (character == '(') && (functionHeadIndex += 1);
                                                    (character == ')') && (functionHeadLastIndex += 1);
                                                    (functionHeadIndex == functionHeadLastIndex && functionHeadLastIndex != -1) && (updateStream = !0)
                                                }
                                            }

                                            else if (
                                                character == '\n' ||
                                                (character == '*' && nextCharacter == '/') ||
                                                (
                                                    (character == '"' || character == "'" || character == '`') &&
                                                    character == parseLockCharacter
                                                )
                                            )
                                                // Update > Allow Parsing
                                                allowParsing = !0
                                        }

                                    else
                                        /* Loop
                                                Iterate through Code.
                                        */
                                        for (index; index < codeLength; index += 1) {
                                            // Initialization > Character
                                            let character = code[index];

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (updateStream)
                                                // Update > Stream
                                                stream += character;

                                            else
                                                // Update > Update Stream
                                                (code[index - 2] == '=' && code[index - 1] == '>') && (updateStream = !0)
                                        }

                                    // Return
                                    return stream
                                };

                                // Set
                                $that.set = function setBody() {
                                    // Initialization > (Allow Parsing, Target, Code (Length), Body, Iterator)
                                    let allowParsing = !1,
                                        that = this,
                                        code = $that.get.call(that),
                                        codeLength = code.length,
                                        body = '',
                                        iterator = +allowParsing;

                                    /* Logic
                                            If
                                                the function body is delimited.
                                    */
                                    if ((function(code) {
                                        for (iterator = 0; iterator < codeLength; iterator += 1) {
                                            let character = code[iterator];

                                            if (character != '{' && character != ' ')
                                                return !1;

                                            else if (character == '{')
                                                return !0
                                        }
                                    })(code)) {
                                        /* Loop
                                                Iterate through Code.
                                        */
                                        for (iterator = 0; iterator < codeLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = code[iterator];

                                            /* Logic
                                                    [if:else if statement]

                                                > Update > (Body, Allow Parsing)
                                            */
                                            if (allowParsing)
                                                body += character;

                                            else if (character == '{')
                                                allowParsing = !0
                                        }

                                        /* Loop
                                                [while statement]

                                                --- NOTE ---
                                                    #Lapys: Trim trailing characters (in an expensive way: slicing).

                                            > Update > Body
                                        */
                                        while (
                                            body[body.length - 1] == '}' ||
                                            body[body.length - 1] == ' '
                                        )
                                            body = LDKF.sliceString(body, 0, -1);
                                    }

                                    else
                                        // Update > Body
                                        body = code;

                                    // Return
                                    return LDKF.$func(that.name, LDKF.get.functionParameters(that), arguments[0], (function(code) {
                                        /* Loop
                                                Iterate through Code.

                                                --- NOTE ---
                                                    #Lapys: Determine if the function is an arrow function or not.
                                        */
                                        for (iterator = 0; iterator < codeLength; iterator += 1) {
                                            // Initialization > ((Next) Character, Index)
                                            let character = code[iterator],
                                                index = LDKF.indexOfString(code, body),
                                                nextCharacter = code[iterator + 1];

                                            // Logic > Return
                                            if (character == '=' && nextCharacter == '>' && iterator < index)
                                                return !0
                                        }
                                    })(code))
                                };

                            // Return
                            return tmpObject.functionPrototypeBodyDescription = $that
                        }));

                        // Call
                        LDKF.objectDefineProperty(currentPrototype, 'call', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'call').value,

                            // Writable
                            writable: !1
                        });

                        // Head
                        LDKF.objectDefineProperty(currentPrototype, 'head', new (function Object() {
                            // Initialization > Target
                            let $that = this;

                            // Modification > Target
                                // Configurable
                                $that.configurable = !0;

                                // Enumerable
                                $that.enumerable = !1;

                                // Get
                                $that.get = function getHead() {
                                    // Initialization > (Target, Allow Parsing, Code (Length), (Function Head (Last)) Index, (First, Parse-Lock) Character, (Update) Stream)
                                    let that = this,
                                        code = LDKF.toFunctionString(that),
                                        codeLength = code.length,
                                        index = 0,
                                        firstCharacter = code[index],
                                        functionHeadIndex = -1,
                                        functionHeadLastIndex = functionHeadIndex,
                                        preStream = '',
                                        stream = preStream;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (firstCharacter == 'f' || firstCharacter == '(') {
                                        /* Loop
                                                Iterate through Code.
                                        */
                                        for (index; index < codeLength; index += 1) {
                                            // Initialization > (Next) Character
                                            let character = code[index],
                                                nextCharacter = code[index + 1];

                                            // Update > (Function Head (Last) Index, (Stream | Pre-Stream))
                                            (character == '(') && (functionHeadIndex += 1);
                                            functionHeadIndex != functionHeadLastIndex ? stream += character : preStream += character;
                                            (character == ')') && (functionHeadLastIndex += 1);

                                            /* Logic
                                                    [if statement]

                                                > Break
                                            */
                                            if (functionHeadIndex == functionHeadLastIndex && functionHeadIndex != -1)
                                                break
                                        }

                                        // Update > Stream
                                        (firstCharacter == 'f') && (stream = preStream + stream)
                                    }

                                    else
                                        /* Loop
                                                Iterate through Code.
                                        */
                                        for (index; index < codeLength; index += 1) {
                                            // Initialization > (Next) Character
                                            let character = code[index],
                                                nextCharacter = code[index + 1];

                                            /* Logic
                                                    [if statement]

                                                > Break
                                            */
                                            if (
                                                character == ' ' ||
                                                character == '=' && nextCharacter == '>'
                                            )
                                                break;

                                            // Update > Stream
                                            stream += character
                                        }

                                    // Return
                                    return stream
                                };

                                // Set
                                $that.set = function setHead() {
                                    // Initialization > Target
                                    let that = this;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isNativeFunction(that))
                                        // Error
                                        LDKF.error("'setHead'", 'argument', 'Can not generate new functions from native ones');

                                    else {
                                        // Initialization > (Head, Code)
                                        let head = $that.get.call(that),
                                            code = LDKF.replaceString(LDKF.toFunctionString(that), head, LDKF.string(arguments[0]));

                                        // Return
                                        return LDKF.eval(code)
                                    }
                                };

                            // Return
                            return tmpObject.functionPrototypeHeadDescription = $that
                        }));

                        // Parameters
                        LDKF.objectDefineProperty(currentPrototype, 'params', new (function Object() {
                            // Initialization > (Parameter Prototype, Target)
                            let parameterPrototype = LDKF.customObject('Parameter').constructor.prototype,
                                $that = this;

                            // Modification > Target
                                // Configurable
                                $that.configurable = !0;

                                // Enumerable
                                $that.enumerable = !1;

                                // Get
                                $that.get = function getParameters() {
                                    // Initialization > (Target, Allow Splits, Head, Iterator, Name, Parameters, Special Character (Length), Split-Lock Character, Stream)
                                    let that = this,
                                        allowSplits = !0,
                                        head = tmpObject.functionPrototypeHeadDescription.get.call(that),
                                        iterator = 0,
                                        name = that.name,
                                        parameters = LDKF.customArray('FunctionParametersList'),
                                        specialCharacter = LDKC.specialCharacters,
                                        specialCharacterLength = specialCharacter.length,
                                        splitLockCharacter = '',
                                        stream = '';

                                    // (Loop > Update > Head, Update > Head)
                                    (head[0] == 'f' && head[1] == 'u' && head[2] == 'n' && head[3] == 'c' && head[4] == 't' && head[5] == 'i' && head[6] == 'o' && head[7] == 'n') && (head = LDKF.sliceString(head, 'function'.length));
                                    (LDKF.indexOfString(head, name) < LDKF.indexOfString(head, '(')) && (head = LDKF.replaceString(head, name, ''));
                                    while (head[iterator] == ' ') head = LDKF.sliceString(head, 1);
                                    (head[iterator] == '(') && (head = LDKF.sliceString(head, 1));
                                    while (head[iterator] == ' ') head = LDKF.sliceString(head, 1);
                                    while (head[head.length - 1] == ' ') head = LDKF.sliceString(head, 0, -1);
                                    (head[head.length - 1] == ')') && (head = LDKF.sliceString(head, 0, -1));
                                    while (head[head.length - 1] == ' ') head = LDKF.sliceString(head, 0, -1);

                                    // Initialization > Head Length
                                    let headLength = head.length;

                                    /* Loop
                                            Iterate through Head.
                                    */
                                    for (iterator = 0; iterator < headLength; iterator += 1) {
                                        // Initialization > Character
                                        let character = head[iterator];

                                        /* Logic
                                                [if:else if statement]
                                        */
                                        if (allowSplits) {
                                            // Logic > Update
                                                // Allow Splits
                                                if (
                                                    character == '/' &&
                                                    (nextCharacter == '*' || nextCharacter == '/')
                                                )
                                                    allowSplits = !1;

                                                // Allow Splits, Split Character
                                                if (character == '"' || character == "'" || character == '`') {
                                                    allowSplits = !1;
                                                    splitLockCharacter = character
                                                }

                                            // Update > Stream
                                            stream += character == ',' ? specialCharacter : character
                                        }

                                        else if (
                                            character == '\n' ||
                                            (character == '*' && nextCharacter == '/') ||
                                            (
                                                (character == '"' || character == "'" || character == '`') &&
                                                character == parseLockCharacter
                                            )
                                        )
                                            // Update > Allow Splits
                                            allowSplits = !0
                                    }

                                    // Update > Stream
                                    stream += specialCharacter;

                                    // Initialization > (Stream Length, Sub Stream, Split Count)
                                    let streamLength = stream.length,
                                        subStream = '',
                                        splitCount = 0;

                                    /* Loop
                                            Iterate through Stream.
                                    */
                                    for (iterator = 0; iterator < streamLength; iterator += 1) {
                                        // Initialization > Character
                                        let character = stream[iterator];

                                        /* Logic
                                                If
                                                    Character is the Special Character
                                                        or
                                                    the next set of characters is the Special Character.
                                        */
                                        if (
                                            character == specialCharacter ||
                                            (function() {
                                                let specialCharacterIterator = 0;

                                                for (specialCharacterIterator; specialCharacterIterator < specialCharacterLength; specialCharacterIterator += 1)
                                                    if (stream[iterator + specialCharacterIterator] != specialCharacter[specialCharacterIterator])
                                                        return !1;

                                                return !0
                                            })()
                                        ) {
                                            // Update > (Iterator, Parameters, Sub Stream, Split Count)
                                            (character == specialCharacter) || (iterator += specialCharacterLength);
                                            LDKF.pushArray(parameters, subStream);
                                            subStream = '';
                                            splitCount += 1
                                        }

                                        // Update > Sub Stream
                                        subStream += stream[iterator]
                                    }

                                    // Initialization > Parameters Length
                                    let parametersLength = parameters.length;

                                    // Function > Trim
                                    function trim() {
                                        // Initialization > String
                                        let string = arguments[0];

                                        // Loop > Update > String
                                        while (string[0] == ' ' || string[0] == '\n') string = LDKF.sliceString(string, 1);
                                        while (string[string.length - 1] == ' ' || string[string.length - 1] == '\n') string = LDKF.sliceString(string, 0, -1);

                                        // Return
                                        return string
                                    }

                                    /* Loop
                                            Index Parameters.
                                    */
                                    for (iterator = 0; iterator < parametersLength; iterator += 1) {
                                        // Initialization > Parameter
                                        let parameter = parameters[iterator];

                                        // Update > Parameters
                                        parameters[iterator] = LDKF.customObject('FunctionParameter', {
                                            // Address
                                            address: (function(parameter) {
                                                // Initialization > (Allow (Stream), Parameter (Iterator, Length))
                                                let allowStream = !0,
                                                    parameterIterator = 0,
                                                    parameterLength = (parameter = trim(parameter)).length,
                                                    stream = '';

                                                /* Loop
                                                        [for statement]
                                                */
                                                for (parameterIterator; parameterIterator < parameterLength; parameterIterator += 1) {
                                                    // Initialization > Character
                                                    let character = parameter[parameterIterator];

                                                    // Update > Allow Stream
                                                    (character == '=') && (allowStream = !1);

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (allowStream)
                                                        // Update > Stream
                                                        stream += character;

                                                    else
                                                        // Break
                                                        break
                                                }

                                                // Return
                                                return trim(stream)
                                            })(parameter),

                                            // Value
                                            value: (function(parameter) {
                                                // Initialization > (Allow (Stream), Parameter (Iterator, Length))
                                                let allowStream = !1,
                                                    parameterIterator = 0,
                                                    parameterLength = (parameter = trim(parameter)).length,
                                                    stream = '';

                                                /* Loop
                                                        [for statement]
                                                */
                                                for (parameterIterator; parameterIterator < parameterLength; parameterIterator += 1) {
                                                    // Initialization > Character
                                                    let character = parameter[parameterIterator];

                                                    // Update > Allow (Stream)
                                                    allowStream && (stream += character);
                                                    (character == '=') && (allowStream = !0)
                                                }

                                                // Initialization > Data
                                                let data = trim(stream);

                                                // Error Handling > Update > Data
                                                try { data = LDKF.eval('(' + data + ')') }
                                                catch (error) {
                                                    try { data = LDKF.eval(data) }
                                                    catch (error) { data = null }
                                                }

                                                // Return
                                                return data
                                            })(parameter)
                                        }, parameterPrototype);

                                        // Modification > {Parameter} > (To String, Value Of)
                                        LDKF.objectDefineProperty(parameters[iterator].__proto__, 'toString', {value: function toString() { return parameter }});
                                        LDKF.objectDefineProperty(parameters[iterator].__proto__, 'valueOf', {value: function valueOf() { return parameter }})
                                    }

                                    // Loop > Update > Parameters
                                    for (iterator = 0; iterator < parameters.length; iterator += 1)
                                        parameters[iterator].address || LDKF.spliceArray(parameters, (iterator -= 1) + 1, 1);

                                    // Return
                                    return parameters
                                };

                                // Set
                                $that.set = function setParameters() {
                                    // Initialization > Target
                                    let that = this;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isNativeFunction(that))
                                        // Error
                                        LDKF.error("'setParameters'", 'argument', 'Can not generate new functions from native ones');

                                    else {
                                        // Initialization > (Head, Parameters)
                                        let head = $that.get.call(that),
                                            parameters = arguments[0];

                                        // (Loop > Update > Head, Update > Head)
                                        (head[0] == 'f' && head[1] == 'u' && head[2] == 'n' && head[3] == 'c' && head[4] == 't' && head[5] == 'i' && head[6] == 'o' && head[7] == 'n') && (head = LDKF.sliceString(head, 'function'.length));
                                        (LDKF.indexOfString(head, name) < LDKF.indexOfString(head, '(')) && (head = LDKF.replaceString(head, name, ''));
                                        while (head[iterator] == ' ') head = LDKF.sliceString(head, 1);
                                        (head[iterator] == '(') && (head = LDKF.sliceString(head, 1));
                                        while (head[iterator] == ' ') head = LDKF.sliceString(head, 1);
                                        while (head[head.length - 1] == ' ') head = LDKF.sliceString(head, 0, -1);
                                        (head[head.length - 1] == ')') && (head = LDKF.sliceString(head, 0, -1));
                                        while (head[head.length - 1] == ' ') head = LDKF.sliceString(head, 0, -1);

                                        // Initialization > Code
                                        let code = LDKF.replaceString(LDKF.toFunctionString(that), head, (function(parameters) {
                                            /* Logic
                                                    [if:else if statement]
                                            */
                                            if (LDKF.isString(parameters))
                                                // Return
                                                return parameters;

                                            else if (LDKF.isArray(parameters)) {
                                                // Initialization > (Code, Length, Parameters Length, Decremented Parameters Length)
                                                let code = '',
                                                    iterator = 0,
                                                    parametersLength = parameters.length,
                                                    decrementedParametersLength = parametersLength - 1;

                                                /* Loop
                                                        Index Parameters.
                                                */
                                                for (iterator; iterator < parametersLength; iterator += 1) {
                                                    // Initialization > Parameter
                                                    let parameter = parameters[iterator];

                                                    /* Logic
                                                            [if:else statement]

                                                        > Update > Parameters
                                                    */
                                                    if (parameter.__proto__ === parameterPrototype)
                                                        parameters[iterator] = parameterPrototype.valueOf.call(parameter);

                                                    else
                                                        parameters[iterator] = LDKF.isObject(parameter) ?
                                                            ('address' in parameter ? LDKF.string(parameter.address) : '') + ('value' in parameter ? '=' + LDKF.string(parameter.value) : '') :
                                                            LDKF.string(parameter);

                                                    // Update > (Parameter, Code)
                                                    parameter = parameters[iterator];
                                                    code += parameter + (iterator == decrementedParametersLength ? '' : ',')
                                                }

                                                // Return
                                                return code
                                            }
                                        })(parameters));

                                        // Return
                                        return LDKF.eval(code)
                                    }
                                };

                            // Return
                            return tmpObject.functionPrototypeParametersDescription = $that
                        }));

                    /* HTML Element Data */
                        // Add Class
                        LDKF.objectDefineProperty(currentPrototype = LDKO.htmlElementProto, 'addClass', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: tmpObject.htmlElementPrototypeAddClassDescriptorValue = function addClass() {
                                // Initialization > (Element, Classes, Matches)
                                let element = this,
                                    classes = LDKF.sortList(LDKF.getAttributeElement(element, 'class') || ''),
                                    matches = LDKF.toArray(arguments);

                                // Loop > Update > Matches
                                while ((function() {
                                    // Initialization > Iterator
                                    let iterator = matches.length;

                                    // Loop > Logic > Return
                                    while (iterator)
                                        if (LDKF.isArray(matches[iterator -= 1]))
                                            return !0
                                })()) matches = LDKF.$concatArray([], matches);

                                // Update > Matches
                                classes.length && LDKF.$pushArray(matches, classes);

                                // Modification > Element > Class
                                LDKF.setAttributeElement(element, 'class', LDKF.joinArray(matches, ' '));

                                // Return
                                return LDKF.customObject('DOMTokenList', matches, LDKO.domTokenListProto)
                            },

                            // Writable
                            writable: !0
                        });

                        // Delete Class
                        LDKF.objectDefineProperty(currentPrototype, 'delClass', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: tmpObject.htmlElementPrototypeDelClassDescriptorValue = function delClass() {
                                // Initialization > (Element, Classes, Matches)
                                let element = this,
                                    classes = LDKF.sortList(LDKF.getAttributeElement(element, 'class') || ''),
                                    matches = LDKF.toArray(arguments);

                                // Loop > Update > Match
                                while ((function() {
                                    // Initialization > Iterator
                                    let iterator = matches.length;

                                    // Loop > Logic > Return
                                    while (iterator)
                                        if (LDKF.isArray(matches[iterator -= 1]))
                                            return !0
                                })()) matches = LDKF.$concatArray([], matches);

                                // Initialization > Iterator
                                let iterator = matches.length;

                                /* Loop
                                        Index Match.
                                */
                                while (iterator) {
                                    // Initialization > Match
                                    let match = matches[iterator -= 1];

                                    // Update > Classes
                                    LDKF.includesArray(classes, match) && LDKF.spliceArray(classes, LDKF.indexOfArray(classes, match), 1)
                                }

                                // Modification > Element > Class
                                LDKF.setAttributeElement(element, 'class', LDKF.joinArray(classes, ' '));
                                LDKF.getAttributeElement(element, 'class') || LDKF.removeAttributeElement(element, 'class');

                                // Return
                                return LDKF.customObject('DOMTokenList', classes, LDKO.domTokenListProto)
                            },

                            // Writable
                            writable: !0
                        });

                        // Delete Style
                        LDKF.objectDefineProperty(currentPrototype, 'delStyle', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function deleteStyle() {
                                // Initialization > (Argument, Element, Properties, Style)
                                let args = LDKF.toArray(arguments),
                                    element = this,
                                    properties = [],
                                    style = LDKF.get.htmlElementStyle(element);

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length && style) {
                                    // Loop > Update > Arguments
                                    while ((function() {
                                        // Initialization > Iterator
                                        let iterator = args.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (LDKF.isArray(args[iterator -= 1]))
                                                return !0
                                    })()) args = LDKF.$concatArray([], args);

                                    // Initialization > Iterator
                                    let iterator = args.length;

                                    /* Loop
                                            Index Arguments.
                                    */
                                    while (iterator) {
                                        // Initialization > Argument
                                        let arg = args[iterator -= 1];

                                        // Update > Properties
                                        LDKF.includesArray(properties, arg) || LDKF.pushArray(properties, arg)
                                    }

                                    // Initialization > Length
                                    let length = properties.length;

                                    /* Loop
                                            Index Properties.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Property
                                        let property = properties[iterator];

                                        // Error Handling > Modification > Style > [Property]
                                        try { (property in style) && (style[property] = '') } catch (error) {}
                                    }

                                    // Modification > Element > Style
                                    LDKF.setAttributeElement(element, 'style', LDKF.trimCharString(LDKF.getAttributeElement(element, 'style'), /;| |\n/));
                                    LDKF.getAttributeElement(element, 'style') || LDKF.removeAttributeElement(element, 'style')
                                }

                                // Return
                                return LDKF.hasAttributeElement(element, 'style') ? LDKF.getAttributeNodeElement(element, 'style') : null
                            },

                            // Writable
                            writable: !0
                        });

                        // Get CSS
                        LDKF.objectDefineProperty(currentPrototype, 'getCSS', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getCSS() {
                                // Initialization > (Arguments, Element, Properties, Values, (Computed) Style)
                                let args = LDKF.toArray(arguments),
                                    element = this,
                                    properties = [],
                                    values = [],
                                    computedStyle = LDKF.getComputedStyle(element),
                                    style = LDKF.get.htmlElementStyle(element);

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Loop > Update > Arguments
                                    while ((function() {
                                        // Initialization > Iterator
                                        let iterator = args.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (LDKF.isArray(args[iterator -= 1]))
                                                return !0
                                    })()) args = LDKF.$concatArray([], args);

                                    // Initialization > Iterator
                                    let iterator = args.length;

                                    /* Loop
                                            Index Arguments.
                                    */
                                    while (iterator) {
                                        // Initialization > Argument
                                        let arg = args[iterator -= 1];

                                        // Update > Properties
                                        LDKF.includesArray(properties, arg) || LDKF.pushArray(properties, arg)
                                    }

                                    // Initialization > Length
                                    let length = properties.length;

                                    /* Loop
                                            Index Properties.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Property
                                        let property = properties[iterator];

                                        // Error Handling
                                        try {
                                            // Update > Values
                                            property in computedStyle ?
                                                LDKF.pushArray(values, computedStyle[property]) :
                                                ((property in style) && LDKF.pushArray(values, style[property]))
                                        } catch (error) {
                                            // Error Handling > Update > Values
                                            try { (property in style) && LDKF.pushArray(values, style[property]) }
                                            catch (error) {}
                                        }
                                    }

                                    // Update > Values
                                    LDKF.reverseArray(values)
                                }

                                // Return
                                return arguments.length == 1 ? (values.length > 1 ? values : values[0]) : (values.length ? values : null)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Style
                        LDKF.objectDefineProperty(currentPrototype, 'getStyle', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function getStyle() {
                                // Initialization > (Arguments, Element, Properties, Values, Style (Attribute))
                                let args = LDKF.toArray(arguments),
                                    element = this,
                                    properties = [],
                                    values = [],
                                    style = LDKF.get.htmlElementStyle(element),
                                    styleAttribute = LDKF.getAttributeElement(element, 'style') || '';

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Loop > Update > Arguments
                                    while ((function() {
                                        // Initialization > Iterator
                                        let iterator = args.length;

                                        // Loop > Logic > Return
                                        while (iterator)
                                            if (LDKF.isArray(args[iterator -= 1]))
                                                return !0
                                    })()) args = LDKF.$concatArray([], args);

                                    // Initialization > Iterator
                                    let iterator = args.length;

                                    /* Loop
                                            Index Arguments.
                                    */
                                    while (iterator) {
                                        // Initialization > Argument
                                        let arg = args[iterator -= 1];

                                        // Update > Properties
                                        LDKF.includesArray(properties, arg) || LDKF.pushArray(properties, arg)
                                    }

                                    // Initialization > Length
                                    let length = properties.length;

                                    // Function > Hyphenate
                                    function hyphenate(string) {
                                        // Return
                                        return LDKF.toLowerCaseString(string[0]) + LDKF.replaceString(LDKF.sliceString(string, 1), /[A-Z]/g, function(data) {
                                            // Return
                                            return '-' + LDKF.toLowerCaseString(data)
                                        })
                                    }

                                    // Update > Style Attribute
                                    styleAttribute = LDKF.trimString(styleAttribute);
                                    (styleAttribute[styleAttribute.length - 1] == ';') || (styleAttribute += ';');

                                    /* Loop
                                            Index Properties.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Property
                                        let property = properties[iterator];

                                        // Error Handling
                                        try {
                                            /* Logic
                                                    [if statement]
                                            */
                                            if (property in style) {
                                                // Update > Property
                                                property = hyphenate(property);

                                                // Initialization > Match
                                                let match;

                                                /* Logic
                                                        [if statement]
                                                */
                                                if ((match = (LDKF.matchString((function(string) {
                                                    // Initialization > (Allow Stream, Iterator, Length, Stream (Lock-Character))
                                                    let allowStream = !0,
                                                        iterator = 0,
                                                        length = string.length,
                                                        stream = '',
                                                        streamLockCharacter = '';

                                                    /* Loop
                                                            Iterate through String.
                                                    */
                                                    for (iterator; iterator != length; iterator += 1) {
                                                        // Initialization > Character
                                                        let character = string[iterator];

                                                        /* Logic
                                                                [if:else if statement]

                                                            > Update > (Allow Stream, Stream-Lock Character)
                                                        */
                                                        if (
                                                            allowStream &&
                                                            (
                                                                character == '(' ||
                                                                character == '"' || character == "'"
                                                            )
                                                        ) {
                                                            allowStream = !1;
                                                            streamLockCharacter = character
                                                        }

                                                        else if (
                                                            !allowStream &&
                                                            (
                                                                (character == ')' && streamLockCharacter == '(') ||
                                                                (
                                                                    (character == '"' || character == "'") &&
                                                                    (character == streamLockCharacter)
                                                                )
                                                            )
                                                        ) {
                                                            allowStream = !0;
                                                            streamLockCharacter = ''
                                                        }

                                                        // Update > Stream
                                                        allowStream && (stream += character)
                                                    }

                                                    // Return
                                                    return stream
                                                })(styleAttribute), LDKF.regex(property + ' {0,}: {0,}')) || [])).length) {
                                                    // Update > Match
                                                    match = match[0];
                                                    match = LDKF.replaceString(match, LDKF.regex('[' + LDKF.getRegexChars(match) + ']', 'g'), '\\$&');

                                                    // Initialization > (Style Attribute Iterator, Allow Stream, Stream(-Lock Character))
                                                    let styleAttributeIterator = LDKF.indexOfString(styleAttribute, match),
                                                        allowStream = !0,
                                                        stream = '',
                                                        streamLockCharacter = '';

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (styleAttributeIterator != -1) {
                                                        // Initialization > Style Attribute Length
                                                        let styleAttributeLength = styleAttribute.length;

                                                        /* Loop
                                                                Iterate through Style Attribute.
                                                        */
                                                        for (styleAttributeIterator; styleAttributeIterator != styleAttributeLength; styleAttributeIterator += 1) {
                                                            // Initialization > Character
                                                            let character = styleAttribute[styleAttributeIterator];

                                                            /* Logic
                                                                    [if statement]

                                                                > Update > (Allow Stream, Stream-Lock Character)
                                                            */
                                                            if (
                                                                allowStream &&
                                                                (
                                                                    character == '(' ||
                                                                    character == '"' || character == "'"
                                                                )
                                                            ) {
                                                                allowStream = !1;
                                                                streamLockCharacter = character
                                                            }

                                                            else if (
                                                                !allowStream &&
                                                                (
                                                                    (character == ')' && streamLockCharacter == '(') ||
                                                                    (
                                                                        (character == '"' || character == "'") &&
                                                                        (character == streamLockCharacter)
                                                                    )
                                                                )
                                                            ) {
                                                                allowStream = !0;
                                                                streamLockCharacter = ''
                                                            }

                                                            /* Logic
                                                                    [if statement]
                                                            */
                                                            if (allowStream) {
                                                                // Update > Stream
                                                                stream += character;

                                                                // Logic > Break
                                                                if (character == ';')
                                                                    break
                                                            }
                                                        }
                                                    }

                                                    // Update > (Stream, Values)
                                                    stream = LDKF.trimString(LDKF.replaceString(stream, match, ''));
                                                    (stream[stream.length - 1] == ';') && (stream = LDKF.sliceString(stream, 0, -';'.length));
                                                    LDKF.pushArray(values, stream)
                                                }

                                                else
                                                    // Update > Values
                                                    LDKF.pushArray(values, style[property])
                                            }

                                            else
                                                // Update > Values
                                                LDKF.pushArray(values, null)
                                        } catch (error) {
                                            // Update > Values
                                            LDKF.pushArray(values, null)
                                        }
                                    }

                                    // Update > Values
                                    LDKF.reverseArray(values)
                                }

                                // Return
                                return arguments.length == 1 ? (values.length > 1 ? values : values[0]) : (values.length ? values : null)
                            },

                            // Writable
                            writable: !0
                        });

                        // Has Class
                        LDKF.objectDefineProperty(currentPrototype, 'hasClass', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: tmpObject.htmlElementPrototypeHasClassDescriptorValue = function hasClass() {
                                // Initialization > Element
                                let element = this;

                                // Return
                                return arguments.length ? LDKF.includesArray(LDKF.sortList(LDKF.getAttributeElement(element, 'class') || ''), arguments[0]) : null
                            },

                            // Writable
                            writable: !0
                        });

                        // Has Style
                        LDKF.objectDefineProperty(currentPrototype, 'hasStyle', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function hasStyle() {
                                // Initialization > (Element, Property)
                                let element = this,
                                    property = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Style
                                    let style = LDKF.get.htmlElementStyle(element);

                                    // Error Handling > Logic > Return
                                    try { if (property in style) return !!style[property] } catch (error) {}

                                    // Return
                                    return !1
                                }

                                // Return
                                return null
                            },

                            // Writable
                            writable: !0
                        });

                        // In Fullscreen
                        LDKF.objectDefineProperty(currentPrototype, 'inFullscreen', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function inFullscreen() { return LDKO.$screen === LDKF.get.windowInnerHeight ? !1 : this === tmpObject.fullscreenElement }
                        });

                        // Replace Class
                        LDKF.objectDefineProperty(currentPrototype, 'replClass', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function replaceClass() {
                                // Initialization > (Element, Length)
                                let element = this,
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Initialization > (Class, Match, Classes)
                                    let $class = arguments[1],
                                        match = arguments[0],
                                        classes = LDKF.sortList(LDKF.getAttributeElement(element, 'class') || '');

                                    /* Logic
                                            [if statement]
                                    */
                                    if (LDKF.includesArray(classes, match)) {
                                        // Initialization > Index
                                        let index = LDKF.indexOfArray(classes, match);

                                        // Update > Classes
                                        length > 1 ? classes[index] = $class : LDKF.spliceArray(classes, index, 1);

                                        // Modification > Element > Class
                                        LDKF.setAttributeElement(element, 'class', LDKF.joinArray(classes, ' '));
                                        LDKF.getAttributeElement(element, 'class') || LDKF.removeAttributeElement(element, 'class')
                                    }

                                    // Return
                                    return LDKF.customObject('DOMTokenList', classes, LDKO.domTokenListProto)
                                }

                                // Return
                                return null
                            },

                            // Writable
                            writable: !0
                        });

                        // Selector
                        LDKF.objectDefineProperty(currentPrototype, 'selector', tmpObject.htmlElementPrototypeSelectorDescription = {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function getSelector() {
                                // Initialization > (Target, Attributes, Class, ID, Selector)
                                let that = this,
                                    attributes = LDKF.get.elementAttributes(that),
                                    $class = LDKF.getAttributeElement(that, 'class') || '',
                                    id = LDKF.get.elementId(that),
                                    selector = '';

                                // Function
                                    /* Contains White-Space
                                            --- NOTE ---
                                                #Lapys: Checks for a given length of white-space characters;
                                                    Default length is 1.
                                    */
                                    function containsWhiteSpace() {
                                        // Initialization > (Length, Iterator, String (Length))
                                        let length = arguments.length > 1 ? arguments[1] : 1,
                                            iterator = 0,
                                            string = arguments[0],
                                            stringLength = string.length;

                                        /* Loop
                                                Iterate through String.

                                            > Logic > Return
                                        */
                                        for (iterator; iterator < stringLength; iterator += 1)
                                            if (
                                                string[iterator] == ' ' &&
                                                (function() {
                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (length > 0) {
                                                        // Initialization > Length Iterator
                                                        let lengthIterator = 0;

                                                        /* Loop
                                                                Iterate through String via Length.

                                                            > Logic > Return
                                                        */
                                                        for (lengthIterator; lengthIterator < length; lengthIterator += 1)
                                                            if (string[iterator + lengthIterator] != ' ')
                                                                return !1;

                                                        // Return
                                                        return !0
                                                    }

                                                    // Return
                                                    return !0
                                                })()
                                            )
                                                return !0
                                    }

                                    // Nullify Character
                                    function nullifyCharacter() {
                                        // Initialization > (Iterator, Match Character, Stream, String (Length))
                                        let iterator = 0,
                                            matchCharacter = arguments[1],
                                            stream = '',
                                            string = arguments[0],
                                            stringLength = string.length;

                                        /* Loop
                                                Iterate through String.
                                        */
                                        for (iterator; iterator < stringLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = string[iterator];

                                            // Update > Stream
                                            stream += character == matchCharacter ? '\\\\' + character : character
                                        }

                                        // Return
                                        return stream
                                    }

                                /* Logic
                                        [if statement]
                                */
                                if ($class) {
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (containsWhiteSpace($class, 2))
                                        // Update > Selector
                                        selector += "[class='" + nullifyCharacter($class, "'") + "']";

                                    else {
                                        /* Loop > Update > Class
                                                --- NOTE ---
                                                    #Lapys: String trimming...
                                        */
                                        while ($class[0] == ' ' || $class[0] == '\n') $class = LDKF.sliceString($class, 1);
                                        while ($class[$class.length - 1] == ' ' || $class[$class.length - 1] == '\n') $class = LDKF.sliceString($class, 0, -1);

                                        // Initialization > (Class Length, Iterator, Special Character (Length), Stream)
                                        let classLength = $class.length,
                                            iterator = 0,
                                            specialCharacter = LDKC.specialCharacters,
                                            specialCharacterLength = specialCharacter.length,
                                            stream = '';

                                        /* Loop
                                                Iterate through Class.
                                        */
                                        for (iterator; iterator < classLength; iterator += 1) {
                                            // Initialization > (Character, Next Character)
                                            let character = $class[iterator],
                                                nextCharacter = $class[iterator + 1];

                                            // Update > (Character, Stream)
                                            (character == ' ' && nextCharacter == ' ') && (character = '');
                                            stream += character == ' ' ? specialCharacter : character
                                        }

                                        // Initialization > (Classes, Split Count, Stream Length)
                                        let classes = [],
                                            splitCount = 0,
                                            streamLength = stream.length;

                                        /* Loop
                                                Iterate through Stream.
                                        */
                                        for (iterator = 0; iterator < streamLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = stream[iterator];

                                            // Update > (Classes, Split Count)
                                            (
                                                character == specialCharacter ||
                                                (function() {
                                                    let specialCharacterIterator = 0;

                                                    for (specialCharacterIterator; specialCharacterIterator < specialCharacterLength; specialCharacterIterator += 1)
                                                        if (stream[iterator + specialCharacterIterator] != specialCharacter[specialCharacterIterator])
                                                            return !1;

                                                    stream = LDKF.sliceString(stream, specialCharacterLength);
                                                    streamLength = stream.length;
                                                    character = stream[iterator];
                                                    return !0
                                                })()
                                            ) && (splitCount += 1);
                                            LDKF.isUndefined(classes[splitCount]) ? classes[splitCount] = character : classes[splitCount] += character
                                        }

                                        // Initialization > Class Length
                                        let classesLength = classes.length;

                                        /* Loop
                                                Update > Selector
                                        */
                                        for (iterator = 0; iterator < classesLength; iterator += 1)
                                            selector += '.' + classes[iterator]
                                    }
                                }

                                // Update > Selector
                                id && (selector += !!containsWhiteSpace(id) ? "[id='" + nullifyCharacter(id, "'") + "']" : '#' + id);

                                /* Logic
                                        [if statement]
                                */
                                if (LDKF.get.namedNodeMapLength(attributes)) {
                                    // Function > Contains Character
                                    function containsCharacter() {
                                        // Initialization > (Iterator, Match Character, String (Length))
                                        let iterator = 0,
                                            matchCharacter = arguments[1],
                                            string = arguments[0],
                                            stringLength = string.length;

                                        /* Loop
                                                Iterate through String.

                                            > Logic > Return
                                        */
                                        for (iterator; iterator < stringLength; iterator += 1)
                                            if (string[iterator] == matchCharacter)
                                                return !0
                                    }

                                    // LapysJS Development Kit Functions > Iterate Object
                                    LDKF.iterateObject(function(key, value) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (key != 'class' && key != 'id') &&
                                            LDKF.isNaN(+key)
                                        ) {
                                            // Update > Value
                                            value = LDKF.get.attributeValue(value);

                                            // Initialization > Test
                                            let test = containsWhiteSpace(value) || !!((LDKF.matchString((function() {
                                                // Initialization > (String, Decremented Length)
                                                let string = value,
                                                    decrementedLength = string.length - 1;

                                                /* Logic
                                                        [if:else if statement]

                                                    > Update > String
                                                */
                                                if (string[decrementedLength] == '"' || string[decrementedLength] == "'")
                                                    string = LDKF.sliceString(string, 0, -1);

                                                else if (string[0] == '"' || string[0] == "'")
                                                    string = LDKF.sliceString(string, 1);

                                                // Return
                                                return string
                                            })(), /[^\w]/) || []).length);

                                            // Update > Selector
                                            selector += '[' + key + (value ? '=' : '') + (test ? "'" : '') + (containsCharacter(value, "'") ? nullifyCharacter(value, "'") : value) + (test ? "'" : '') + ']'
                                        }
                                    }, attributes)
                                }

                                // Return
                                return LDKF.toLowerCaseString(LDKF.get.elementTagName(that)) + selector
                            },

                            // Set
                            set: function setSelector() {
                                // Initialization > (Iterator, Selector (Length), Target)
                                let iterator = 0,
                                    selector = arguments[0],
                                    selectorLength = selector.length,
                                    that = this;

                                /* Logic
                                        [if statement]
                                */
                                if (selector && LDKF.isString(selector)) {
                                    // Error Handling
                                    try { LDKF.querySelectorDocument(selector) }
                                    catch (error) {
                                        // Error
                                        LDKF.error("'setSelector'", 'argument', "Invalid selector value '" + LDKF.string(selector) + "'")
                                    }

                                    // Initialization > (Attributes (Length), Class (Length), ID)
                                    let attributes = [],
                                        attributesLength = -1,
                                        $class = [],
                                        classLength = -1,
                                        id = '';

                                    // Initialization > (Allow (Alternatives, Parsing), (Closing, Opening) Character Duplications, Parse-Lock Character, State)
                                    let allowAlternatives = !0,
                                        allowParsing = !0,
                                        closingCharacterDuplications = 0,
                                        openingCharacterDuplications = 0,
                                        parseLockCharacter = '',
                                        state = '';

                                    /* Loop
                                            Iterate through Selector.
                                    */
                                    for (iterator; iterator < selectorLength; iterator += 1) {
                                        // Initialization > Character
                                        let character = selector[iterator];

                                        // Update > Allow Alternatives
                                        (character == '[') && (allowAlternatives = !1);

                                        /* Logic
                                                If
                                                    Alternatives are disallowed,
                                                    check if they can be allowed again.
                                        */
                                        if (!allowAlternatives) {
                                            // Update > (Closing, Opening) Character Duplications
                                            (character == '[') && (openingCharacterDuplications += 1);
                                            (character == ']') && (closingCharacterDuplications += 1);

                                            // Update > Allow Alternatives
                                            (
                                                character == ']' &&
                                                closingCharacterDuplications == openingCharacterDuplications
                                            ) && (allowAlternatives = !0)
                                        }

                                        /* Logic
                                                [if statement]
                                                    --- NOTE ---
                                                        #Lapys: Checking for parsing even though no part of the stream
                                                            is ignored allows us to explicitly get string text and append it to our
                                                            Attributes array.
                                        */
                                        if (allowParsing) {
                                            /* Logic
                                                    [if statement]

                                                > Update > (Allow Parsing, Parse-Lock Character)
                                            */
                                            if (character == '"' || character == "'") {
                                                allowParsing = !1;
                                                parseLockCharacter = character
                                            }

                                            /* Logic
                                                    [if statement]

                                                > Update > (Attributes Length, State)
                                            */
                                            if (character == '[') {
                                                attributesLength += 1;
                                                state = 'attributes'
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (allowAlternatives) {
                                                /* Logic
                                                        [if statement]

                                                    > Update > (Class Length, State)
                                                */
                                                if (character == '.') {
                                                    classLength += 1;
                                                    state = 'class'
                                                }

                                                // Update > State
                                                (character == '#') && (state = 'id')
                                            }

                                            /* Logic
                                                    [if statement]
                                                        --- NOTE ---
                                                            #Lapys: Attributes will always be checked for
                                                                since that`s what the Allow Alternatives variable segregates for.
                                            */
                                            if (state == 'attributes' && attributesLength > -1)
                                                // Logic > Update > Attributes
                                                if (character != '[' && character != ']')
                                                    LDKF.isUndefined(attributes[attributesLength]) ?
                                                        attributes[attributesLength] = character :
                                                        attributes[attributesLength] += character;

                                            /* Logic
                                                    [if statement]
                                                        --- NOTE ---
                                                            #Lapys: Do not pay attention to Classes or IDs
                                                                if Alternatives are disallowed.
                                            */
                                            if (allowAlternatives) {
                                                /* Logic
                                                        [if:else if statement]
                                                */
                                                if (state == 'class' && classLength > -1) {
                                                    // Logic > Update > Class
                                                    if (character != '.')
                                                        LDKF.isUndefined($class[classLength]) ?
                                                            $class[classLength] = character :
                                                            $class[classLength] += character
                                                }

                                                else if (state == 'id')
                                                    // Update > ID
                                                    id += character
                                            }
                                        }

                                        else {
                                            /* Logic
                                                    [if statement]

                                                > Update > Attributes
                                            */
                                            if (attributesLength > -1)
                                                LDKF.isUndefined(attributes[attributesLength]) ?
                                                    attributes[attributesLength] = character :
                                                    attributes[attributesLength] += character;

                                            // Update > Allow Parsing
                                            (
                                                (
                                                    (character == '"' || character == "'") &&
                                                    character == parseLockCharacter
                                                )
                                            ) && (allowParsing = !0)
                                        }
                                    }

                                    // Update > (Attributes, Class) Length
                                    attributesLength += 1;
                                    classLength += 1;

                                    /* Logic
                                            If
                                                there are Attributes.
                                    */
                                    if (attributesLength)
                                        /* Loop
                                                Index Attributes.
                                        */
                                        for (iterator = 0; iterator < attributesLength; iterator += 1) {
                                            // Initialization > Attribute
                                            let attribute = attributes[iterator];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (attribute) {
                                                // Initialization > (Attribute (Length, Iterator), Name, Split, Value)
                                                let attributeLength = attribute.length,
                                                    attributeIterator = 0,
                                                    name = '',
                                                    split = !1,
                                                    value = '';

                                                /* Loop
                                                        Iterate through Attribute.
                                                */
                                                for (attributeIterator; attributeIterator < attributeLength; attributeIterator += 1) {
                                                    // Initialization > Character
                                                    let character = attribute[attributeIterator];

                                                    // Update > (Split | (Value | Name))
                                                    character == '=' ?
                                                        split = !0 :
                                                        split ? value += character : name += character
                                                }

                                                // Loop > Update > Name
                                                while (name[0] == ' ' || name[0] == '\n') name = LDKF.sliceString(name, 1);
                                                while (name[name.length - 1] == ' ' || name[name.length - 1] == '\n') name = LDKF.sliceString(name, 0, -1);

                                                /* Logic
                                                        If
                                                            there was any Value.
                                                */
                                                if (split) {
                                                    // Loop > Update > Value
                                                    while (value[0] == ' ' || value[0] == '\n') value = LDKF.sliceString(value, 1);
                                                    while (value[value.length - 1] == ' ' || value[value.length - 1] == '\n') value = LDKF.sliceString(value, 0, -1);

                                                    // Initialization > Value Match Character
                                                    let valueMatchCharacter = value[0];

                                                    /* Logic
                                                            [if statement]

                                                            --- NOTE ---
                                                                #Lapys: Remove string delimiters.
                                                    */
                                                    if (valueMatchCharacter == '"' || valueMatchCharacter == "'") {
                                                        // Initialization > (New Value, Value (Iterator, Length), Decremented Value Length)
                                                        let newValue = '',
                                                            valueIterator = 0,
                                                            valueLength = value.length,
                                                            decrementedValueLength = valueLength - 1;

                                                        // Loop > Update > New Value
                                                        for (valueIterator; valueIterator < valueLength; valueIterator += 1)
                                                            valueIterator && ((valueIterator == decrementedValueLength) || (newValue += value[valueIterator]));

                                                        // Update > Value
                                                        value = newValue
                                                    }

                                                    // Modification > Target > [Name]
                                                    LDKF.setAttributeElement(that, name, value)
                                                }

                                                else
                                                    // Modification > Target > [Name]
                                                    LDKF.setAttributeElement(that, name, '')
                                            }
                                        }

                                    /* Logic
                                            [if statement]
                                    */
                                    if (id) {
                                        // Initialization > ID (Length, Penalty Count, Stream)
                                        let idLength = id.length,
                                            idPenaltyCount = 0,
                                            idStream = '';

                                        /* Loop
                                                Iterate through ID.
                                        */
                                        for (iterator = 0; iterator < idLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = id[iterator];

                                            /* Logic
                                                    [if:else if statement]
                                            */
                                            if (character == '#' && idPenaltyCount)
                                                // Break
                                                break;

                                            else if (character != '#')
                                                // Update > ID Stream
                                                idStream += character;

                                            // Update > ID Penalty Count
                                            (character == '#') && (idPenaltyCount += 1)
                                        }

                                        // Modification > Target > ID
                                        LDKF.set.elementId(that, id = idStream)
                                    }

                                    /* Logic
                                            [if statement]
                                    */
                                    if (classLength) {
                                        // Initialization > Class
                                        let _class = LDKF.getAttributeElement(that, 'class') || '';

                                        /* Loop
                                                Index Class.
                                        */
                                        for (iterator = 0; iterator < classLength; iterator += 1) {
                                            // Initialization > Class
                                            let $_class = $class[iterator];

                                            // Update > Class
                                            $_class && (_class += ' ' + $_class)
                                        }

                                        // Loop > Update > Class
                                        while (_class[0] == ' ') _class = LDKF.sliceString(_class, 1);
                                        while (_class[_class.length - 1] == ' ') _class = LDKF.sliceString(_class, 0, -1);

                                        // Modification > Target > Class
                                        LDKF.setAttributeElement(that, 'class', _class)
                                    }
                                }

                                // Return
                                return arguments[0]
                            }
                        });

                        // Set CSS
                        LDKF.objectDefineProperty(currentPrototype, 'setCSS', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function setCSS() {
                                // Initialization > (Dummy Element, Element, Length)
                                let element = this,
                                    dummyElement = LDKC.element,
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Initialization > (...)
                                    let $0 = arguments[0],
                                        $1 = arguments[1],
                                        defaultMeasurement = 'px',
                                        defaultValue = 'initial',
                                        iterator = 0,
                                        propertyValueList = [],
                                        computedStyle = LDKF.getComputedStyle(element),
                                        style = LDKF.get.htmlElementStyle(element),
                                        styleAttribute = LDKF.trimString(LDKF.getAttributeElement(element, 'style') || ''),
                                        dummyElementComputedStyle = LDKF.getComputedStyle(dummyElement),
                                        dummyElementStyle = LDKF.get.htmlElementStyle(dummyElement);

                                    // Function
                                        // Camel
                                        function camel(string) {
                                            // Return
                                            return LDKF.replaceString(string, /-./g, function(data) {
                                                // Return
                                                return LDKF.toUpperCaseString(data[1])
                                            })
                                        }

                                        // Ends With
                                        function endsWith(string, match) {
                                            /* Logic
                                                    [if statement]
                                            */
                                            if (string && match) {
                                                // Initialization > (Iterator, (Decremented) Length)
                                                let iterator = match.length,
                                                    length = iterator,
                                                    decrementedLength = string.length - 1;

                                                // Loop > Logic > Return
                                                while (iterator)
                                                    if (match[iterator -= 1] !== string[decrementedLength - (length - iterator - 1)])
                                                        return !1;

                                                // Return
                                                return !0
                                            }
                                        }

                                        // Hyphenate
                                        function hyphenate(string) {
                                            // Return
                                            return LDKF.toLowerCaseString(string[0]) + LDKF.replaceString(LDKF.sliceString(string, 1), /[A-Z]/g, function(data) {
                                                // Return
                                                return '-' + LDKF.toLowerCaseString(data)
                                            })
                                        }

                                        // Is Special Argument
                                        function isSpecialArgument(object) {
                                            // Return
                                            return LDKF.isArray(object) || LDKF.isFunction(object) || LDKF.isJSONLikeObject(object)
                                        }

                                        // Is Valid CSS Property
                                        function isValidCSSProperty(property) {
                                            // Error Handling > Return
                                            try { return property in style }
                                            catch (error) {}
                                        }

                                        // Is Vendor Property
                                        function isVendorProperty(property) {
                                            /* Logic
                                                    [if statement]
                                            */
                                            if (property) {
                                                // Initialization > (Vendors, Iterator, Match)
                                                let vendors = ['moz', 'ms', 'webkit'],
                                                    iterator = vendors.length,
                                                    match = !0;

                                                // Update > Property
                                                property = LDKF.replaceString(LDKF.toLowerCaseString(property[0]) + camel(LDKF.sliceString(property, 1)), /-/g, '');

                                                /* Loop
                                                        Index Vendors.
                                                */
                                                while (iterator) {
                                                    // Initialization > (Vendor, Decremented Vendor Length, Property (Iterator, Length))
                                                    let vendor = vendors[iterator -= 1],
                                                        decrementedVendorLength = vendor.length - 1,
                                                        propertyIterator = 0,
                                                        propertyLength = property.length;

                                                    // Update > Match
                                                    match = !0;

                                                    /* Loop
                                                            Iterate through Property.
                                                    */
                                                    for (propertyIterator; propertyIterator != propertyLength; propertyIterator += 1) {
                                                        let character = property[propertyIterator];

                                                        // Logic > Return
                                                        if (match && propertyIterator > decrementedVendorLength)
                                                            return !0;

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (character != vendor[propertyIterator]) {
                                                            // Update > Match
                                                            match = !1;

                                                            // Break
                                                            break
                                                        }
                                                    }

                                                    // Logic > Return
                                                    if (match)
                                                        return !0
                                                }
                                            }
                                        }

                                        // Update Value
                                        function updateValue(value, property) {
                                            /* Logic
                                                    [if:else if:else statement]
                                            */
                                            if (LDKF.isArray(value))
                                                // Update > Value
                                                value = LDKF.joinArray(value, ', ');

                                            else if (LDKF.isSafeNumber(value))
                                                // Update > Value
                                                value += defaultMeasurement;

                                            else if (LDKF.isBoolean(value)) {
                                                // Update > Property
                                                property = hyphenate(property);

                                                /* Logic
                                                        [if:else if statement]
                                                */
                                                if (
                                                    property == 'backface-visibility' ||
                                                    property == 'overflow' || property == 'overflow-x' || property == 'overflow-y' ||
                                                    property == 'visibility' ||
                                                    (endsWith(property, 'visibility') && isVendorProperty(property))
                                                )
                                                    // Update > Value
                                                    value = value ? 'visible' : 'hidden';

                                                else if (
                                                    property == 'background-color' || property == 'border-bottom-color' || property == 'border-color' || property == 'border-left-color' || property == 'border-right-color' || property == 'border-top-color' ||
                                                    property == 'caret-color' || property == 'color' || property == 'column-rule-color' ||
                                                    property == 'fill' || property == 'flood-color' ||
                                                    property == 'lighting-color' ||
                                                    property == 'outline-color' ||
                                                    property == 'stop-color' ||
                                                    property == 'text-decoration-color' ||
                                                    (endsWith(property, 'color') && isVendorProperty(property))
                                                )
                                                    // Update > Value
                                                    value = value ? 'rgb(255, 255, 255)' : 'rgb(0, 0, 0)';

                                                else if (
                                                    property == 'fill-opacity' ||
                                                    property == 'opacity'
                                                )
                                                    // Update > Value
                                                    value = value ? '1' : '0';

                                                else if (!value) {
                                                    /* Logic
                                                            [if:else if statement]
                                                    */
                                                    if (
                                                        property == 'align-content' || property == 'align-items' || property == 'animation-fill-mode' ||
                                                        property == 'background-blend-mode'
                                                    )
                                                        // Update > Value
                                                        value = 'normal';

                                                    else if (
                                                        property == 'animation' || property == 'animation-fill-mode' || property == 'animation-name' ||
                                                        property == 'background-image' || property == 'border' || property == 'border-bottom' || property == 'border-bottom-style' || property == 'border-image' || property == 'border-image-source' || property == 'border-left' || property == 'border-left-style' || property == 'border-right' || property == 'border-right-style' || property == 'border-top' || property == 'border-top-style' || property == 'box-shadow' ||
                                                        property == 'clear' || property == 'clip-path' || property == 'column-rule-style' || property == 'column-span' || property == 'contain' || property == 'content' || property == 'counterIncrement' || property == 'counterReset' ||
                                                        property == 'd' ||
                                                        property == 'filter' || property == 'float' ||
                                                        property == 'grid' ||
                                                        property == 'list-style' || property == 'list-style-image' ||
                                                        property == 'marker' || property == 'marker-end' || property == 'marker-mid' || property == 'marker-start' || property == 'mask' || property == 'max-block-size' || property == 'max-height' || property == 'max-inline-size' || property == 'max-width' ||
                                                        property == 'offset' || property == 'offset-path' || property == 'outline' || property == 'outline-style' ||
                                                        property == 'perspective' || property == 'pointer-events' ||
                                                        property == 'resize' ||
                                                        property == 'shape-outside' || property == 'speak' || property == 'stroke' || property == 'stroke-dasharray' || property == 'stroke-dashoffset' ||
                                                        property == 'text-combine-upright' || property == 'text-decoration' || property == 'text-decoration-line' || property == 'text-shadow' || property == 'text-transform' || property == 'transform' || property == 'transition' ||
                                                        property == 'vector-effect'
                                                    )
                                                        // Update > Value
                                                        value = 'none';

                                                    else if (
                                                        property == 'animation-delay' || property == 'animation-duration' ||
                                                        property == 'transition-delay' || property == 'transition-duration'
                                                    )
                                                        // Update > Value
                                                        value = '0s';

                                                    else if (
                                                        property == 'animation-iteration-count' ||
                                                        property == 'flex-grow' || property == 'flex-shrink' || property == 'font-kerning' ||
                                                        property == 'order' || property == 'orphans' ||
                                                        property == 'shape-image-threshold' || property == 'stroke-miter-limit' ||
                                                        property == 'tab-size' ||
                                                        property == 'widows' ||
                                                        property == 'z-index'
                                                    )
                                                        // Update > Value
                                                        value = '0';

                                                    else if (property == 'animation-play-state')
                                                        // Update > Value
                                                        value = 'paused';

                                                    else if (
                                                        property == 'animation-timing-function' ||
                                                        property == 'transition-timing-function'
                                                    )
                                                        // Update > Value
                                                        value = 'linear';

                                                    else if (property == 'background-attachment')
                                                        // Update > Value
                                                        value = 'scroll';

                                                    else if (
                                                        property == 'background-position' || property == 'border-spacing' ||
                                                        property == 'object-position' ||
                                                        property == 'perspective-origin' ||
                                                        property == 'transform-origin'
                                                    )
                                                        // Update > Value
                                                        value = '0px 0px';

                                                    else if (
                                                        property == 'border-bottom-style' || property == 'border-left-style' || property == 'border-right-style' || property == 'border-style' || property == 'border-top-style' ||
                                                        property == 'text-decoration-style'
                                                    )
                                                        // Update > Value
                                                        value = 'hidden';

                                                    else if (
                                                        property == 'background-position-x' || property == 'background-position-y' || property == 'baseline-shift' || property == 'block-size' || property == 'border-bottom-left-radius' || property == 'border-bottom-right-radius' || property == 'border-bottom-width' || property == 'border-image-outset' || property == 'border-image-width' || property == 'border-left-width' || property == 'border-radius' || property == 'border-right-width' || property == 'border-top-left-radius' || property == 'border-top-right-radius' || property == 'border-top-width' || property == 'border-width' || property == 'bottom' ||
                                                        property == 'column-width' || property == 'cx' || property == 'cy' ||
                                                        property == 'flex-basis' || property == 'font-size' ||
                                                        property == 'height' ||
                                                        property == 'inline-size' ||
                                                        property == 'left' || property == 'letter-spacing' || property == 'line-height' ||
                                                        property == 'margin' || property == 'margin-bottom' || property == 'margin-left' || property == 'margin-right' || property == 'margin-top' || property == 'max-block-size' || property == 'max-height' || property == 'max-width' || property == 'min-block-size' || property == 'min-height' || property == 'min-width' ||
                                                        property == 'offset-distance' || property == 'outline-offset' || property == 'outline-width' ||
                                                        property == 'padding' || property == 'padding-bottom' || property == 'padding-left' || property == 'padding-right' || property == 'padding-top' ||
                                                        property == 'r' || property == 'right' || property == 'rx' || property == 'ry' ||
                                                        property == 'shape-margin' || property == 'stroke-width' ||
                                                        property == 'text-indent' || property == 'top' ||
                                                        property == 'width' || property == 'word-spacing' ||
                                                        property == 'x' ||
                                                        property == 'y'
                                                    )
                                                        // Update > Value
                                                        value = '0px';

                                                    else if (property == 'background-repeat')
                                                        // Update > Value
                                                        value = 'no-repeat';

                                                    else if (
                                                        property == 'border-image-slice' ||
                                                        property == 'font-stretch'
                                                    )
                                                        // Update > Value
                                                        value = '0%';

                                                    else if (property == 'direction')
                                                        // Update > Value
                                                        value = 'ltr';

                                                    else if (property == 'display')
                                                        // Update > Value
                                                        value = 'none';

                                                    else if (property == 'flex-wrap')
                                                        // Update > Value
                                                        value = 'nowrap';

                                                    else if (property == 'font-family')
                                                        // Update > Value
                                                        value = 'sans-serif';

                                                    else if (property == 'font-weight')
                                                        // Update > Value
                                                        value = '100';

                                                    else if (property == 'offset-rotate')
                                                        // Update > Value
                                                        value = '0deg';

                                                    else if (property == 'position')
                                                        // Update > Value
                                                        value = 'static';

                                                    else if (property == 'quotes')
                                                        // Update > Value
                                                        value = '"“" "”" "‘" "’"';

                                                    else if (!computedStyle[property])
                                                        // Update > Value
                                                        value = ''
                                                }

                                                else
                                                    // Update > Value
                                                    value = defaultValue
                                            }

                                            else if (LDKF.isRegex(value))
                                                // Update > Value
                                                value = LDKF.get.regexSource(value);

                                            else
                                                // Update > Value
                                                value = LDKF.string(value);

                                            // Return
                                            return value
                                        }

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (
                                        LDKF.isJSONLikeObject($0) ||
                                        (
                                            (LDKF.isArray($0) && length == 1) ||
                                            (LDKF.isArray($0) && LDKF.isArray($1) && length > 1)
                                        )
                                    ) {
                                        // Initialization > (Iterator, Length)
                                        let iterator = 0,
                                            length = arguments.length;

                                        /* Loop
                                                Index Arguments.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Argument
                                            let argument = arguments[iterator];

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.isJSONLikeObject(argument)) {
                                                // Initialization > (Constructor, Prototype, (Constructor > Prototype))
                                                let constructor = argument.constructor,
                                                    prototype = constructor.prototype,
                                                    __proto__ = argument.__proto__;

                                                // Modification > (LapysJS > Temporary Data)
                                                    // Array
                                                    LapysJS.tmp.array = propertyValueList;

                                                    // Is Like Object
                                                    LapysJS.tmp.isLikeObject = function isLikeObject(object) {
                                                        // Return
                                                        return LDKF.isConstructible(object) ?
                                                            object.constructor === constructor &&
                                                            object.constructor.prototype === prototype &&
                                                            object.__proto__ === __proto__
                                                            : !1
                                                    };

                                                    // Iterate
                                                    LapysJS.tmp.iterate = LDKF.iterateObject;

                                                    // Object
                                                    LapysJS.tmp.object = LDKF.cloneObject(argument),

                                                    // Push
                                                    LapysJS.tmp.push = LDKF.pushArray;

                                                    // Symbol
                                                    LapysJS.tmp.symbol = LDKO.symbol;

                                                // Initialization > (Depth, Code, Iterator, (Decremented) Length)
                                                let depth = LDKF.get.objectDepth(argument),
                                                    code = 'const LAPYSJS_TMP=LapysJS.tmp;' +
                                                        'let GLOBAL=LAPYSJS_TMP.array,'+
                                                            'iterateObject=LAPYSJS_TMP.iterate,' +
                                                            'isLikeObject=LAPYSJS_TMP.isLikeObject,' +
                                                            'object=LAPYSJS_TMP.object,' +
                                                            "parentKey=''," +
                                                            'push=LAPYSJS_TMP.push,' +
                                                            'sym=LAPYSJS_TMP.symbol,' +
                                                            'symToStringTag=sym.toStringTag,' +
                                                            'value=object;',
                                                    iterator = 0,
                                                    length = depth,
                                                    decrementedLength = length - 1;

                                                /* Loop
                                                        Index Length.

                                                    > Update > Code
                                                */
                                                for (iterator; iterator != length; iterator += 1)
                                                    code += "object[symToStringTag]=parentKey;iterateObject(function(key,value){let parentKey=this[symToStringTag]?this[symToStringTag]+'-'+key:key;if(isLikeObject(value)&&key!==symToStringTag){let object=value;" + (iterator == decrementedLength ? 'push(GLOBAL,{property:parentKey,value:value})' : '');

                                                // Update > Iterator
                                                iterator = 0;

                                                /* Loop
                                                        Index Length.

                                                    > Update > Code
                                                */
                                                for (iterator; iterator != length; iterator += 1)
                                                    code += '}else if(key!==symToStringTag)push(GLOBAL,{property:parentKey,value:value})},value)';

                                                // Execution
                                                LDKF.eval(code);

                                                // Modification > (LapysJS > Temporary Data) > Array
                                                LapysJS.tmp.array = []
                                            }

                                            else {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (argument.length == 2) {
                                                    // Initialization > (Property, Value)
                                                    let property = argument[0],
                                                        value = argument[1];

                                                    // Update > Property-Value List
                                                    isValidCSSProperty(property) && LDKF.pushArray(propertyValueList, {property: property, value: value})
                                                }

                                                else
                                                    // Error
                                                    LDKF.error(["'setCSS'", "'HTMLElement'"], 'argument', 'Invalid argument set')
                                            }
                                        }
                                    }

                                    else if (LDKF.isArray($0) && !isSpecialArgument($1)) {
                                        // Initialization > (Iterator, Length, Value)
                                        let iterator = 0,
                                            length = $0.length,
                                            value = $1;

                                        /* Loop
                                                Index Argument 0.
                                        */
                                        for (iterator; iterator != length; iterator += 1) {
                                            // Initialization > Property
                                            let property = $0[iterator];

                                            // Update > Property-Value List
                                            isValidCSSProperty(property) && LDKF.pushArray(propertyValueList, {property: property, value: value})
                                        }
                                    }

                                    else if (
                                        (!isSpecialArgument($0) && length == 1) ||
                                        ((!isSpecialArgument($0) && !isSpecialArgument($1)) && length == 2)
                                    ) {
                                        // Initialization > (Property, Value)
                                        let property = $0,
                                            value = length == 1 ? defaultValue : $1;

                                        // Update > Property-Value List
                                        isValidCSSProperty(property) && LDKF.pushArray(propertyValueList, {property: property, value: value})
                                    }

                                    else
                                        // Error
                                        LDKF.error(["'setCSS'", "'HTMLElement'"], 'argument', 'Invalid argument set');

                                    // Update > (Iterator, Length, Style Attribute)
                                    iterator = length = propertyValueList.length;
                                    (styleAttribute[styleAttribute.length - 1] == ';') || (styleAttribute += ';');

                                    /* Loop
                                            Index Property-Value List.
                                    */
                                    while (iterator) {
                                        // Initialization > (Property-Value, Property, Value)
                                        let propertyValue = propertyValueList[iterator -= 1],
                                            property = hyphenate(propertyValue.property),
                                            value = updateValue(propertyValue.value, property);

                                        // Modification > Property-Value > (Property, Value)
                                        propertyValue.property = property;
                                        propertyValue.value = value;

                                        // Update > Value
                                        value = LDKF.trimRightCharString(value, /!\w{1,}| |\n/);

                                        // Modification > Dummy Element Style > [Property]
                                        dummyElementStyle[property] = value;

                                        // Update > Property-Value List
                                        (property in dummyElementComputedStyle) || (propertyValueList[iterator] = void 0)
                                    }

                                    /* Loop
                                            Index Property-Value List.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Property-Value
                                        let propertyValue = propertyValueList[iterator];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (propertyValue) {
                                            // Initialization > (Property, Value, CSS, Match)
                                            let property = propertyValue.property,
                                                value = propertyValue.value,
                                                css = property + ': ' + value + '; ',
                                                match;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if ((match = (LDKF.matchString((function(string) {
                                                // Initialization > (Allow Stream, Iterator, Length, Stream(-Lock Character))
                                                let allowStream = !0,
                                                    iterator = 0,
                                                    length = string.length,
                                                    stream = '',
                                                    streamLockCharacter = '';

                                                /* Loop
                                                        Iterate through String.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > Character
                                                    let character = string[iterator];

                                                    /* Logic
                                                            Update > (Allow Stream, Stream-Lock Character)
                                                    */
                                                    if (
                                                        allowStream &&
                                                        (
                                                            character == '(' ||
                                                            character == '"' || character == "'"
                                                        )
                                                    ) {
                                                        allowStream = !1;
                                                        streamLockCharacter = character
                                                    }

                                                    else if (
                                                        !allowStream &&
                                                        (
                                                            (character == ')' && streamLockCharacter == '(') ||
                                                            (
                                                                (character == '"' || character == "'") &&
                                                                (character == streamLockCharacter)
                                                            )
                                                        )
                                                    ) {
                                                        allowStream = !0;
                                                        streamLockCharacter = ''
                                                    }

                                                    // Update > Stream
                                                    allowStream && (stream += character)
                                                }

                                                // Return
                                                return stream
                                            })(styleAttribute), LDKF.regex(property + ' {0,}: {0,}')) || [])).length) {
                                                // Update > Match
                                                match = match[0];
                                                match = LDKF.replaceString(match, LDKF.regex('[' + LDKF.getRegexChars(match) + ']', 'g'), '\\$&');

                                                // Initialization > (Style Attribute Iterator, Allow Stream, Stream(-Lock Character))
                                                let styleAttributeIterator = LDKF.indexOfString(styleAttribute, match),
                                                    allowStream = !0,
                                                    stream = '',
                                                    streamLockCharacter = '';

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (styleAttributeIterator != -1) {
                                                    // Initialization > (Style Attribute Length)
                                                    let styleAttributeLength = styleAttribute.length;

                                                    /* Loop
                                                            Iterate through Style Attribute.
                                                    */
                                                    for (styleAttributeIterator; styleAttributeIterator != styleAttributeLength; styleAttributeIterator += 1) {
                                                        let character = styleAttribute[styleAttributeIterator];

                                                        /* Logic
                                                                [if:else if statement]

                                                            > Update > (Allow Stream, Stream-Lock Character)
                                                        */
                                                        if (
                                                            allowStream &&
                                                            (
                                                                character == '(' ||
                                                                character == '"' || character == "'"
                                                            )
                                                        ) {
                                                            allowStream = !1;
                                                            streamLockCharacter = character
                                                        }

                                                        else if (
                                                            !allowStream &&
                                                            (
                                                                (character == ')' && streamLockCharacter == '(') ||
                                                                (
                                                                    (character == '"' || character == "'") &&
                                                                    (character == streamLockCharacter)
                                                                )
                                                            )
                                                        ) {
                                                            allowStream = !0;
                                                            streamLockCharacter = ''
                                                        }

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (allowStream) {
                                                            // Update > Stream
                                                            stream += character;

                                                            // Logic > Break
                                                            if (character == ';')
                                                                break
                                                        }
                                                    }
                                                }

                                                // Update > Style Attribute
                                                stream && (styleAttribute = LDKF.replaceString(styleAttribute, stream, LDKF.sliceString(css, 0, -' '.length)))
                                            }

                                            else
                                                // Update > Style Attribute
                                                styleAttribute += css
                                        }
                                    }

                                    // Update > Style Attribute
                                    styleAttribute = LDKF.trimCharString(styleAttribute, /;| |\n/);

                                    // Modification > (Dummy) Element > Style
                                    LDKF.removeAttributeElement(dummyElement, 'style');
                                    LDKF.setAttributeElement(element, 'style', styleAttribute)
                                }

                                // Return
                                return LDKF.getAttributeNodeElement(element, 'style') || null
                            },

                            // Writable
                            writable: !0
                        });

                        // Toggle Fullscreen
                        LDKF.objectDefineProperty(currentPrototype, 'toggleFullscreen', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function toggleFullscreen() {
                                // Initialization > (Alert, Document (Prototype), Fallback Element, Element (Prototype), Inner (Height, Width), Screen (Height))
                                let alert = arguments[0],
                                    document = LDKO.$document,
                                    documentProto = LDKO.$documentProto,
                                    fallbackElement = LDKF.get.documentChildren(document)[0],
                                    element = LDKF.isHtmlDocument(this) || LDKF.isWindow(this) ? fallbackElement : (this || fallbackElement),
                                    elementProto = LDKO.$elementProto,
                                    innerHeight = LDKF.get.windowInnerHeight(),
                                    innerWidth = LDKF.get.windowInnerWidth(),
                                    screen = LDKO.$screen,
                                    screenHeight = LDKF.get.screenHeight();

                                /* Logic
                                        [if statement]
                                */
                                if (fallbackElement) {
                                    /* Error Handling
                                            --- NOTE ---
                                                #Lapys: Maybe there`s an error in executing the fullscreen API.
                                    */
                                    try {
                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (innerHeight === screenHeight) {
                                            // Function > Update
                                            function update() { (LDKF.get.windowInnerHeight() === LDKF.get.screenHeight()) || (tmpObject.fullscreenElement = null) }

                                            /* Logic
                                                    [if:else if:else statement]
                                            */
                                            if (LDKF.isNativeFunction(documentProto.exitFullscreen)) {
                                                // Exit Fullscreen > Document
                                                LDKF.exitFullscreenDocument(document);

                                                // Update
                                                update()
                                            }

                                            else if (LDKF.isNativeFunction(documentProto.mozCancelFullScreen)) {
                                                // Mozilla Cancel Fullscreen > Document
                                                LDKF.mozCancelFullScreenDocument(document);

                                                // Update
                                                update()
                                            }

                                            else if (LDKF.isNativeFunction(documentProto.msExitFullscreen)) {
                                                // Microsoft Exit Fullscreen > Document
                                                LDKF.msExitFullscreenDocument(document);

                                                // Update
                                                update()
                                            }

                                            else if (LDKF.isNativeFunction(documentProto.webkitCancelFullScreen)) {
                                                // Web Kit Cancel Fullscreen > Document
                                                LDKF.webkitCancelFullScreenDocument(document);

                                                // Update
                                                update()
                                            }

                                            else
                                                // Error
                                                LDKF.error(["'toggleFullscreen'", "'HTMLElement'"], 'argument', 'No in-built methods capable of exiting fullscreen found on document')
                                        }

                                        else {
                                            // Initialization > (Dialog, Request)
                                            let dialog = LDKF.createElementDocument('div'),
                                                request;

                                            // Function
                                                // Remove Dialog
                                                function removeDialog() {
                                                    // Deletion
                                                    LDKF.remove$ChildNode(dialog)
                                                }

                                                // Update
                                                function update() {
                                                    // Initialization > Request
                                                    let request;

                                                    // Modification > Temporary Object > Fullscreen Element
                                                    (LDKF.get.windowInnerHeight() === LDKF.get.screenHeight()) && (tmpObject.fullscreenElement = element);

                                                    // Function > Check
                                                    (function check() {
                                                        /* Logic
                                                                [if:else statement]
                                                        */
                                                        if (LDKF.get.windowInnerHeight() === LDKF.get.screenHeight()) {
                                                            // Initialization > Timeout Set
                                                            let timeoutSet = !1;

                                                            // Function > Watcher
                                                            function watcher() {
                                                                /* Logic
                                                                        [if statement]
                                                                */
                                                                if (!timeoutSet) {
                                                                    // Initialization > Timeout
                                                                    let timeout;

                                                                    // Update > Timeout
                                                                    timeout = LDKF.setTimeout(function() {
                                                                        // Remove Dialog
                                                                        removeDialog();

                                                                        // Clear Timeout > Timeout
                                                                        LDKF.clearTimeout(timeout)
                                                                    }, 1e3);

                                                                    // Update > Timeout Set
                                                                    timeoutSet = !0;

                                                                    // Event > Window > (Blur, Focus, Key Down, Mouse (Move, Up), Scroll, Touch Start)
                                                                    LDKF.delEvent(window, 'blur', watcher);
                                                                    LDKF.delEvent(window, 'focus', watcher);
                                                                    LDKF.delEvent(window, 'keydown', watcher);
                                                                    LDKF.delEvent(window, 'mousemove', watcher);
                                                                    LDKF.delEvent(window, 'mouseup', watcher);
                                                                    LDKF.delEvent(window, 'scroll', watcher);
                                                                    LDKF.delEvent(window, 'touchstart', watcher)
                                                                }
                                                            }

                                                            // Event > Window > (Blur, Focus, Key Down, Mouse (Move, Up), Scroll, Touch Start)
                                                            LDKF.addEvent(window, 'blur', watcher);
                                                            LDKF.addEvent(window, 'focus', watcher);
                                                            LDKF.addEvent(window, 'keydown', watcher);
                                                            LDKF.addEvent(window, 'mousemove', watcher);
                                                            LDKF.addEvent(window, 'mouseup', watcher);
                                                            LDKF.addEvent(window, 'scroll', watcher);
                                                            LDKF.addEvent(window, 'touchstart', watcher);

                                                            // Watch
                                                            watch();

                                                            // Cancel Animation Frame > Request
                                                            LDKF.cancelAnimationFrame(request)
                                                        }

                                                        else
                                                            // Update > Request
                                                            request = LDKF.requestAnimationFrame(check)
                                                    })()
                                                }

                                                // Watch
                                                function watch() {
                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (LDKF.get.windowInnerHeight() === LDKF.get.screenHeight() && LDKF.get.nodeParentNode(dialog))
                                                        // Update > Request
                                                        request = LDKF.requestAnimationFrame(watch);

                                                    else {
                                                        // Remove Dialog
                                                        removeDialog();

                                                        // Cancel Animation Frame > Request
                                                        LDKF.cancelAnimationFrame(request)
                                                    }
                                                }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (arguments.length) {
                                                // Update > Alert
                                                alert = LDKF.isTrueBoolean(alert) ? LDKI.fullscreenMessage : LDKF.string(alert);

                                                // Modification > [Element] > Inner HTML
                                                LDKF.set.elementInnerHTML(LDKC.element, alert);

                                                // Update > Alert
                                                alert = LDKF.get.elementInnerHTML(LDKC.element);

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (alert == LDKF.get.htmlElementInnerText(LDKC.element))
                                                    // Alert > Window
                                                    LDKF.alertWindow(window, alert);

                                                else {
                                                    // Initialization > Dialog Style
                                                    let dialogStyle = LDKF.get.htmlElementStyle(dialog);

                                                    // Modification > Dialog Style
                                                        // Align Items
                                                        dialogStyle.alignItems = 'center';

                                                        // Bottom
                                                        dialogStyle.bottom = 0;

                                                        // Box Shadow
                                                        dialogStyle.boxShadow = '0 0 0 ' + (innerHeight > innerWidth ? innerHeight : innerWidth) + 'px rgba(0, 0, 0, .65)';

                                                        // Height
                                                        dialogStyle.height = (LDKF.isMobileViewport() ? innerHeight / 3 : innerHeight / 2) + 'px';

                                                        // Justify Content
                                                        dialogStyle.justifyContent = 'center';

                                                        // Left
                                                        dialogStyle.left = 0;

                                                        // Margin Bottom
                                                        dialogStyle.marginBottom = 'auto';

                                                        // Margin Left
                                                        dialogStyle.marginLeft = 'auto';

                                                        // Margin Right
                                                        dialogStyle.marginRight = 'auto';

                                                        // Margin Top
                                                        dialogStyle.marginTop = 'auto';

                                                        // Position
                                                        dialogStyle.position = 'fixed';

                                                        // Right
                                                        dialogStyle.right = 0;

                                                        // Top
                                                        dialogStyle.top = 0;

                                                        // Width
                                                        dialogStyle.width = (LDKF.isMobileViewport() ? (innerWidth / 10) * 9 : (innerWidth / 3) * 2) + 'px';

                                                        // Z Index
                                                        dialogStyle.zIndex = 2147483646;

                                                    // Modification > Dialog
                                                        // Class
                                                        LDKF.setAttributeElement(dialog, 'class', 'dialog');

                                                        // Inner HTML
                                                        LDKF.set.elementInnerHTML(dialog, alert);

                                                    // Insertion
                                                    LDKF.appendChildNode(element, dialog)
                                                }

                                                // Modification > [Element] > Inner HTML
                                                LDKF.set.elementInnerHTML(LDKC.element, '')
                                            }

                                            /* Logic
                                                    [if:else if:else statement]
                                            */
                                            if (LDKF.isNativeFunction(elementProto.requestFullscreen)) {
                                                // Request Fullscreen > Element
                                                LDKF.requestFullscreenElement(element);

                                                // Update
                                                update()
                                            }

                                            else if (LDKF.isNativeFunction(elementProto.mozRequestFullScreen)) {
                                                // Mozilla Request Fullscreen > Element
                                                LDKF.mozRequestFullScreenElement(element);

                                                // Update
                                                update()
                                            }

                                            else if (LDKF.isNativeFunction(elementProto.msRequestFullscreen)) {
                                                // Microsoft Request Fullscreen > Element
                                                LDKF.msRequestFullscreenElement(element);

                                                // Update
                                                update()
                                            }

                                            else if (LDKF.isNativeFunction(elementProto.webkitRequestFullScreen)) {
                                                // Web Kit Request Fullscreen > Element
                                                LDKF.webkitRequestFullScreenElement(element);

                                                // Update
                                                update()
                                            }

                                            else
                                                // Error
                                                LDKF.error(["'toggleFullscreen'", "'HTMLElement'"], 'argument', 'No in-built methods capable of requesting fullscreen found on element')
                                        }
                                    }

                                    catch (error) {
                                        // Error
                                        LDKF.error(["'toggleFullscreen'", "'HTMLElement'"], 'argument')
                                    }
                                }

                                // Return
                                return tmpObject.fullscreenElement
                            },

                            // Writable
                            writable: !0
                        });

                        // Write
                        LDKF.objectDefineProperty(currentPrototype, 'write', tmpObject.htmlElementPrototypeWriteDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function write() {
                                // Initialization > (Data, Element, Written Elements)
                                let data = LDKF.string(arguments[0]),
                                    element = this,
                                    writtenElements = tmpObject.writtenElements;

                                /* Logic
                                        [if:else statement]
                                */
                                if ((function() {
                                    // Initialization > Iterator
                                    let iterator = writtenElements.length;

                                    // Loop > Logic > Return
                                    while (iterator)
                                        if (writtenElements[iterator -= 1] === element)
                                            return !0
                                })())
                                    LDKF.set.elementInnerHTML(element, LDKF.get.elementInnerHTML(element) + data);

                                else {
                                    // Update > Written Elements
                                    LDKF.pushArray(writtenElements, element);

                                    // Modification > Element > Inner HTML
                                    LDKF.set.elementInnerHTML(element, data)
                                }
                            },

                            // Writable
                            writable: !0
                        });

                    /* Node Data */
                        // Cancel On Element Added
                        LDKF.objectDefineProperty(currentPrototype = LDKO.$nodeProto, 'cancelOnElementAdded', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function cancelOnElementAdded() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onElementAddedWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On Element Added Watch List
                                            LDKF.spliceArray(tmpObject.onElementAddedWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Cancel On Element Count Change
                        LDKF.objectDefineProperty(currentPrototype, 'cancelOnElementCountChange', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function cancelOnElementCountChange() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onElementCountChangeWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On Element Count Change Watch List
                                            LDKF.spliceArray(tmpObject.onElementCountChangeWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Cancel On Element Removed
                        LDKF.objectDefineProperty(currentPrototype, 'cancelOnElementRemoved', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function cancelOnElementRemoved() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onElementRemovedWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On Element Removed Watch List
                                            LDKF.spliceArray(tmpObject.onElementRemovedWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Cancel On HTML Change
                        LDKF.objectDefineProperty(currentPrototype, 'cancelOnHTMLChange', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: tmpObject.nodePrototypeCancelOnHTMLChangeDescriptorValue = function cancelOnHTMLChange() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onHTMLChangeWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On HTML Change Watch List
                                            LDKF.spliceArray(tmpObject.onHTMLChangeWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Cancel On Node Added
                        LDKF.objectDefineProperty(currentPrototype, 'cancelOnNodeAdded', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function cancelOnNodeAdded() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onNodeAddedWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On Node Added Watch List
                                            LDKF.spliceArray(tmpObject.onNodeAddedWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Cancel On Node Count Change
                        LDKF.objectDefineProperty(currentPrototype, 'cancelOnNodeCountChange', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function cancelOnNodeCountChange() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onNodeCountChangeWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On Node Count Change Watch List
                                            LDKF.spliceArray(tmpObject.onNodeCountChangeWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Cancel On Node Removed
                        LDKF.objectDefineProperty(currentPrototype, 'cancelOnNodeRemoved', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function cancelOnNodeRemoved() {
                                // Initialization > (Array, Callback, Iterator, Node)
                                let array = tmpObject.onNodeRemovedWatchList,
                                    callback = arguments[0],
                                    iterator = array.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length && iterator)
                                    /* Loop
                                            [while statement]
                                    */
                                    while (iterator) {
                                        // Initialization > Array Element
                                        let arrayElement = array[iterator -= 1];

                                        /* Logic
                                                [if statement]
                                        */
                                        if (
                                            (node === arrayElement.node) &&
                                            (
                                                (arrayElement.isEvaluationString && LDKF.isEvaluationString(callback) && callback === arrayElement.evaluationString) ||
                                                (arrayElement.isFunction && callback === arrayElement.function)
                                            )
                                        ) {
                                            // Update > Temporary Object > On Node Removed Watch List
                                            LDKF.spliceArray(tmpObject.onNodeRemovedWatchList, iterator, 1);

                                            // Break
                                            break
                                        }
                                    }

                                else
                                    // Update > Array
                                    iterator && LDKF.spliceArray(array, 0, iterator)
                            },

                            // Writable
                            writable: !0
                        });

                        // Descendant Index
                        LDKF.objectDefineProperty(currentPrototype, 'descendantIndex', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function descendantIndex() {
                                // Initialization > (Node, Parent)
                                let node = this,
                                    parent = LDKF.get.nodeParentNode(node);

                                // Return
                                return parent ? LDKF.indexOfArray(LDKF.toArray(LDKF.isNode(parent) ? LDKF.get.nodeChildNodes(parent) : [node]), node) : -1
                            }
                        });

                        // Insert After
                        LDKF.objectDefineProperty(currentPrototype, 'insertAfter', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function insertAfter() {
                                // Initialization > Node
                                let node = this;

                                // Error Handling
                                try {
                                    // Insertion
                                    LDKF.$insertBeforeNode(node, arguments);

                                    // Return
                                    return LDKF.$insertBeforeNode(node, LDKF.reverseArray(LDKF.toArray(arguments)))
                                } catch (error) {
                                    // Modification > Error > Message
                                    error.message = LDKF.replaceString(error.message, /insertBefore/g, 'insertAfter');

                                    // Error
                                    throw error
                                }
                            },

                            // Writable
                            writable: !0
                        });

                        // Next Siblings
                        LDKF.objectDefineProperty(currentPrototype, 'nextSiblings', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function _nextSiblings() {
                                // Initialization > (Node, Parent, Children, Index, Iterator, Next Siblings)
                                let node = this,
                                    parent = LDKF.get.nodeParentNode(node),
                                    children = LDKF.toArray(LDKF.isNode(parent) ? LDKF.get.nodeChildNodes(parent) : [node]),
                                    index = LDKF.indexOfArray(children, node),
                                    iterator = children.length,
                                    nextSiblings = [];

                                /* Loop
                                        [while statement]
                                */
                                while (iterator) {
                                    // Update > Iterator
                                    iterator -= 1;

                                    // Logic > Break
                                    if (iterator == index)
                                        break;

                                    // Update > Next Element Siblings
                                    LDKF.spliceArray(nextSiblings, 0, 0, children[iterator])
                                }

                                // Return
                                return nextSiblings
                            }
                        });

                        // Previous Siblings
                        LDKF.objectDefineProperty(currentPrototype, 'previousSiblings', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function _previousSiblings() {
                                // Initialization > (Node, Parent, Children, Index, Iterator, Previous Siblings)
                                let node = this,
                                    parent = LDKF.get.nodeParentNode(node),
                                    children = LDKF.toArray(LDKF.isNode(parent) ? LDKF.get.nodeChildNodes(parent) : [node]),
                                    index = LDKF.indexOfArray(children, node),
                                    iterator = 0,
                                    length = children.length,
                                    previousSiblings = [];

                                /* Loop
                                        [for statement]
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Logic > Break
                                    if (iterator == index)
                                        break;

                                    // Update > Previous Siblings
                                    LDKF.pushArray(previousSiblings, children[iterator])
                                }

                                // Return
                                return previousSiblings
                            }
                        });

                        // Parent
                        LDKF.objectDefineProperty(currentPrototype, 'parent', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function parent() {
                                // Return
                                return LDKF.get.nodeParentNode(this) || null
                            }
                        });

                        // Parent Path
                        LDKF.objectDefineProperty(currentPrototype, 'parentPath', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Get
                            get: function parentPath() {
                                // Initialization > (Node, Parents)
                                let node = this,
                                    parents = [];

                                // Loop > Update > Parents
                                while (node = LDKF.get.nodeParentNode(node))
                                    LDKF.pushArray(parents, node);

                                // Return
                                return parents
                            }
                        });

                        // On Element Added
                        LDKF.objectDefineProperty(currentPrototype, 'onElementAdded', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function onElementAdded() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On Element Added Watch List Element)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onElementAddedWatchListElement = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onElementAddedWatchListElement.evaluationString = callback;

                                        // Modification > On DOM Element Added Watch List Element > Is (Evaluation String, Function)
                                        onElementAddedWatchListElement.isEvaluationString = !0;
                                        onElementAddedWatchListElement.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onElementAddedWatchListElement.evaluationString = '';

                                        // Modification > On DOM Element Added Watch List Element > Is (Evaluation String, Function)
                                        onElementAddedWatchListElement.isEvaluationString = !1;
                                        onElementAddedWatchListElement.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onElementAdded'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On Element Added Watch List > (Function, Node)
                                    onElementAddedWatchListElement.function = callback;
                                    onElementAddedWatchListElement.node = node;

                                    // Error
                                    tmpObject.onElementAddedWatchList.length && test() && LDKF.error("'onElementAdded'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On Element Added Watch List)
                                    LDKF.pushArray(tmpObject.onElementAddedWatchList, onElementAddedWatchListElement);

                                    // Initialization > ((Former) Length, Request)
                                    let formerLength = LDKF.isElement(node) ? LDKF.querySelectorAllElement(node, '*').length : 0,
                                        length = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onElementAddedWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Element
                                                let arrayElement = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayElement.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > Length
                                            length = LDKF.isElement(node) ? LDKF.querySelectorAllElement(node, '*').length : 0;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length > formerLength) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former Length
                                                formerLength = length
                                            }

                                            // Update > Former Length
                                            (formerLength == length) || (formerLength = length);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onElementAdded'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // On Element Count Change
                        LDKF.objectDefineProperty(currentPrototype, 'onElementCountChange', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function onElementCountChange() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On Element Count Change Watch List Element)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onElementCountChangeWatchListElement = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onElementCountChangeWatchListElement.evaluationString = callback;

                                        // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                        onElementCountChangeWatchListElement.isEvaluationString = !0;
                                        onElementCountChangeWatchListElement.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onElementCountChangeWatchListElement.evaluationString = '';

                                        // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                        onElementCountChangeWatchListElement.isEvaluationString = !1;
                                        onElementCountChangeWatchListElement.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onElementCountChange'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On Element Count Change Watch List > (Function, Node)
                                    onElementCountChangeWatchListElement.function = callback;
                                    onElementCountChangeWatchListElement.node = node;

                                    // Error
                                    tmpObject.onElementCountChangeWatchList.length && test() && LDKF.error("'onElementCountChange'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On Element Count Change Watch List)
                                    LDKF.pushArray(tmpObject.onElementCountChangeWatchList, onElementCountChangeWatchListElement);

                                    // Initialization > ((Former) Length, Request)
                                    let formerLength = LDKF.isElement(node) ? LDKF.querySelectorAllElement(node, '*').length : 0,
                                        length = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onElementCountChangeWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Element
                                                let arrayElement = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayElement.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > Length
                                            length = LDKF.isElement(node) ? LDKF.querySelectorAllElement(node, '*').length : 0;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length !== formerLength) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former Length
                                                formerLength = length
                                            }

                                            // Update > Former Length
                                            (formerLength == length) || (formerLength = length);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onElementCountChange'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // On Element Removed
                        LDKF.objectDefineProperty(currentPrototype, 'onElementRemoved', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function onElementRemoved() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On Element Removed Watch List Element)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onElementRemovedWatchListElement = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onElementRemovedWatchListElement.evaluationString = callback;

                                        // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                        onElementRemovedWatchListElement.isEvaluationString = !0;
                                        onElementRemovedWatchListElement.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onElementRemovedWatchListElement.evaluationString = '';

                                        // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                        onElementRemovedWatchListElement.isEvaluationString = !1;
                                        onElementRemovedWatchListElement.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onElementRemoved'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On Element Removed Watch List > (Function, Node)
                                    onElementRemovedWatchListElement.function = callback;
                                    onElementRemovedWatchListElement.node = node;

                                    // Error
                                    tmpObject.onElementRemovedWatchList.length && test() && LDKF.error("'onElementRemoved'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On Element Removed Watch List)
                                    LDKF.pushArray(tmpObject.onElementRemovedWatchList, onElementRemovedWatchListElement);

                                    // Initialization > ((Former) Length, Request)
                                    let formerLength = LDKF.isElement(node) ? LDKF.querySelectorAllElement(node, '*').length : 0,
                                        length = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onElementRemovedWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Element
                                                let arrayElement = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayElement.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > Length
                                            length = LDKF.isElement(node) ? LDKF.querySelectorAllElement(node, '*').length : 0;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length < formerLength) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former Length
                                                formerLength = length
                                            }

                                            // Update > Former Length
                                            (formerLength == length) || (formerLength = length);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onElementRemoved'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // On HTML Change
                        LDKF.objectDefineProperty(currentPrototype, 'onHTMLChange', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: tmpObject.nodePrototypeOnHTMLChangeDescriptorValue = function onHTMLChange() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On HTML Change Watch List Element)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onHTMLChangeWatchListElement = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onHTMLChangeWatchListElement.evaluationString = callback;

                                        // Modification > On HTML Change Watch List Element > Is (Evaluation String, Function)
                                        onHTMLChangeWatchListElement.isEvaluationString = !0;
                                        onHTMLChangeWatchListElement.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onHTMLChangeWatchListElement.evaluationString = '';

                                        // Modification > On DOM Element Removed Watch List Element > Is (Evaluation String, Function)
                                        onHTMLChangeWatchListElement.isEvaluationString = !1;
                                        onHTMLChangeWatchListElement.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onHTMLChange'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On HTML Change Watch List > (Function, Node)
                                    onHTMLChangeWatchListElement.function = callback;
                                    onHTMLChangeWatchListElement.node = node;

                                    // Error
                                    tmpObject.onHTMLChangeWatchList.length && test() && LDKF.error("'onHTMLChange'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On HTML Change Watch List)
                                    LDKF.pushArray(tmpObject.onHTMLChangeWatchList, onHTMLChangeWatchListElement);

                                    // Initialization > ((Former) HTML, Request)
                                    let formerHTML = LDKF.isElement(node) ? LDKF.get.elementOuterHTML(node) : 0,
                                        HTML = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onHTMLChangeWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Element
                                                let arrayElement = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayElement.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayElement.evaluationString) ||
                                                        (arrayElement.isFunction && callback === arrayElement.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > HTML
                                            HTML = LDKF.isElement(node) ? LDKF.get.elementOuterHTML(node) : 0;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (HTML !== formerHTML) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former HTML
                                                formerHTML = HTML
                                            }

                                            // Update > Former HTML
                                            (formerHTML == HTML) || (formerHTML = HTML);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onHTMLChange'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // On Node Added
                        LDKF.objectDefineProperty(currentPrototype, 'onNodeAdded', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function onNodeAdded() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On Node Added Watch List Node)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onNodeAddedWatchListNode = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onNodeAddedWatchListNode.evaluationString = callback;

                                        // Modification > On DOM Node Added Watch List Node > Is (Evaluation String, Function)
                                        onNodeAddedWatchListNode.isEvaluationString = !0;
                                        onNodeAddedWatchListNode.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onNodeAddedWatchListNode.evaluationString = '';

                                        // Modification > On DOM Node Added Watch List Node > Is (Evaluation String, Function)
                                        onNodeAddedWatchListNode.isEvaluationString = !1;
                                        onNodeAddedWatchListNode.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onNodeAdded'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On Node Added Watch List > (Function, Node)
                                    onNodeAddedWatchListNode.function = callback;
                                    onNodeAddedWatchListNode.node = node;

                                    // Error
                                    tmpObject.onNodeAddedWatchList.length && test() && LDKF.error("'onNodeAdded'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On Node Added Watch List)
                                    LDKF.pushArray(tmpObject.onNodeAddedWatchList, onNodeAddedWatchListNode);

                                    // Initialization > ((Former) Length, Request)
                                    let formerLength = LDKF.allNodeNodes(node, !0).length,
                                        length = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onNodeAddedWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Node
                                                let arrayNode = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayNode.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayNode.evaluationString) ||
                                                        (arrayNode.isFunction && callback === arrayNode.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > Length
                                            length = LDKF.allNodeNodes(node, !0).length;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length > formerLength) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former Length
                                                formerLength = length
                                            }

                                            // Update > Former Length
                                            (formerLength == length) || (formerLength = length);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onNodeAdded'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // On Node Count Change
                        LDKF.objectDefineProperty(currentPrototype, 'onNodeCountChange', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function onNodeCountChange() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On Node Count Change Watch List Node)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onNodeCountChangeWatchListNode = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onNodeCountChangeWatchListNode.evaluationString = callback;

                                        // Modification > On DOM Node Count Change Watch List Node > Is (Evaluation String, Function)
                                        onNodeCountChangeWatchListNode.isEvaluationString = !0;
                                        onNodeCountChangeWatchListNode.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onNodeCountChangeWatchListNode.evaluationString = '';

                                        // Modification > On DOM Node Count Change Watch List Node > Is (Evaluation String, Function)
                                        onNodeCountChangeWatchListNode.isEvaluationString = !1;
                                        onNodeCountChangeWatchListNode.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onNodeCountChange'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On Node Count Change Watch List > (Function, Node)
                                    onNodeCountChangeWatchListNode.function = callback;
                                    onNodeCountChangeWatchListNode.node = node;

                                    // Error
                                    tmpObject.onNodeCountChangeWatchList.length && test() && LDKF.error("'onNodeCountChange'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On Node Count Change Watch List)
                                    LDKF.pushArray(tmpObject.onNodeCountChangeWatchList, onNodeCountChangeWatchListNode);

                                    // Initialization > ((Former) Length, Request)
                                    let formerLength = LDKF.allNodeNodes(node, !0).length,
                                        length = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onNodeCountChangeWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Node
                                                let arrayNode = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayNode.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayNode.evaluationString) ||
                                                        (arrayNode.isFunction && callback === arrayNode.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > Length
                                            length = LDKF.allNodeNodes(node, !0).length;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length !== formerLength) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former Length
                                                formerLength = length
                                            }

                                            // Update > Former Length
                                            (formerLength == length) || (formerLength = length);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onNodeCountChange'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // On Node Removed
                        LDKF.objectDefineProperty(currentPrototype, 'onNodeRemoved', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !0,

                            // Value
                            value: function onNodeRemoved() {
                                // Initialization > (Length, Node)
                                let length = arguments.length,
                                    node = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (length) {
                                    // Initialization > (Callback, Evaluation String, On Node Removed Watch List Node)
                                    let callback = arguments[0],
                                        evaluationString,
                                        onNodeRemovedWatchListNode = {};

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isEvaluationString(callback)) {
                                        // Update > Evaluation String
                                        evaluationString = onNodeRemovedWatchListNode.evaluationString = callback;

                                        // Modification > On DOM Node Removed Watch List Node > Is (Evaluation String, Function)
                                        onNodeRemovedWatchListNode.isEvaluationString = !0;
                                        onNodeRemovedWatchListNode.isFunction = !1;

                                        // Update > Callback
                                        callback = LDKF.$func(callback)
                                    }

                                    else {
                                        // Update > Evaluation String
                                        evaluationString = onNodeRemovedWatchListNode.evaluationString = '';

                                        // Modification > On DOM Node Removed Watch List Node > Is (Evaluation String, Function)
                                        onNodeRemovedWatchListNode.isEvaluationString = !1;
                                        onNodeRemovedWatchListNode.isFunction = !0
                                    }

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error("'onNodeRemoved'", 'argument', LDKF.debugMessage('Argument 0', ['must', 'a'], ['evaluation string', 'function']));

                                    // Modification > On Node Removed Watch List > (Function, Node)
                                    onNodeRemovedWatchListNode.function = callback;
                                    onNodeRemovedWatchListNode.node = node;

                                    // Error
                                    tmpObject.onNodeRemovedWatchList.length && test() && LDKF.error("'onNodeRemoved'", 'argument', 'Callback and element has been added to the watch list already');

                                    // Update > (Temporary Object > On Node Removed Watch List)
                                    LDKF.pushArray(tmpObject.onNodeRemovedWatchList, onNodeRemovedWatchListNode);

                                    // Initialization > ((Former) Length, Request)
                                    let formerLength = LDKF.allNodeNodes(node, !0).length,
                                        length = 0,
                                        request;

                                    // Function
                                        // Test
                                        function test() {
                                            // Initialization > (Array, Iterator)
                                            let array = tmpObject.onNodeRemovedWatchList,
                                                iterator = array.length;

                                            /* Loop
                                                    [while statement]
                                            */
                                            while (iterator) {
                                                // Initialization > Array Node
                                                let arrayNode = array[iterator -= 1];

                                                // Logic > Return
                                                if (
                                                    (node === arrayNode.node) &&
                                                    (
                                                        (evaluationString && evaluationString === arrayNode.evaluationString) ||
                                                        (arrayNode.isFunction && callback === arrayNode.function)
                                                    )
                                                )
                                                    return !0
                                            }
                                        }

                                        // Watch
                                        (function watch() {
                                            // Update > Length
                                            length = LDKF.allNodeNodes(node, !0).length;

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (length < formerLength) {
                                                // Callback
                                                callback.call(node);

                                                // Update > Former Length
                                                formerLength = length
                                            }

                                            // Update > Former Length
                                            (formerLength == length) || (formerLength = length);

                                            // (Update > Request) | Cancel Animation Frame > Request
                                            test() ?
                                                request = LDKF.requestAnimationFrame(watch) :
                                                LDKF.cancelAnimationFrame(request)
                                        })()
                                }

                                else
                                    // Error
                                    LDKF.error(["'onNodeRemoved'", "'Node'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                    /* Number Data */
                        /* Convert Unit
                                --- UPDATE REQUIRED ---
                                    #Lapys: Must be able to convert from
                                        unit measurement to unit measurement.

                                        P.S.: Use the `LDKC.metricsTable` property.
                        */
                        LDKF.objectDefineProperty(LDKO.number, 'convertUnit', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function convertUnit() {},

                            // Writable
                            writable: !0
                        });
                            // Definition
                            LDKF.objectDefineProperty(window, 'convertUnit', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKO.number.convertUnit,

                                // Writable
                                writable: !0
                            });

                        // Ordinal
                        LDKF.objectDefineProperty(LDKO.numberProto, 'ordinal', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Get
                            get: function ordinal() {
                                // Initialization > (Target, Iterator, String (Length))
                                let that = LDKF.number(this),
                                    iterator = 0,
                                    string = '',
                                    $string = LDKF.string(that),
                                    $stringLength = $string.length;

                                /* Loop
                                        Iterate through String.

                                        --- NOTE ---
                                            #Lapys: Convert the number to integer.
                                */
                                for (iterator; iterator < $stringLength; iterator += 1) {
                                    // Initialization > Character
                                    let character = $string[iterator];

                                    // Logic > Break
                                    if ($string[iterator] == '.')
                                        break;

                                    // Update > String
                                    string += character
                                }

                                /* Logic
                                        [if:else if:else statement]
                                */
                                if (LDKF.isFinite(that)) {
                                    // Initialization > Last String Character
                                    let lastStringCharacter = string[string.length - 1];

                                    /* Logic
                                            [if:else if:else statement]

                                        > Update > String
                                    */
                                    if (lastStringCharacter == '1')
                                        string += 'st';

                                    else if (lastStringCharacter == '2')
                                        string += 'nd';

                                    else if (lastStringCharacter == '3')
                                        string += 'rd';

                                    else
                                        string += 'th'
                                }

                                else if (LDKF.isNaN(that))
                                    // Update > String
                                    string = 'not a number';

                                else if (LDKF.isInfinite(that))
                                    // Update > String
                                    string = 'infinity';

                                else
                                    // Update > String
                                    string = '';

                                // Update > String
                                ($string[0] == '-') && (string = 'negative ' + string);

                                // Return
                                return string
                            }
                        });

                        // Parse Number
                        LDKF.objectDefineProperty(LDKO.number, 'parseNumber', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: LDKF.$number,

                            // Writable
                            writable: !0
                        });
                            // Definition
                            LDKF.objectDefineProperty(window, 'parseNumber', {
                                // Configurable
                                configurable: !0,

                                // Value
                                value: LDKO.number.parseNumber,

                                // Writable
                                writable: !0
                            });

                        // Spell
                        LDKF.objectDefineProperty(LDKO.numberProto, 'spell', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            /* Get
                                    --- NOTE ---
                                        #Lapys: This was from a previous version
                                            of LapysJS modified for this version.

                                            It still works but it may not be clear.
                            */
                            get: function spell() {
                                // Initialization > (...)
                                let data = LDKC.specialCharacters,
                                    metadata = '',
                                    that = +this,
                                    $that = that - 0,
                                    alpha = that > -1 && !LDKF.objectIs(that, -0),
                                    beta = LDKF.string(that),
                                    $beta = '',
                                    iterator = 0;

                                // Initialization > (Allow Beta, Length)
                                let allowBeta = !1,
                                    length = beta.length;

                                /* Loop
                                        Iterate through Beta.
                                */
                                for (iterator; iterator < length; iterator += 1) {
                                    // Initialization > Character
                                    let character = beta[iterator];

                                    /* Logic
                                            [if:else if statement]

                                        > Update > (Allow) Beta
                                    */
                                    if (allowBeta)
                                        $beta += character;

                                    else if (character == '.')
                                        allowBeta = !0
                                }

                                // (Update > Beta), (Loop > Update > Beta)
                                beta = $beta;
                                while (beta[0] == ' ' || beta[0] == '\n') beta = LDKF.sliceString(beta, 1);
                                while (beta[beta.length - 1] == ' ' || beta[beta.length - 1] == '\n') beta = LDKF.sliceString(beta, 0, -1);

                                // Return
                                return (function() {
                                    // Update > Target
                                    that = LDKF.numberParseInt(LDKF.abs(that));

                                    // Initialization > (...)
                                    let zero = ['zero'],
                                        ones = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'],
                                        tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'],
                                        hundreds = ['hundred'],
                                        thousands = ['thousand'],
                                        millions = ['million', 'billion', 'trillion', 'quadrillion', 'quintillion'];

                                    // Function
                                        // Parse Hundreds
                                        function parseHundreds() {
                                            // Initialization > Data
                                            let data = LDKF.string(arguments[0]),
                                                metadata = data[0],
                                                alpha = LDKF.sliceString(data, 1),
                                                beta = (parseOnes(+metadata) + ' ' + hundreds[0] + ' and ' + (function() {
                                                    // Initialization > Data
                                                    let data = +alpha;

                                                    // Update > Data
                                                    data = data == 0 ? '' : (data < 20 ? parseOnes(data) : parseTens(data));

                                                    // Return
                                                    return data
                                                })());

                                            // Loop > Update > Beta
                                            while (
                                                (beta[beta.length - 3] == 'a' && beta[beta.length - 2] == 'n' && beta[beta.length - 1] == 'd') ||
                                                beta[beta.length - 1] == ' '
                                            )
                                                beta = beta[beta.length - 3] == 'a' && beta[beta.length - 2] == 'n' && beta[beta.length - 1] == 'd' ?
                                                    beta = LDKF.sliceString(beta, 0, -3) :
                                                    beta = LDKF.sliceString(beta, 0, -1);

                                            // Return
                                            return beta
                                        }

                                        // Parse Millions
                                        function parseMillions() {
                                            // Initialization > Data
                                            let data = LDKF.string(arguments[0]);

                                            // Function
                                                // Parse Billion
                                                function parseBillion() {
                                                    // Initialization > (Data, Metadata, Alpha)
                                                    let data = LDKF.string(arguments[0]),
                                                        metadata = LDKF.sliceString(data, 0, data.length - 9),
                                                        alpha = LDKF.sliceString(data, metadata.length);

                                                    // Return
                                                    return (function() {
                                                        // Initialization > Data
                                                        let data = +metadata;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? parseOnes(data) : (data < 100 ? parseTens(data) : parseHundreds(data)));

                                                        // Return
                                                        return data
                                                    })() + ' ' + millions[1] + (function() {
                                                        // Initialization > Data
                                                        let data = +alpha;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : (data < 1000 ? ' ' + parseHundreds(data) : (data < 1000000 ? ' ' + parseThousands(data) : ' ' + parseMillion(data)))));

                                                        // Return
                                                        return data
                                                    })()
                                                }

                                                // Parse Million
                                                function parseMillion() {
                                                    // Initialization > (Data, Metadata, Alpha)
                                                    let data = LDKF.string(arguments[0]),
                                                        metadata = LDKF.sliceString(data, 0, data.length - 6),
                                                        alpha = LDKF.sliceString(data, metadata.length);

                                                    // Return
                                                    return (function() {
                                                        // Initialization > Data
                                                        let data = +metadata;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? parseOnes(data) : (data < 100 ? parseTens(data) : parseHundreds(data)));

                                                        // Return
                                                        return data
                                                    })() + ' ' + millions[0] + (function() {
                                                        // Initialization > Data
                                                        let data = +alpha;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : (data < 1000 ? ' ' + parseHundreds(data) : ' ' + parseThousands(data))));

                                                        // Return
                                                        return data
                                                    })()
                                                }

                                                // Parse Quadrillion
                                                function parseQuadrillion() {
                                                    // Initialization > (Data, Metadata, Alpha)
                                                    let data = LDKF.string(arguments[0]),
                                                        metadata = LDKF.sliceString(data, 0, data.length - 15),
                                                        alpha = LDKF.sliceString(data, metadata.length);

                                                    // Return
                                                    return (function() {
                                                        // Initialization > Data
                                                        let data = +metadata;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? parseOnes(data) : parseTens(data));

                                                        // Return
                                                        return data
                                                    })() + ' ' + millions[3] + (function() {
                                                        // Initialization > Data
                                                        let data = +alpha;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : (data < 1e3 ? ' ' + parseHundreds(data) : (data < 1e6 ? ' ' + parseThousands(data) : (data < 1e9 ? ' ' + parseMillion(data) : (data < 1e12 ? ' ' + parseBillion(data) : ' ' + parseTrillion(data)))))));

                                                        // Return
                                                        return data
                                                    })()
                                                }

                                                // Parse Trillion
                                                function parseTrillion() {
                                                    // Initialization > (Data, Metadata, Alpha)
                                                    let data = LDKF.string(arguments[0]),
                                                        metadata = LDKF.sliceString(data, 0, data.length - 12),
                                                        alpha = LDKF.sliceString(data, metadata.length);

                                                    // Return
                                                    return (function() {
                                                        // Initialization > Data
                                                        let data = +metadata;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? parseOnes(data) : (data < 100 ? parseTens(data) : parseHundreds(data)));

                                                        // Return
                                                        return data
                                                    })() + ' ' + millions[2] + (function() {
                                                        // Initialization > Data
                                                        let data = +alpha;

                                                        // Update > Data
                                                        data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : (data < 1000 ? ' ' + parseHundreds(data) : (data < 1000000 ? ' ' + parseThousands(data) : (data < 1000000000 ? ' ' + parseMillion(data) : ' ' + parseBillion(data))))));

                                                        // Return
                                                        return data
                                                    })()
                                                }

                                            /* Logic
                                                    [if:else if statement]

                                                > Update > Data
                                            */
                                            if (data.length > 6 && data.length < 10)
                                                data = parseMillion(data);

                                            else if (data.length > 9 && data.length < 13)
                                                data = parseBillion(data);

                                            else if (data.length > 12 && data.length < 16)
                                                data = parseTrillion(data);

                                            else if (data.length > 15 && data.length < 19)
                                                data = parseQuadrillion(data);

                                            // Loop > Update > Data
                                            while (
                                                (data[data.length - 3] == 'a' && data[data.length - 2] == 'n' && data[data.length - 1] == 'd') ||
                                                data[data.length - 1] == ' '
                                            )
                                                data = data[data.length - 3] == 'a' && data[data.length - 2] == 'n' && data[data.length - 1] == 'd' ?
                                                    LDKF.sliceString(data, 0, -3) :
                                                    LDKF.sliceString(data, 0, -1);

                                            // Return
                                            return data
                                        }

                                        // Parse Ones
                                        function parseOnes() {
                                            // Return
                                            return ones[arguments[0] - 1]
                                        }

                                        // Parse Tens
                                        function parseTens() {
                                            // Initialization > Data
                                            let data = arguments[0];

                                            // Return
                                            return tens[+(LDKF.string(data)[0]) - 2] + (data - +(LDKF.string(data)[0] + '0') ? ' ' + parseOnes(data - +(LDKF.string(data)[0] + '0')) : '')
                                        }

                                        // Parse Thousands
                                        function parseThousands() {
                                            // Initialization > Data
                                            let data = LDKF.string(arguments[0]);

                                            /* Logic
                                                    [if:else if statement]
                                            */
                                            if (data.length == 4) {
                                                // Initialization > (Metadata, Alpha)
                                                let metadata = data[0],
                                                    alpha = LDKF.sliceString(data, 1);

                                                // Update > Data
                                                data = parseOnes(+metadata) + ' ' + thousands[0] + (function() {
                                                    // Initialization > Data
                                                    let data = +alpha;

                                                    // Update > Data
                                                    data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : ' ' + parseHundreds(data)));

                                                    // Return
                                                    return data
                                                })()
                                            }

                                            else if (data.length == 5) {
                                                // Initialization > (Metadata, Alpha)
                                                let metadata = LDKF.sliceString(data, 0, 2),
                                                    alpha = LDKF.sliceString(data, 2);

                                                // Update > Data
                                                data = (function() {
                                                    // Initialization > Data
                                                    let data = +metadata;

                                                    // Update > Data
                                                    data = data == 0 ? '' : (data < 20 ? parseOnes(data) : parseTens(data));

                                                    // Return
                                                    return data
                                                })() + ' ' + thousands[0] + (function() {
                                                    // Initialization > Data
                                                    let data = +alpha;

                                                    // Update > Data
                                                    data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : ' ' + parseHundreds(data)));

                                                    // Return
                                                    return data
                                                })()
                                            }

                                            else if (data.length == 6) {
                                                // Initialization > (Metadata, Alpha)
                                                let metadata = LDKF.sliceString(data, 0, 3),
                                                    alpha = LDKF.sliceString(data, 3);

                                                // Update > Data
                                                data = (function() {
                                                    // Initialization > Data
                                                    let data = +metadata;

                                                    // Update > Data
                                                    data = data == 0 ? '' : (data < 20 ? parseOnes(data) : (data < 100 ? parseTens(data) : parseHundreds(data)));

                                                    // Return
                                                    return data
                                                })() + ' ' + thousands[0] + (function() {
                                                    // Initialization > Data
                                                    let data = +alpha;

                                                    // Update > Data
                                                    data = data == 0 ? '' : (data < 20 ? ' and ' + parseOnes(data) : (data < 100 ? ' and ' + parseTens(data) : ' ' + parseHundreds(data)));

                                                    // Return
                                                    return data
                                                })()
                                            }

                                            // Loop > Update > Data
                                            while (
                                                (data[data.length - 4] == ' ' && data[data.length - 3] == 'a' && data[data.length - 2] == 'n' && data[data.length - 1] == 'd') ||
                                                data[data.length - 1] == ' '
                                            )
                                                data = data[data.length - 4] == ' ' && data[data.length - 3] == 'a' && data[data.length - 2] == 'n' && data[data.length - 1] == 'd' ?
                                                    LDKF.sliceString(data, 0, -4) :
                                                    LDKF.sliceString(data, 0, -1);

                                            // Return
                                            return data
                                        }

                                        // Parse Zero
                                        function parseZero() {
                                            // Return
                                            return zero[0]
                                        }

                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (LDKF.numberIsSafeInteger(that)) {
                                        /* Logic
                                                [if:else if statement]

                                            > Update > Metadata
                                        */
                                        if (that == 0)
                                            metadata += parseZero();

                                        else if (that > 0 && that < 20)
                                            metadata += parseOnes(that);

                                        else if (that > 19 && that < 100)
                                            metadata += parseTens(that);

                                        else if (that > 99 && that < 1e3)
                                            metadata += parseHundreds(that);

                                        else if (that > 999 && that < 1e6)
                                            metadata += parseThousands(that);

                                        else if (that > 999999 && that < 1e20)
                                            metadata += parseMillions(that);

                                        /* Logic
                                                [if statement]

                                                --- NOTE ---
                                                    #lapys: Parse for decimal units.
                                        */
                                        if (beta) {
                                            // Update > Metadata
                                            metadata += ' point';

                                            let betaLength = beta.length;
                                            /* Loop
                                                    Index Beta.

                                                > Update > Metadata
                                            */
                                            for (iterator = 0; iterator < betaLength; iterator += 1)
                                                metadata += ' ' + parseOnes(beta[iterator])
                                        }

                                        // Update > Metadata
                                        alpha || (metadata = 'negative ' + metadata);
                                        (
                                            metadata[metadata.length - 11] == ' ' && metadata[metadata.length - 10] == 'p' && metadata[metadata.length - 9] == 'o' && metadata[metadata.length - 8] == 'i' && metadata[metadata.length - 7] == 'n' && metadata[metadata.length - 6] == 't' &&
                                            metadata[metadata.length - 5] == ' ' &&
                                            metadata[metadata.length - 4] == 'z' && metadata[metadata.length - 3] == 'e' && metadata[metadata.length - 2] == 'r' && metadata[metadata.length - 1] == 'o'
                                        ) && (metadata = LDKF.sliceString(metadata, 0, -' point zero'.length))
                                    }

                                    else if (LDKF.isNaN($that))
                                        // Update > Metadata
                                        metadata = 'not a number';

                                    else if (LDKF.isInfinite($that)) {
                                        // Update > Metadata
                                        metadata = 'infinity';
                                        alpha || (metadata = 'negative ' + metadata)
                                    }

                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (metadata) {
                                        // (Update > Metadata), (Loop > Update > Metadata)
                                        metadata = LDKF.replaceString(LDKF.replaceString(LDKF.replaceString(metadata, /\b\w/g, function(a) { return LDKF.toUpperCaseString(a) }), /And/g, 'and'), /Undefined/g, 'Zero');
                                        while (metadata[0] == ' ' || metadata[0] == '\n') metadata = LDKF.sliceString(metadata, 1);
                                        while (metadata[metadata.length - 1] == ' ' || metadata[metadata.length - 1] == '\n') metadata = LDKF.sliceString(metadata, 0, -1);

                                        // Return
                                        return metadata
                                    }

                                    else
                                        // Warn
                                        LDKF.warn(["'spell'", "'Number'"], 'argument', 'Expected safe number from range ' + LDKO.numberMinSafeInteger + ' to ' + LDKO.numberMaxSafeInteger + ', or infinity.');

                                    // Return
                                    return 'non-safe number'
                                })()
                            }
                        });

                    /* Object Data */
                        // Clone
                        LDKF.objectDefineProperty(currentPrototype = LDKO.objectProto, 'clone', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function clone() {
                                // Initialization > Object
                                let object = this;

                                /* Logic
                                        [if statement]
                                */
                                if (LDKF.isConstructible(object)) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (typeof object == 'object')
                                        /* Logic
                                                [switch:case statement]

                                            > Update > Object
                                        */
                                        switch (object.constructor) {
                                            // Boolean
                                            case LDKO.boolean: object = LDKF.valueOfBoolean(object); break;

                                            // Function
                                            case LDKO.func: object = LDKF.valueOfFunction(object); break;

                                            // Number
                                            case LDKO.number: object = LDKF.valueOfNumber(object); break;

                                            // Regular Expression
                                            case LDKO.regex: object = LDKF.valueOfRegex(object); break;

                                            // String
                                            case LDKO.string: object = LDKF.valueOfString(object); break;

                                            // Symbol
                                            case LDKO.symbol: object = LDKF.valueOfSymbol(object)
                                        }

                                    // Return
                                    return LDKF.cloneObject(object)
                                }

                                // Return
                                return object
                            },

                            // Writable
                            writable: !0
                        });

                        // Contains
                        LDKF.objectDefineProperty(currentPrototype, 'contains', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function contains() {
                                // Initialization > (Object, Property)
                                let object = this,
                                    property = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    // Return
                                    return !!LDKF.matchObjectProperty(object, property);

                                else
                                    // Error
                                    LDKF.error(["'contains'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // Define Property
                        LDKF.objectDefineProperty(currentPrototype, 'def', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function defineProperty() {
                                // Initialization > (Object, Description, Names, Length)
                                let object = this,
                                    description = arguments[1],
                                    names = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (arguments.length == 1)
                                        // Update > Description
                                        description = {configurable: !0, enumerable: !0, value: void 0, writable: !0};

                                    else {
                                        // Update > Description
                                        description = LDKF.cloneObject(description);
                                        LDKF.isJSONLikeObject(description) || (description = {configurable: !0, enumerable: !0, value: description, writable: !0});

                                        // Modification > Description > (Configurable, Enumerable)
                                        ('configurable' in description) || (description.configurable = !1);
                                        ('enumerable' in description) || (description.enumerable = !1);

                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if ('value' in description) {
                                            // Deletion
                                            delete description.get;
                                            delete description.set;

                                            // Modification > Description > (Value, Writable)
                                            ('value' in description) || (description.value = void 0);
                                            ('writable' in description) || (description.writable = !1)
                                        }

                                        else if ('get' in description || 'set' in description) {
                                            // Modification > Description > (Get, Set)
                                            ('get' in description) || (description.get = void 0);
                                            ('set' in description) || (description.set = void 0);

                                            // Deletion
                                            delete description.value;
                                            delete description.writable
                                        }

                                        else {
                                            // Modification > Description > (Value, Writable)
                                            description.value = description;
                                            ('writable' in description) || (description.writable = !1)
                                        }
                                    }

                                    // Update > Names
                                    LDKF.isArray(names) || (names = [names]);

                                    // Initialization > (Error List, Iterator, Length)
                                    let errorList = [],
                                        iterator = 0,
                                        length = names.length;

                                    /* Loop
                                            Index Names.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Name
                                        let name = LDKF.isSymbol(names[iterator]) ? names[iterator] : LDKF.string(names[iterator]);

                                        // Error Handling
                                        try {
                                            // Modification > Object > [Name]
                                            LDKF.objectDefineProperty(object, name, description)
                                        } catch (error) {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (error.constructor === LDKO.typeError)
                                                // Update > Error List
                                                LDKF.pushArray(errorList, "Can not define property '" + LDKF.string(name) + "':\n\t" + error.message + '\r');

                                            else
                                                // Error
                                                throw error
                                        }
                                    }

                                    /* Logic
                                            [if statement]
                                    */
                                    if (length = errorList.length)
                                        /* Loop
                                                Index Error List.
                                        */
                                        for (iterator = 0; iterator != length; iterator += 1) {
                                            // Initialization > (Error Message, Timeout)
                                            let errorMessage = errorList[iterator],
                                                timeout;

                                            // Update > Timeout
                                            timeout = LDKF.setTimeout(function() {
                                                // Clear Timeout > Timeout
                                                LDKF.clearTimeout(timeout);

                                                // Error
                                                LDKF.error(errorMessage)
                                            })
                                        }

                                    // Logic > Return
                                    if ('value' in description)
                                        return description.value;

                                    // Return
                                    return description
                                }

                                else
                                    // Error
                                    LDKF.error(["'defineProperty'"], 'argument')
                            },

                            // Writable
                            writable: !0
                        });

                        // Depth
                        LDKF.objectDefineProperty(currentPrototype, 'depth', tmpObject.objectPrototypeDepthDescription = {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Get
                            get: function _depth() {
                                // Initialization > (Depth, Object)
                                let depth = 0,
                                    object = this;

                                /* Logic
                                        [if statement]
                                */
                                if (LDKF.isConstructible(object)) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (typeof object == 'object')
                                        /* Logic
                                                [switch:case statement]

                                            > Update > Object
                                        */
                                        switch (object.constructor) {
                                            // Boolean
                                            case LDKO.boolean: object = LDKF.valueOfBoolean(object); break;

                                            // Function
                                            case LDKO.func: object = LDKF.valueOfFunction(object); break;

                                            // Number
                                            case LDKO.number: object = LDKF.valueOfNumber(object); break;

                                            // Regular Expression
                                            case LDKO.regex: object = LDKF.valueOfRegex(object); break;

                                            // String
                                            case LDKO.string: object = LDKF.valueOfString(object); break;

                                            // Symbol
                                            case LDKO.symbol: object = LDKF.valueOfSymbol(object)
                                        }

                                    // Return
                                    return LDKF.getObjectDepth(object)
                                }

                                // Return
                                return depth
                            },

                            // Set
                            set: function setDepth() { return LDKF.objectDefineProperty(this, 'depth', {configurable: !0, enumerable: !0, value: arguments[0], writable: !0}) }
                        });

                        // Describe
                        LDKF.objectDefineProperty(currentPrototype, 'desc', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function describe() {
                                // Return
                                return arguments.length ? LDKF.objectGetOwnPropertyDescriptor(this, arguments[0]) : null
                            },

                            // Writable
                            writable: !0
                        });

                        // Freeze
                        LDKF.objectDefineProperty(currentPrototype, 'freeze', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function freeze() {
                                // Initialization > (Object, Length)
                                let object = this,
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Initialization > Iterator
                                    let iterator = 0;

                                    // Function
                                        // Base Value
                                        function baseValue(object) {
                                            /* Logic
                                                    [if:else if:else statement]
                                            */
                                            if (LDKF.isArray(object))
                                                // Update > Object
                                                object = [];

                                            else if (LDKF.isBoolean(object))
                                                // Update > Object
                                                object = !1;

                                            else if (LDKF.isFunction(object))
                                                // Update > Object
                                                object = (function() {});

                                            else if (LDKF.isHtmlCollection(object)) {
                                                // Initialization > (Query, Selection)
                                                let query = 'a',
                                                    selection = LDKF.getElementsByTagNameDocument(query);

                                                // Loop > Update > Selection
                                                while (selection.length)
                                                    selection = LDKF.getElementsByTagNameDocument(query += 'a');

                                                // Update > Object
                                                object = selection
                                            }

                                            else if (LDKF.isNodeList(object)) {
                                                // Initialization > (Query, Selection)
                                                let query = 'a',
                                                    selection = LDKF.querySelectorAllDocument(query);

                                                // Loop > Update > Selection
                                                while (selection.length)
                                                    selection = LDKF.querySelectorAllDocument(query += 'a');

                                                // Update > Object
                                                object = selection
                                            }

                                            else if (LDKF.isNumber(object))
                                                // Update > Object
                                                object = 0;

                                            else if (LDKF.isRegex(object))
                                                // Update > Object
                                                object = /(?:)/;

                                            else if (LDKF.isString(object))
                                                // Update > Object
                                                object = '';

                                            else if (LDKF.isSymbol(object))
                                                // Update > Object
                                                object = LDKF.symbol();

                                            else
                                                // Update > Object
                                                object = {};

                                            // Return
                                            return object
                                        }

                                        // Get Prototypes
                                        function getProtos(object) {
                                            // Initialization > Proto(s)
                                            let proto = object.__proto__,
                                                protos = [];

                                            // Loop > Update > Protos
                                            while (object.__proto__)
                                                LDKF.pushArray(protos, object = object.__proto__);

                                            // Return
                                            return protos
                                        }

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > (Property, Storage)
                                        let property = arguments[iterator],
                                            storage = {
                                                // Description
                                                description: (function() {
                                                    // Initialization > (Description, Prototypes, Iterator, Length)
                                                    let description = LDKF.objectGetOwnPropertyDescriptor(object, property),
                                                        protos = getProtos(object),
                                                        iterator = 0,
                                                        length = protos.length;

                                                    // Loop > Update > (Description, Iterator)
                                                    while (!description && iterator != length && protos[iterator]) {
                                                        description = LDKF.objectGetOwnPropertyDescriptor(protos[iterator], property);
                                                        iterator += 1
                                                    }

                                                    // Return
                                                    return description
                                                })(),

                                                // Object
                                                object: object,

                                                // Property
                                                property: property
                                            };

                                        // Update > Property
                                        property = LDKF.isSymbol(property) ? property : LDKF.string(property);

                                        // Initialization > Description
                                        let description = storage.description;

                                        /* Logic
                                                [if statement]
                                        */
                                        if (description) {
                                            // Update > (Temporary Object > Freezer)
                                            LDKF.pushArray(tmpObject.freezer, storage);

                                            // Modification > Object > [Property]
                                            LDKF.objectDefineProperty(object, property, 'value' in description ? {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Value
                                                value: baseValue(description.value),

                                                // Writable
                                                writable: !1
                                            } : {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function get() {},

                                                // Set
                                                set: function set() {}
                                            })
                                        }
                                    }
                                }
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Nested Property
                        LDKF.objectDefineProperty(currentPrototype, 'getNestedProp', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function getNestedProp() {
                                // Initialization > (Object, Property)
                                let object = this,
                                    property = arguments[0];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length)
                                    // Return
                                    return LDKF.matchObjectProperty(object, property);

                                else
                                    // Error
                                    LDKF.error(["'getNestedProp'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // Keys
                        LDKF.objectDefineProperty(currentPrototype, 'keys', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Get
                            get: function keys() {
                                // Initialization > (Object, Iterator, Length, Key(s))
                                let object = this,
                                    iterator = 0,
                                    length = 0,
                                    key,
                                    keys = [];

                                // Error Handling
                                try {
                                    /* Loop
                                            Index Object.

                                        > Update > Keys
                                    */
                                    for (key in object)
                                        LDKF.pushArray(keys, key)
                                } catch (error) {}

                                // Update > Length
                                length = (key = LDKF.objectKeys(object)).length;

                                /* Loop
                                        [for statement]
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Key
                                    let $key = key[iterator];

                                    // Update > Keys
                                    LDKF.includesArray(keys, $key) || LDKF.pushArray(keys, $key)
                                }

                                // Update > (Iterator, Length)
                                iterator = 0;
                                length = (key = LDKF.objectKeys(LDKF.objectGetOwnPropertyDescriptors(object))).length;

                                /* Loop
                                        [for statement]
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Key
                                    let $key = key[iterator];

                                    // Update > Keys
                                    LDKF.includesArray(keys, $key) || LDKF.pushArray(keys, $key)
                                }

                                // Return
                                return keys
                            }
                        });

                        // Length
                        LDKF.objectDefineProperty(currentPrototype, 'length', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Get
                            get: LDK.tmp.objects.objectPrototypeLengthDescriptionGetter = function length() {
                                // Initialization > Object
                                let object = this;

                                /* Logic
                                        [if:else statement]
                                */
                                if (LDKF.isConstructible(object)) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (typeof object == 'object')
                                        /* Logic
                                                [switch:case statement]

                                            > Update > Object
                                        */
                                        switch (object.constructor) {
                                            // Boolean
                                            case LDKO.boolean: object = LDKF.valueOfBoolean(object); break;

                                            // Function
                                            case LDKO.func: object = LDKF.valueOfFunction(object); break;

                                            // Number
                                            case LDKO.number: object = LDKF.valueOfNumber(object); break;

                                            // Regular Expression
                                            case LDKO.regex: object = LDKF.valueOfRegex(object); break;

                                            // String
                                            case LDKO.string: object = LDKF.valueOfString(object); break;

                                            // Symbol
                                            case LDKO.symbol: object = LDKF.valueOfSymbol(object)
                                        }

                                    /* Logic
                                            [if:else if:else statement]
                                    */
                                    if (LDKF.isArray(object))
                                        // Return
                                        return LDKF.pushArray(object);

                                    else if (LDKF.isBoolean(object))
                                        // Return
                                        return +object;

                                    else if (LDKF.isFunction(object))
                                        // Return
                                        return LDKF.pushArray(LDKF.get.functionParameters(object));

                                    else if (LDKF.isNode(object) || LDKF.isWindow(object))
                                        // Return
                                        return 1;

                                    else if (LDKF.isNumber(object))
                                        // Return
                                        return object - 0;

                                    else if (LDKF.isRegex(object))
                                        // Return
                                        return LDKF.pushArray(LDKF.arrayFrom(LDKF.get.regexSource(object)));

                                    else if (LDKF.isString(object))
                                        // Return
                                        return LDKF.pushArray(LDKF.arrayFrom(object));

                                    else {
                                        // Initialization > Descriptor
                                        let descriptor = LDKF.objectGetOwnPropertyDescriptor(object, 'length');

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (descriptor)
                                            // Return
                                            return 'get' in descriptor ? descriptor.get.call(object) : descriptor.value;

                                        else {
                                            // Initialization > (Descriptors, Keys, Length)
                                            let descriptors = LDKF.objectGetOwnPropertyDescriptors(object),
                                                keys = LDKF.objectKeys(object),
                                                length = 0;

                                            // LapysJS Development Kit Functions > Iterate Object
                                            LDKF.iterateObject(function(key) {
                                                // Update > Length
                                                (LDKF.indexOfArray(keys, key) == -1) && (length += 1)
                                            }, descriptors);

                                            // Update > Length
                                            length += LDKF.pushArray(LDKF.objectKeys(object));

                                            // Return
                                            return length
                                        }
                                    }
                                }

                                else
                                    // Return
                                    return 0
                            },

                            // Set
                            set: function length() { return LDKF.objectDefineProperty(this, 'length', {configurable: !0, enumerable: !0, value: arguments[0], writable: !0}) }
                        });

                        // Melt
                        LDKF.objectDefineProperty(currentPrototype, 'melt', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function melt() {
                                // Initialization > (Object, Length)
                                let object = this,
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Initialization > Iterator
                                    let iterator = 0;

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > (Property, Freezer (Iterator))
                                        let property = arguments[iterator],
                                            freezer = tmpObject.freezer,
                                            freezerIterator = freezer.length;

                                        // Update > Property
                                        property = LDKF.isSymbol(property) ? property : LDKF.string(property);

                                        /* Loop
                                                Index Freezer.
                                        */
                                        while (freezerIterator) {
                                            // Initialization > Storage
                                            let storage = freezer[freezerIterator -= 1];

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (storage.object === object && storage.property === property) {
                                                // Modification > Object > [Property]
                                                LDKF.objectDefineProperty(object, property, storage.description);

                                                // Update > Freezer
                                                freezer[freezerIterator] = void 0
                                            }
                                        }

                                        // Modification > Temporary Object > Freezer
                                        tmpObject.freezer = LDKF.filterArray(freezer, function(item) { return !LDKF.isUndefined(item) })
                                    }
                                }
                            },

                            // Writable
                            writable: !0
                        });

                        // Set Nested Property
                        LDKF.objectDefineProperty(currentPrototype, 'setNestedProp', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function setNestedProp() {
                                // Initialization > (Object, Property, Value)
                                let object = this,
                                    property = arguments[0],
                                    value = arguments[1];

                                /* Logic
                                        [if:else statement]
                                */
                                if (arguments.length) {
                                    // Initialization > Match
                                    let match = LDKF.matchObjectProperty(object, property);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (match)
                                        // Error Handling
                                        try {
                                            // Modification > (Match > Object) > [Match > Key]
                                            match.object[match.key] = value
                                        } catch (error) {
                                            // Warn
                                            LDKF.warn(error)
                                        }

                                    else
                                        try {
                                            // Modification > Object > [Property]
                                            object[LDKF.string(property)] = value
                                        } catch (error) {
                                            // Warn
                                            LDKF.warn(error)
                                        }
                                }

                                else
                                    // Error
                                    LDKF.error(["'setNestedProp'"], 'argument', [1, 0])
                            },

                            // Writable
                            writable: !0
                        });

                        // To String
                        LDKF.objectDefineProperty(currentPrototype, 'toString', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'toString').value,

                            // Writable
                            writable: !1
                        });

                        // Undefine Property
                        LDKF.objectDefineProperty(currentPrototype, 'undef', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function undefineProperty() {
                                // Initialization > (Object, Length)
                                let object = this,
                                    length = arguments.length;

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Initialization > Iterator
                                    let iterator = 0;

                                    /* Loop
                                            Index Arguments.
                                    */
                                    for (iterator; iterator != length; iterator += 1) {
                                        // Initialization > Property
                                        let property = arguments[iterator];

                                        // Error Handling
                                        try {
                                            // Deletion
                                            delete object[property];

                                            // Warn
                                            (property in object) && LDKF.warn("Could not remove property '" + LDKF.string(property) + "' from object")
                                        } catch (error) {}
                                    }

                                    // Return
                                    return !0
                                }

                                // Return
                                return !1
                            },

                            // Writable
                            writable: !0
                        });

                        // Value Of
                        LDKF.objectDefineProperty(currentPrototype, 'valueOf', {
                            // Configurable
                            configurable: !1,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: LDKF.objectGetOwnPropertyDescriptor(currentPrototype, 'valueOf').value,

                            // Writable
                            writable: !1
                        });

                        // Values
                        LDKF.objectDefineProperty(currentPrototype, 'values', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Get
                            get: function values() {
                                // Initialization > (Object, Iterator, Length, Value(s))
                                let object = this,
                                    iterator = 0,
                                    length = 0,
                                    value,
                                    values = [];

                                // Error Handling
                                try {
                                    /* Loop
                                            Index Object.

                                        > Update > Keys
                                    */
                                    for (value of object)
                                        LDKF.pushArray(values, value)
                                } catch (error) {}

                                // Update > Length
                                length = (value = LDKF.objectValues(object)).length;

                                /* Loop
                                        [for statement]
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Value
                                    let $value = value[iterator];

                                    // Update > Values
                                    LDKF.includesArray(values, $value) || LDKF.pushArray(values, $value)
                                }

                                // Update > (Iterator, Length)
                                iterator = 0;
                                length = (value = LDKF.objectValues(LDKF.objectGetOwnPropertyDescriptors(object))).length;

                                /* Loop
                                        [for statement]
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Value
                                    let $value = value[iterator];

                                    // Error Handling
                                    try {
                                        // Update > Value
                                        $value = 'value' in $value ? $value.value : $value.get.call(object)
                                    } catch (error) {}

                                    // Update > Values
                                    LDKF.includesArray(values, $value) || LDKF.pushArray(values, $value)
                                }

                                // Return
                                return values
                            }
                        });

                        // Watch
                        LDKF.objectDefineProperty(currentPrototype, 'watch', {
                            // Configurable
                            configurable: !0,

                            // Enumerable
                            enumerable: !1,

                            // Value
                            value: function watch() {
                                // Initialization > (Object, Callback, Property)
                                let object = this,
                                    callback = arguments[1],
                                    property = arguments[0];

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Initialization > (Former Description, Property-In-Object, Request)
                                    let formerDescription = getPropertyDescription(object, property),
                                        propertyInObject = !1,
                                        request;

                                    // Function
                                        // Get Property Description
                                        function getPropertyDescription(object, property) {
                                            // Initialization > (Description, Prototypes, Iterator, Length)
                                            let description = LDKF.objectGetOwnPropertyDescriptor(object, property),
                                                protos = getProtos(object),
                                                iterator = 0,
                                                length = protos.length;

                                            // Loop > Update > (Description, Iterator)
                                            while (!description && iterator != length && protos[iterator]) {
                                                description = LDKF.objectGetOwnPropertyDescriptor(protos[iterator], property);
                                                iterator += 1
                                            }

                                            // Return
                                            return description
                                        }

                                        // Get Prototypes
                                        function getProtos(object) {
                                            // Initialization > Proto(s)
                                            let proto = object.__proto__,
                                                protos = [];

                                            // Loop > Update > Protos
                                            while (object.__proto__)
                                                LDKF.pushArray(protos, object = object.__proto__);

                                            // Return
                                            return protos
                                        }

                                    // Update > Callback
                                    LDKF.isEvaluationString(callback) && (callback = LDKF.$func(callback));

                                    // Error
                                    LDKF.isFunction(callback) || LDKF.error(["'watch'", "'Object'"], 'argument', 'Invalid argument set');

                                    // Error Handling > Update > Property-In-Object
                                    try { propertyInObject = property in object }
                                    catch (error) {}

                                    // (Function > Watch) | Warn
                                    formerDescription && propertyInObject ? (function watch() {
                                        // Error Handling
                                        try {
                                            // Initialization > Description
                                            let description = getPropertyDescription(object, property);

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (description && property in object) {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (
                                                    formerDescription.configurable !== description.configurable ||
                                                    formerDescription.enumerable !== description.enumerable ||
                                                    formerDescription.get !== description.get ||
                                                    formerDescription.set !== description.set ||
                                                    formerDescription.value !== description.value ||
                                                    formerDescription.writable !== description.writable
                                                ) {
                                                    // Callback
                                                    callback.call(object, formerDescription, description);

                                                    // Update > Former Description
                                                    formerDescription = description
                                                }

                                                // Update > Request
                                                request = LDKF.requestAnimationFrame(watch)
                                            }

                                            else {
                                                // Callback
                                                description || callback.call(object, formerDescription, null);

                                                // Cancel Animation Frame > Request
                                                LDKF.cancelAnimationFrame(request)
                                            }
                                        } catch (error) {}
                                    })() : LDKF.warn("Could not watch property '" + property + "' in object")
                                }
                            },

                            // Writable
                            writable: !0
                        });

                    /* String Data */
                        // Camel
                        LDKF.objectDefineProperty(currentPrototype = LDKO.stringProto, 'camel', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function camel() {
                                // Initialization > String
                                let string = this;

                                // Return
                                return LDKF.toLowerCaseString(string[0] || '') + LDKF.sliceString(LDKF.replaceString(string, /\b\w/g, function(data) { return LDKF.toUpperCaseString(data) }), 1)
                            }
                        });

                        // Capital
                        LDKF.objectDefineProperty(currentPrototype, 'capital', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function capital() {
                                // Return
                                return LDKF.replaceString(this, /\b\w/g, function(data) { return LDKF.toUpperCaseString(data) })
                            }
                        });

                        // Count
                        LDKF.objectDefineProperty(currentPrototype, 'count', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function count() {
                                // Initialization > String
                                let string = this;

                                /* Logic
                                        [if statement]
                                */
                                if (arguments.length) {
                                    // Initialization > (Iterator, Match, Regular Expression Wildcards)
                                    let iterator = 0,
                                        match = arguments[0],
                                        regexWildcards = LDKF.replaceString(string, /[\s\w]/g, '');

                                    // Update > Match
                                    LDKF.isRegex(match) && (match = LDKF.regex(LDKF.get.regexSource(match), LDKF.replaceString(LDKF.get.regexFlags(match), 'g', '') + 'g'));
                                    LDKF.isSymbol(match) && (match = LDKF.string(match));
                                    LDKF.isString(match) && (match = LDKF.regex((function() {
                                        // Initialization > Regular Expression Characters
                                        let regexChars = LDKF.getRegexChars(match);

                                        // Return
                                        return LDKF.replaceString(match, LDKF.regex('[' + LDKF.replaceString(regexChars + regexWildcards, /./g, '\\$&') + ']', 'g'), '\\$&')
                                    })(), 'g'));

                                    // LapysJS Development Kit Functions > Replace String
                                    LDKF.replaceString(string, match, function(data) {
                                        // Update > Iterator
                                        iterator += 1;

                                        // Return
                                        return ''
                                    });

                                    // Return
                                    return iterator
                                }

                                // Return
                                return LDKO.numberNaN
                            },

                            // Writable
                            writable: !0
                        });

                        // Get After Character
                        LDKF.objectDefineProperty(currentPrototype, 'getAfterChar', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getAfterChar() {
                                // Initialization > (Iterator, Length, Match, Order, String (Length), Sub String)
                                let iterator = 0,
                                    length = arguments.length,
                                    match = arguments[0],
                                    order = arguments[1],
                                    string = LDKF.string(this),
                                    stringLength = string.length,
                                    substring = '';

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Update > Order
                                    order = order == 'first' ? !0 : order == 'last' ? !1 : !order;

                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (LDKF.isNumber(match)) {
                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (match in LDKF.object(string))
                                            // Update > Match
                                            match = order ? string[match] : string[stringLength - match - 1];

                                        else if (match > stringLength - 1)
                                            // Return
                                            return '';

                                        // Return
                                        return string
                                    }

                                    else if (LDKF.isRegex(match)) {
                                        // Update > Match
                                        match = LDKF.matchString(string, LDKF.regex(LDKF.get.regexSource(match), LDKF.replaceString(LDKF.get.regexFlags(match), 'g', '') + 'g'));

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (match)
                                            // Update > Match
                                            match = order ? match[0] : match[match.length - 1];

                                        else
                                            // Return
                                            return ''
                                    }

                                    else
                                        // Update > Match
                                        match = LDKF.string(match);

                                    // Logic > Return
                                    if (!LDKF.matchString(string, match))
                                        return substring;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (order) {
                                        // Initialization > Allow Stream
                                        let allowStream = !1;

                                        /* Loop
                                                Iterate through String.
                                        */
                                        for (iterator; iterator < stringLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = string[iterator];

                                            /* Logic
                                                    [if:else if statement]
                                            */
                                            if (allowStream)
                                                // Update > Sub String
                                                substring += character;

                                            else if (
                                                character == match ||
                                                (function() {
                                                    // Initialization > Match (Iterator, Length)
                                                    let matchIterator = 0,
                                                        matchLength = match.length;

                                                    /* Loop
                                                            Iterate through Match.

                                                        > Logic > Return
                                                    */
                                                    for (matchIterator; matchIterator < matchLength; matchIterator += 1)
                                                        if (string[iterator + matchIterator] != match[matchIterator])
                                                            return !1;

                                                    // Update > Iterator
                                                    iterator += matchLength - 1;

                                                    // Return
                                                    return !0
                                                })()
                                            )
                                                // Update > Allow Stream
                                                allowStream = !0
                                        }
                                    }

                                    else {
                                        // Initialization > (Decremented String Length)
                                        let matchIndex = -1,
                                            decrementedStringLength = stringLength - 1;

                                        /* Loop
                                                Iterate through String backwards.
                                        */
                                        for (iterator = decrementedStringLength; iterator > -1; iterator -= 1)
                                            /* Logic
                                                    If
                                                        a Match has been found.
                                            */
                                            if (
                                                string[iterator] == match ||
                                                (function() {
                                                    // Initialization > (Decremented Match Length, Match Iterator)
                                                    let decrementedMatchLength = match.length - 1,
                                                        matchIterator = 0;

                                                    /* Loop
                                                            Iterate through Match backwards.

                                                        > Logic > Return
                                                    */
                                                    for (matchIterator = decrementedMatchLength; matchIterator > -1; matchIterator -= 1)
                                                        if (string[iterator + matchIterator] != match[matchIterator])
                                                            return !1;

                                                    // Return
                                                    return !0
                                                })()
                                            ) {
                                                // Update > Match Index
                                                matchIndex = iterator + match.length;

                                                /* Loop
                                                        Iterate through String.
                                                */
                                                for (iterator = 0; iterator < stringLength; iterator += 1)
                                                    (matchIndex > iterator) || (substring += string[iterator]);

                                                // Break
                                                break
                                            }
                                    }

                                    return substring
                                }

                                // Return
                                return LDKF.string(string)
                            },

                            // Writable
                            writable: !0
                        });

                        // Get Before Character
                        LDKF.objectDefineProperty(currentPrototype, 'getBeforeChar', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function getBeforeChar() {
                                // Initialization > (Iterator, Length, Match, Order, String (Length), Sub String)
                                let iterator = 0,
                                    length = arguments.length,
                                    match = arguments[0],
                                    order = arguments[1],
                                    string = LDKF.string(this),
                                    stringLength = string.length,
                                    substring = '';

                                /* Logic
                                        [if statement]
                                */
                                if (length) {
                                    // Update > Order
                                    order = order == 'first' ? !0 : order == 'last' ? !1 : !order;

                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (LDKF.isNumber(match)) {
                                        /* Logic
                                                [if:else if:else statement]
                                        */
                                        if (match in LDKF.object(string))
                                            // Update > Match
                                            match = order ? string[match] : string[stringLength - match - 1];

                                        else if (match > stringLength - 1)
                                            // Return
                                            return '';

                                        // Return
                                        return string
                                    }

                                    else if (LDKF.isRegex(match)) {
                                        // Update > Match
                                        match = LDKF.matchString(string, LDKF.regex(LDKF.get.regexSource(match), LDKF.replaceString(LDKF.get.regexFlags(match), 'g', '') + 'g'));

                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (match)
                                            // Update > Match
                                            match = order ? match[0] : match[match.length - 1];

                                        else
                                            // Return
                                            return ''
                                    }

                                    else
                                        // Update > Match
                                        match = LDKF.string(match);

                                    // Logic > Return
                                    if (!LDKF.matchString(string, match))
                                        return string;

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (order) {
                                        // Initialization > Allow Stream
                                        let allowStream = !0;

                                        /* Loop
                                                Iterate through String.
                                        */
                                        for (iterator; iterator < stringLength; iterator += 1) {
                                            // Initialization > Character
                                            let character = string[iterator];

                                            /* Logic
                                                    [if statement]

                                                > Update > (Allow Stream, Sub String)
                                            */
                                            if (allowStream) {
                                                (
                                                    character == match ||
                                                    (function() {
                                                        // Initialization > Match (Iterator, Length)
                                                        let matchIterator = 0,
                                                            matchLength = match.length;

                                                        /* Loop
                                                                Iterate through Match.

                                                            > Logic > Return
                                                        */
                                                        for (matchIterator; matchIterator < matchLength; matchIterator += 1)
                                                            if (string[iterator + matchIterator] != match[matchIterator])
                                                                return !1;

                                                        // Update > Sub String
                                                        substring = LDKF.sliceString(substring, 0, iterator);

                                                        // Return
                                                        return !0
                                                    })()
                                                ) && (allowStream = !1);
                                                allowStream && (substring += character)
                                            }
                                        }
                                    }

                                    else {
                                        // Initialization > (Decremented String Length)
                                        let matchIndex = -1,
                                            decrementedStringLength = stringLength - 1;

                                        /* Loop
                                                Iterate through String backwards.
                                        */
                                        for (iterator = decrementedStringLength; iterator > -1; iterator -= 1) {
                                            /* Logic
                                                    If
                                                        a Match has been found.

                                                > Break
                                            */
                                            if (
                                                string[iterator] == match ||
                                                (function() {
                                                    // Initialization > (Decremented Match Length, Match Iterator)
                                                    let decrementedMatchLength = match.length - 1,
                                                        matchIterator = 0;

                                                    /* Loop
                                                            Iterate through Match backwards.

                                                        > Logic > Return
                                                    */
                                                    for (matchIterator = decrementedMatchLength; matchIterator > -1; matchIterator -= 1)
                                                        if (string[iterator + matchIterator] != match[matchIterator])
                                                            return !1;

                                                    // Return
                                                    return !0
                                                })()
                                            ) {
                                                // Update > Match Index
                                                matchIndex = iterator;

                                                /* Loop
                                                        Iterate through String.
                                                */
                                                for (iterator = 0; iterator < stringLength; iterator += 1)
                                                    (matchIndex > iterator) && (substring += string[iterator]);

                                                // Break
                                                break
                                            }
                                        }
                                    }

                                    return substring
                                }

                                // Return
                                return LDKF.string(string)
                            },

                            // Writable
                            writable: !0
                        });

                        // Has Character
                        LDKF.objectDefineProperty(currentPrototype, 'hasChar', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function hasChar() {
                                // Return
                                return arguments.length ? LDKF.includesString(this, arguments[0]) : !1
                            },

                            // Writable
                            writable: !0
                        });

                        // HTML
                        LDKF.objectDefineProperty(currentPrototype, 'html', tmpObject.stringPrototypeHTMLDescription = {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function html() {
                                // Initialization > (Allow Stream, (End, Start) Delimiter, Inner HTML (Available), Predicted Inner HTML, Selector, Selectors (Available), Stream-Lock Character, String, Iterator, Length, Tag Name)
                                let allowStream = !0,
                                    endDelimiter = {'[]': 0},
                                    startDelimiter = {'[]': 0},
                                    innerHTML = '',
                                    innerHTMLAvailable = !1,
                                    predictedInnerHTML = [],
                                    selector = '',
                                    selectors = '',
                                    selectorsAvailable = !1,
                                    streamLockCharacter = '',
                                    string = this,
                                    iterator = string.length,
                                    length = iterator,
                                    tagName = '';

                                /* Loop
                                        Iterate through String.
                                */
                                while (iterator) {
                                    // Initialization > Character
                                    let character = string[iterator -= 1];

                                    // Modification > (End, Start) Delimiter > (...)
                                    (character == ']') && (endDelimiter['[]'] += 1);
                                    (character == '[') && (startDelimiter['[]'] += 1);

                                    /* Logic
                                            [if:else if statement]

                                        > Update > (Allow Stream, Stream-Lock Character)
                                    */
                                    if (allowStream && character == ']') {
                                        allowStream = !1;
                                        streamLockCharacter = character
                                    }

                                    else if (
                                        !allowStream &&
                                        (character == '[' && streamLockCharacter == ']' && endDelimiter['[]'] == startDelimiter['[]'])
                                    ) {
                                        allowStream = !0;
                                        streamLockCharacter = ''
                                    }

                                    // Update > Inner HTML
                                    innerHTML += character;

                                    /* Logic
                                            [if statement]

                                        > Update > (Inner HTML Available, (Predicted) Inner HTML)
                                    */
                                    if (
                                        allowStream && character == ':' &&
                                        string[iterator - 1] != '\\'
                                    ) {
                                        innerHTMLAvailable || (innerHTMLAvailable = !0);
                                        LDKF.pushArray(predictedInnerHTML, innerHTML);
                                        innerHTML = ''
                                    }
                                }

                                // Function
                                (function() {
                                    // Initialization > Iterator
                                    let iterator = predictedInnerHTML.length;

                                    // Update > Inner HTML
                                    innerHTML && (innerHTML = '');

                                    // Function > Reverse
                                    function reverse() {
                                        // Initialization > (String, Iterator, Reverse)
                                        let string = arguments[0],
                                            iterator = string.length,
                                            reverse = '';

                                        // Loop > Update > Reverse
                                        while (iterator)
                                            reverse += string[iterator -= 1];

                                        // Return
                                        return reverse
                                    }

                                    /* Loop
                                            Index Predicted Inner HTML.
                                    */
                                    while (iterator) {
                                        // Initialization > Prediction
                                        let prediction = predictedInnerHTML[iterator -= 1];

                                        // Update > Inner HTML
                                        innerHTML += predictedInnerHTML[iterator] = reverse(prediction)
                                    }
                                })();

                                // Update > (Allow Stream, Stream-Lock Character)
                                allowStream = !0;
                                streamLockCharacter = '';

                                /* Loop
                                        Iterate through String.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Character
                                    let character = string[iterator];

                                    /* Logic
                                            [if:else if statement]
                                    */
                                    if (allowStream && character == '[') {
                                        // Update > (Selectors Available, Allow Stream, Stream-Lock Character)
                                        selectorsAvailable || (selectorsAvailable = !0);
                                        allowStream = !1;
                                        streamLockCharacter = character
                                    }

                                    else if (!allowStream && (character == ']' && streamLockCharacter == '[')) {
                                        // Update > (Allow Stream, Stream-Lock Character)
                                        allowStream = !0;
                                        streamLockCharacter = ''
                                    }

                                    // Update > Selectors Available
                                    (allowStream && (character == '.' || character == '#') && !selectorsAvailable) && (selectorsAvailable = !0);

                                    // Logic > Break
                                    if (allowStream && character == ':')
                                        break;

                                    // Update > Selectors
                                    selectors += character
                                }

                                /* Logic
                                        [if statement]
                                */
                                if (
                                    LDKF.includesString(string, ':') ||
                                    (LDKF.includesString(string, '.') || LDKF.includesString(string, '#') || LDKF.includesString(string, '['))
                                )
                                    /* Loop
                                            Iterate through String.
                                    */
                                    for (iterator = 0; iterator != length; iterator += 1) {
                                        // Initialization > Character
                                        let character = string[iterator];

                                        // Logic > Break
                                        if (character == ':' || character == '.' || character == '#' || character == '[')
                                            break;

                                        // Update > Tag Name
                                        tagName += character
                                    }

                                // Update > (Selector, Inner HTML, Tag Name)
                                selector = (tagName || (tagName = LDKF.string(string))) + (selectors = selectorsAvailable ? LDKF.replaceString(selectors, tagName, '') : '');
                                innerHTML = innerHTMLAvailable ? LDKF.replaceString(LDKF.replaceString(innerHTML, tagName, ''), ':', '') : '';
                                (tagName == '*') && (tagName = LDKC.randomElementTagNames[LDKF.numberParseInt(LDKF.mathRandom() * LDKC.randomElementTagNames.length)]);

                                // Error Handling
                                try { LDKF.querySelectorDocument(tagName) }
                                catch (error) {
                                    // Error
                                    (error.constructor === LDKO.domException) && LDKF.error(["'html'", "'String'"], 'argument', "Invalid tag name '" + tagName + "'");
                                    throw error
                                }

                                /* Logic
                                        [if statement]

                                    > Error Handling
                                */
                                if (selectorsAvailable)
                                    try { LDKF.querySelectorDocument(selector) }
                                    catch (error) {
                                        // Error
                                        (error.constructor === LDKO.domException) && LDKF.error(["'html'", "'String'"], 'argument', "Invalid selector value '" + selector + "'");
                                        throw error
                                    }

                                // Initialization > Element
                                let element = LDKF.createElementDocument(tagName);

                                // Modification > Element > (Inner HTML, Selector)
                                innerHTMLAvailable && LDKF.set.elementInnerHTML(element, innerHTML);
                                selectorsAvailable && LDKF.set.htmlElementSelector(element, selectors);

                                // Return
                                return arguments[0] ? {innerHTML: innerHTMLAvailable ? innerHTML : null, selector: selector} : element
                            },

                            // Set
                            set: function setHtml() {
                                // Initialization > (Inner HTML, String, Object, Element(s), Iterator)
                                let innerHTML = LDKF.string(arguments[0]),
                                    string = this,
                                    object = tmpObject.stringPrototypeHTMLDescription.get.call(string, !0),
                                    element = null,
                                    elements = LDKF.querySelectorAllDocument(object.selector),
                                    iterator = LDKF.get.nodeListLength(elements);

                                /* Logic
                                        [if statement]
                                */
                                if (iterator) {
                                    /* Logic
                                            [if statement]
                                    */
                                    if (!LDKF.isNull(object.innerHTML)) {
                                        // Initialization > Selection
                                        let selection = [];

                                        /* Loop
                                                Index Elements.
                                        */
                                        while (iterator) {
                                            // Initialization > Elements Item
                                            let elementsItem = elements[iterator -= 1];

                                            // Update > Selection
                                            (object.innerHTML === LDKF.get.elementInnerHTML(elementsItem)) && LDKF.pushArray(selection, elementsItem)
                                        }

                                        // Update > Iterator
                                        iterator = (elements = selection).length
                                    }

                                    /* Loop
                                            Index Elements.
                                    */
                                    while (iterator) {
                                        // Initialization > Elements item
                                        let elementsItem = elements[iterator -= 1];

                                        // Modification > Elements Item > Inner HTML
                                        LDKF.set.elementInnerHTML(elementsItem, innerHTML)
                                    }
                                }

                                // Return
                                return innerHTML
                            }
                        });

                        // Is Registered
                        LDKF.objectDefineProperty(currentPrototype, 'isRegistered', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function isRegistered() {
                                // Error Handling
                                try {
                                    // Initialization > (String, Element)
                                    let string = this,
                                        element = LDKF.createElementDocument(string);

                                    // Return
                                    return string ? (function() {
                                        // Initialization > (String, Index)
                                        let string = LDKF.sliceString(LDKF.string(element), 0, -']'.length),
                                            index = string.length - 1;

                                        // Return
                                        return string[index - 6] == 'E' && string[index - 5] == 'l' && string[index - 4] == 'e' && string[index - 3] == 'm' && string[index - 2] == 'e' && string[index - 1] == 'n' && string[index] == 't'
                                    })() && !LDKF.includesString(LDKF.toObjectString(element), 'HTMLUnknownElement') && (element.constructor !== LDKO.htmlElement) : !1
                                } catch (error) {}

                                // Return
                                return !1
                            }
                        });

                        // Lower
                        LDKF.objectDefineProperty(currentPrototype, 'lower', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function lower() {
                                // Return
                                return LDKF.toLowerCaseString(this)
                            }
                        });

                        // Remove Character
                        LDKF.objectDefineProperty(currentPrototype, 'removeChar', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function removeChar() {
                                // Initialization > (String, Iterator, Length)
                                let string = this,
                                    iterator = 0,
                                    length = arguments.length;

                                /* Loop
                                        Index Arguments.
                                */
                                for (iterator; iterator != length; iterator += 1) {
                                    // Initialization > Match
                                    let match = arguments[iterator];

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (LDKF.isSafeInteger(match) && match < string.length)
                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (match > -1 && !LDKF.objectIs(match, -0)) {
                                            // Update > (Match, String)
                                            match = LDKF.abs(match);
                                            string = LDKF.sliceString(string, 0, match) + LDKF.sliceString(string, match + 1)
                                        }

                                        else {
                                            // Initialization > (Stream, Iterator)
                                            let stream = '',
                                                iterator = string.length;

                                            // Update > Match
                                            LDKF.objectIs(match, -0) && (match = 0);
                                            match = LDKF.abs(match);

                                            // Loop > Update > Stream
                                            while (iterator)
                                                stream += string[iterator -= 1];

                                            // Update > (Stream, String, Iterator)
                                            stream = LDKF.sliceString(stream, 0, match) + LDKF.sliceString(stream, match + 1);
                                            string = '';
                                            iterator = stream.length;

                                            // Loop > Update > String
                                            while (iterator)
                                                string += stream[iterator -= 1]
                                        }

                                    else {
                                        // Update > (Match, String)
                                        LDKF.isRegex(match) || (match = LDKF.string(match));
                                        string = LDKF.replaceString(string, match, '')
                                    }
                                }

                                // Return
                                return LDKF.string(string)
                            },

                            // Writable
                            writable: !0
                        });

                        // Random Character
                        LDKF.objectDefineProperty(currentPrototype, 'randomChar', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function randomChar() {
                                // Return
                                return this[LDKF.numberParseInt(LDKF.mathRandom() * this.length)] || this[0] || ''
                            }
                        });

                        // Randomize
                        LDKF.objectDefineProperty(currentPrototype, 'randomize', {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function randomize() {
                                // Initialization > (String, Array, Iterator)
                                let string = LDKF.arrayFrom(this),
                                    array = [],
                                    iterator = string.length;

                                /* Loop
                                        Index String.
                                */
                                while (iterator) {
                                    // Initialization > Index
                                    let index = LDKF.numberParseInt(LDKF.mathRandom() * string.length);

                                    /* Logic
                                            [if:else statement]
                                    */
                                    if (string.length)
                                        // Loop > Update > Index
                                        while (!(index in string) || !string[index])
                                            index = LDKF.numberParseInt(LDKF.mathRandom() * string.length);

                                    else
                                        // Update > Index
                                        index = 0;

                                    // Update > (Array, String, Iterator)
                                    LDKF.pushArray(array, string[index] || '');
                                    LDKF.spliceArray(string, index, 1);
                                    iterator -= 1
                                }

                                // Return
                                return LDKF.joinArray(array, '')
                            },

                            // Writable
                            writable: !0
                        });

                        // Reverse
                        LDKF.objectDefineProperty(currentPrototype, 'reverse', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function reverse() {
                                // Initialization > (String, Stream, Iterator)
                                let string = this,
                                    stream = '',
                                    iterator = string.length;

                                // Loop > Update > Stream
                                while (iterator)
                                    stream += string[iterator -= 1];

                                // Return
                                return stream
                            }
                        });

                        // Swap Case
                        LDKF.objectDefineProperty(currentPrototype, 'swapCase', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function swapCase() {
                                // Return
                                return LDKF.replaceString(this, /[a-zA-Z]/g, function(data) {
                                    // Return
                                    return data == 'a' || data == 'b' || data == 'c' || data == 'd' || data == 'e' || data == 'f' || data == 'g' || data == 'h' || data == 'i' || data == 'j' || data == 'k' || data == 'l' || data == 'm' ||
                                        data == 'n' || data == 'o' || data == 'p' || data == 'q' || data == 'r' || data == 's' || data == 't' || data == 'u' || data == 'v' || data == 'w' || data == 'x' || data == 'y' || data == 'z' ? LDKF.toUpperCaseString(data) : LDKF.toLowerCaseString(data)
                                })
                            }
                        });

                        // Trim Character
                        LDKF.objectDefineProperty(currentPrototype, 'trimChar', tmpObject.stringPrototypeTrimCharDescription = {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function trimChar() {
                                // Initialization > (Arguments, String)
                                let args = LDKF.toArray(arguments),
                                    string = this;

                                // Return
                                return LDKF.$trimLeftCharString(LDKF.$trimRightCharString(string, args), args)
                            },

                            // Writable
                            writable: !0
                        });

                        // Trim Left Character
                        LDKF.objectDefineProperty(currentPrototype, 'trimLeftChar', tmpObject.stringPrototypeTrimLeftCharDescription = {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function trimLeftChar() {
                                // Initialization > (String, Match, Iterator, Selection)
                                let string = this,
                                    match = arguments[0],
                                    iterator = 0,
                                    selection;

                                // Update > Match
                                arguments.length || (match = / |\n/);
                                match = LDKF.isRegex(match) ?
                                    LDKF.regex(LDKF.get.regexSource(match), LDKF.replaceString(LDKF.get.regexFlags(match), 'g', '')) :
                                    LDKF.regex((function(match) {
                                        // Update >Match
                                        match = LDKF.string(match);

                                        // Initialization > Regular Expression Characters
                                        let regexChars = LDKF.getRegexChars(match);

                                        // Return
                                        return LDKF.replaceString(match, LDKF.regex('[' + LDKF.replaceString(regexChars, /./g, '\\$&') + ']', 'g'), '\\$&')
                                    })(match));

                                // Update > Selection
                                selection = LDKF.matchString(string, match);

                                // Loop > Update > Selection
                                while (
                                    string && selection &&
                                    'index' in selection &&
                                    selection.index === 0
                                )
                                    selection = LDKF.matchString(string = LDKF.sliceString(string, selection[0].length), match);

                                // Return
                                return LDKF.string(string)
                            },

                            // Writable
                            writable: !0
                        });

                        // Trim Right Character
                        LDKF.objectDefineProperty(currentPrototype, 'trimRightChar', tmpObject.stringPrototypeTrimRightCharDescription = {
                            // Configurable
                            configurable: !0,

                            // Value
                            value: function trimRightChar() {
                                // Initialization > (String, Match, Iterator, Selection)
                                let string = this,
                                    match = arguments[0],
                                    iterator = 0,
                                    selection;

                                // Update > Match
                                arguments.length || (match = / |\n/);
                                match = LDKF.isRegex(match) ?
                                    LDKF.regex(LDKF.get.regexSource(match), LDKF.replaceString(LDKF.get.regexFlags(match), 'g', '') + 'g') :
                                    LDKF.regex((function(match) {
                                        // Update >Match
                                        match = LDKF.string(match);

                                        // Initialization > Regular Expression Characters
                                        let regexChars = LDKF.getRegexChars(match);

                                        // Return
                                        return LDKF.replaceString(match, LDKF.regex('[' + LDKF.replaceString(regexChars, /./g, '\\$&') + ']', 'g'), '\\$&')
                                    })(match), 'g');

                                // Update > Selection
                                selection = LDKF.matchString(string, match);

                                // Loop > Update > Selection
                                while (
                                    string && selection &&
                                    LDKF.lastIndexOfString(string, selection[selection.length - 1]) + selection[selection.length - 1].length == string.length
                                )
                                    selection = LDKF.matchString(string = LDKF.sliceString(string, 0, -selection[selection.length - 1].length), match);

                                // Return
                                return LDKF.string(string)
                            },

                            // Writable
                            writable: !0
                        });

                        // Upper
                        LDKF.objectDefineProperty(currentPrototype, 'upper', {
                            // Configurable
                            configurable: !0,

                            // Get
                            get: function upper() {
                                // Return
                                return LDKF.toUpperCaseString(this)
                            }
                        })
                }

                // Update
                function update() {
                    /* Modification */
                        // (LapysJS > Temporary Data) > Processing Duration
                        LapysJS.tmp.processingDuration = LDKF.performanceNow() - LapysJS.tmp.processingDuration;

                    /* Function */
                        // Before DOM Ready
                        (function beforeDOMReady() {
                            /* Features */
                                // Focus Attribute
                                (function focusAttribute() {
                                    // Initialization > Listener
                                    let listener = function focusAttributeFeatureEventListener(event) {
                                        // Initialization > (Target, List, Length)
                                        let target = LDKF.queryEventTarget(event),
                                            list = LDKF.querySelectorAllDocument('[focusable=true'),
                                            length = LDKF.get.nodeListLength(list);

                                        /* Logic
                                                [if statement]
                                        */
                                        if (LDKF.isElement(target)) {
                                            // Initialization > Focused (List, Length)
                                            let focusedList = LDKF.getElementsByClassNameDocument('focused'),
                                                focusedLength = LDKF.get.htmlCollectionLength(focusedList);

                                            /* Loop
                                                    Index Focused List.
                                            */
                                            while (focusedLength) {
                                                // Initialization > Item
                                                let item = focusedList[focusedLength -= 1];

                                                // Loop > Modification > Item > Class
                                                while (LDKF.hasClassHtmlElement(item, 'focused'))
                                                    LDKF.delClassHtmlElement(item, 'focused')
                                            }

                                            // Modification > Target > Class
                                            length ?
                                                (LDKF.getAttributeElement(target, 'focusable') === 'true') && LDKF.addClassHtmlElement(target, 'focused') :
                                                LDKF.addClassHtmlElement(target, 'focused')
                                        }
                                    };

                                    // Function > Watch
                                    (function watch() {
                                        /* Logic
                                                [if:else if statement]
                                        */
                                        if (LDKF.includesArray(LDKE.active, 'focus-attribute') && !LapysJS.tmp.focusAttributeFeatureEventSet) {
                                            // Event > Window > Mouse Up
                                            LDKF.addEvent(window, 'mouseup', listener);

                                            // Modification > (LapysJS > Temporary Data) > Focus Attribute Feature Event Set
                                            LapysJS.tmp.focusAttributeFeatureEventSet = !0
                                        }

                                        else if (LapysJS.tmp.focusAttributeFeatureEventSet) {
                                            // Event > Window > Mouse Up
                                            LDKF.delEvent(window, 'mouseup', listener);

                                            // Modification > (LapysJS > Temporary Data) > Focus Attribute Feature Event Set
                                            LapysJS.tmp.focusAttributeFeatureEventSet = !1
                                        }

                                        // Request Animation Frame > Watch
                                        LDKF.requestAnimationFrame(watch)
                                    })()
                                })();

                                /* Script Attribute
                                        --- NOTE ---
                                            #Lapys: Asynchronously execute all scripted elements on the DOM.
                                */
                                LDKF.includesArray(LDKE.active, 'script-attribute') && LDKF.setTimeout(function scriptAttribute() {
                                    // Initialization > (Scripts, Iterator, Length, Request)
                                    let scripts = LDKF.querySelectorAllDocument('[script'),
                                        iterator = 0,
                                        length = LDKF.get.nodeListLength(scripts),
                                        request;

                                    // Function > Script
                                    (function script() {
                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (iterator == length)
                                            // Cancel Animation Frame > Request
                                            LDKF.cancelAnimationFrame(request);

                                        else {
                                            // Initialization > Element
                                            let element = scripts[iterator];

                                            // (...)
                                            tmpObject.elementPrototypeScriptDescription.get.call(element).call(element);

                                            // Update > (Iterator, Request)
                                            iterator += 1;
                                            request = LDKF.requestAnimationFrame(script)
                                        }
                                    })()
                                })
                        })();

                        // On DOM Ready
                        onDOMReady(function onDOMReady() {
                            /* Global Data */
                                /* (Primary, Secondary) Storage
                                        --- NOTE ---
                                            #Lapys: The Secondary Storage is the collation of
                                                all lists in the Primary Storage.
                                */
                                const primaryStorage = {
                                    // Accordion
                                    accordion: [],

                                    // Carousel
                                    carousel: [],

                                    // Draggable
                                    draggable: [],

                                    // Dropdown
                                    dropdown: [],

                                    // Dynamic Text
                                    dynamicText: [],

                                    // Dynamic Time
                                    dynamicTime: [],

                                    // Marquee
                                    marquee: [],

                                    // Table
                                    table: [],

                                    // Toast
                                    toast: [],

                                    // Tooltip
                                    tooltip: []
                                }, secondaryStorage = [];

                            /* Function */
                                // Asynchronous Index
                                function asyncIndex() {
                                    // Initialization > (Callback, Iterator, Length, Request, Response)
                                    let callback = arguments[0],
                                        iterator = -1,
                                        length = arguments[1],
                                        request,
                                        response = arguments[2];

                                    // Function > Index
                                    length && ((length -= 1) || !0) && (function index() {
                                        /* Logic
                                                [if:else statement]
                                        */
                                        if (iterator == length) {
                                            // Cancel Animation Frame > Request
                                            LDKF.cancelAnimationFrame(request);

                                            // Response
                                            response && response(iterator)
                                        }

                                        else {
                                            // Callback
                                            callback(iterator += 1);

                                            // Update > Request
                                            request = LDKF.requestAnimationFrame(index)
                                        }
                                    })()
                                };

                                // Get Elements
                                function getElements(array) {
                                    // Initialization > (List, Iterator, Length)
                                    let list = [],
                                        iterator = 0,
                                        length = array.length;

                                    /* Loop
                                            Index Array.

                                        > Update > List
                                    */
                                    for (iterator; iterator != length; iterator += 1)
                                        LDKF.pushArray(list, array[iterator].element);

                                    // Return
                                    return list
                                }

                                // Get Nodes
                                function getNodes(array) {
                                    // Initialization > (List, Iterator, Length)
                                    let list = [],
                                        iterator = 0,
                                        length = array.length;

                                    /* Loop
                                            Index Array.

                                        > Update > List
                                    */
                                    for (iterator; iterator != length; iterator += 1)
                                        LDKF.pushArray(list, array[iterator].node);

                                    // Return
                                    return list
                                }

                                // Get Sorted Attribute
                                function getSortedAttribute() {
                                    // Initialization > (Element, Attribute Name, Ignored Values)
                                    let element = arguments[0],
                                        attributeName = arguments[1],
                                        ignoredValues = arguments[2] || [];

                                    // Return
                                    return LDKF.filterArray(LDKF.sortList(LDKF.getAttributeElement(element, attributeName) || ''), function(item) { return !LDKF.includesArray(ignoredValues, item) })
                                }

                                // Get Types
                                function getTypes(array) {
                                    // Initialization > (List, Iterator, Length)
                                    let list = [],
                                        iterator = 0,
                                        length = array.length;

                                    /* Loop
                                            Index Array.

                                        > Update > List
                                    */
                                    for (iterator; iterator != length; iterator += 1)
                                        LDKF.pushArray(list, array[iterator].type);

                                    // Return
                                    return list
                                }

                                // Same Property Description
                                function samePropertyDescription(descriptionA, descriptionB) {
                                    // Logic > Return
                                    if (descriptionA && descriptionB)
                                        return descriptionA.configurable === descriptionB.configurable &&
                                            descriptionA.enumerable === descriptionB.enumerable &&
                                            descriptionA.get === descriptionB.get &&
                                            descriptionA.set === descriptionB.set &&
                                            descriptionA.value === descriptionB.value &&
                                            descriptionA.writable === descriptionB.writable
                                }

                                // Set Sorted Attribute
                                function setSortedAttribute() {
                                    // Initialization > (Element, Attribute Name, Value, Removable Values)
                                    let element = arguments[0],
                                        attributeName = arguments[1],
                                        value = arguments[2] || [],
                                        removableValues = arguments[3] || [];

                                    // Update > (Removable Values, Value)
                                    LDKF.isArray(removableValues) || (removableValues = [removableValues]);
                                    LDKF.isArray(value) || (value = [value]);

                                    /* Logic
                                            [if statement]
                                    */
                                    if (removableValues[0] || value[0]) {
                                        // Initialization > Attribute Value
                                        let attributeValue = LDKF.concatArray(value, LDKF.filterArray(LDKF.sortList(LDKF.getAttributeElement(element, attributeName) || ''), function(item) { return !LDKF.includesArray(removableValues, item) && !LDKF.includesArray(value, item) }));

                                        // Modification > Element > [Attribute Name]
                                        LDKF.setAttributeElement(element, attributeName, LDKF.joinArray(attributeValue, ' '));

                                        // Return
                                        return attributeValue
                                    }

                                    // Return
                                    return []
                                }

                            // Modification > Secondary Storage > Value Of
                            LDKF.objectDefineProperty(secondaryStorage, 'valueOf', {
                                // Value
                                value: function valueOf() {
                                    // Initialization > Array
                                    let array = [],
                                        storage = [];

                                    // LapysJS Development Kit Functions > Iterate Object
                                    LDKF.iterateObject(function(key, value) {
                                        // Initialization > Iterator
                                        let iterator = value.length;

                                        // Loop > Update > Array
                                        while (iterator)
                                            LDKF.pushArray(array, value[iterator -= 1])
                                    }, primaryStorage);

                                    let iterator = array.length;

                                    while (iterator) {
                                        let item = array[iterator -= 1],
                                            element = item.element,
                                            type = item.type;

                                        LDKF.includesArray(getElements(storage), element) ?
                                            storage[LDKF.indexOfArray(getElements(storage), element)].type = LDKF.concatArray(storage[LDKF.indexOfArray(getElements(storage), element)].type, type) :
                                            LDKF.pushArray(storage, {element: element, type: [type]})
                                    }

                                    iterator = storage.length;

                                    while (iterator) {
                                        let item = storage[iterator -= 1],
                                            type = item.type;
                                        while ((function() {
                                            // Initialization > Iterator
                                            let iterator = type.length;

                                            // Loop > Logic > Return
                                            while (iterator)
                                                if (LDKF.isArray(type[iterator -= 1]))
                                                    return !0
                                        })()) type = LDKF.$concatArray([], type);
                                        item.type = type
                                    }

                                    // Return
                                    return storage
                                }
                            });

                            /* Components
                                    --- WARN ---
                                        #Lapys: Merge components at your own risk.
                            */
                                /* Accordion
                                        --- UPDATE REQUIRED ---
                                            #Lapys: Content and headers outside their Accordions are not unset.
                                */
                                LDKF.includesArray(LDK.components, 'accordion') && (function accordion() {
                                    // Initialization > ((Sub Element) Properties, Watch)
                                    let properties = {
                                        // Closed Content
                                        closedContent: {
                                            // Configurable
                                            configurable: !1,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function closedContent() {
                                                // Initialization > (Accordion, Content, Iterator, Length, List)
                                                let accordion = this,
                                                    content = properties.content.get.call(accordion),
                                                    iterator = 0,
                                                    length = content.length,
                                                    list = [];

                                                /* Loop
                                                        Index Children.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > (Content, States)
                                                    let $content = content[iterator],
                                                        states = getSortedAttribute($content, 'state');

                                                    // Update > List
                                                    (LDKF.includesArray(states, 'closed') && !LDKF.includesArray(states, 'open')) && LDKF.pushArray(list, $content)
                                                }

                                                // Return
                                                return list
                                            }
                                        },

                                        // Content
                                        content: {
                                            // Configurable
                                            configurable: !1,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function content() {
                                                // Initialization > (Accordion, Children, Iterator, Length, List)
                                                let accordion = this,
                                                    children = LDKF.get.elementChildren(accordion),
                                                    iterator = 0,
                                                    length = LDKF.get.htmlCollectionLength(children),
                                                    list = [];

                                                /* Loop
                                                        Index Children.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > Child
                                                    let child = children[iterator];

                                                    // Update > List
                                                    LDKF.includesArray(getSortedAttribute(child, 'role'), 'content') && LDKF.pushArray(list, child)
                                                }

                                                // Return
                                                return list
                                            }
                                        },

                                        // Header
                                        header: {
                                            // Configurable
                                            configurable: !1,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function header() {
                                                // Initialization > (Accordion, Children, Iterator, Length, List)
                                                let accordion = this,
                                                    children = LDKF.get.elementChildren(accordion),
                                                    iterator = 0,
                                                    length = LDKF.get.htmlCollectionLength(children),
                                                    list = [];

                                                /* Loop
                                                        Index Children.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > Child
                                                    let child = children[iterator];

                                                    // Logic > Return
                                                    if (LDKF.includesArray(getSortedAttribute(child, 'role'), 'header'))
                                                        return child
                                                }

                                                // Return
                                                return null
                                            }
                                        },

                                        // Headers
                                        headers: {
                                            // Configurable
                                            configurable: !1,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function headers() {
                                                // Initialization > (Accordion, Children, Iterator, Length, List)
                                                let accordion = this,
                                                    children = LDKF.get.elementChildren(accordion),
                                                    iterator = 0,
                                                    length = LDKF.get.htmlCollectionLength(children),
                                                    list = [];

                                                /* Loop
                                                        Index Children.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > Child
                                                    let child = children[iterator];

                                                    // Update > List
                                                    LDKF.includesArray(getSortedAttribute(child, 'role'), 'header') && LDKF.pushArray(list, child)
                                                }

                                                // Return
                                                return list
                                            }
                                        },

                                        // Open Content
                                        openContent: {
                                            // Configurable
                                            configurable: !1,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function openContent() {
                                                // Initialization > (Accordion, Content, Iterator, Length, List)
                                                let accordion = this,
                                                    content = properties.content.get.call(accordion),
                                                    iterator = 0,
                                                    length = content.length,
                                                    list = [];

                                                /* Loop
                                                        Index Children.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > (Content, States)
                                                    let $content = content[iterator],
                                                        states = getSortedAttribute($content, 'state');

                                                    // Update > List
                                                    (!LDKF.includesArray(states, 'closed') && LDKF.includesArray(states, 'open')) && LDKF.pushArray(list, $content)
                                                }

                                                // Return
                                                return list
                                            }
                                        },

                                        // Swap Content
                                        swapContent: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function swapContent() {
                                                // Initialization > (Accordion, Content, Iterator)
                                                let accordion = this,
                                                    content = properties.content.get.call(accordion),
                                                    iterator = content.length;

                                                /* Loop
                                                        Index Content.
                                                */
                                                while (iterator) {
                                                    // Initialization > Content
                                                    let $content = content[iterator -= 1];

                                                    // Content > (Close | Open)
                                                    subElementProperties.content.state.get.call($content) ?
                                                        subElementProperties.content.close.value.call($content) :
                                                        subElementProperties.content.open.value.call($content)
                                                }
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Toggle Content
                                        toggleContent: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function toggleContent() {
                                                // Initialization > (Accordion, Content, Iterator, Index)
                                                let accordion = this,
                                                    content = properties.content.get.call(accordion),
                                                    iterator = content.length,
                                                    index = LDKF.indexOfArray(getElements(primaryStorage.accordion), accordion);

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (index != -1) {
                                                    // Initialization > Storage
                                                    let storage = primaryStorage.accordion[index];

                                                    // Modification > Storage > Miscellaneous > Value
                                                    'misc' in storage ? storage.misc.value = !storage.misc.value : storage.misc = {value: (function() {
                                                        // Initialization > Content
                                                        let content = properties.content.get.call(accordion);

                                                        // Return
                                                        return content.length ? subElementProperties.content.state.get.call(content[0]) : !1
                                                    })()};

                                                    // Initialization > Toggle Content Value
                                                    let toggleContentValue = storage.misc.value;

                                                    /* Loop
                                                            Index Content.
                                                    */
                                                    while (iterator) {
                                                        // Initialization > Content
                                                        let $content = content[iterator -= 1];

                                                        // (Close | Open) > Content
                                                        toggleContentValue ?
                                                            subElementProperties.content.close.value.call($content) :
                                                            subElementProperties.content.open.value.call($content)
                                                    }

                                                    // Return
                                                    return toggleContentValue
                                                }

                                                // Return
                                                return null
                                            },

                                            // Writable
                                            writable: !1
                                        }
                                    }, subElementProperties = {
                                        // Content
                                        content: {
                                            // Accordion
                                            accordion: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function accordion() {
                                                    // Initialization > (Element, Accordions, Parent)
                                                    let element = this,
                                                        accordions = getElements(primaryStorage.accordion),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(accordions, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            },

                                            // Close
                                            close: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Value
                                                value: function close() {
                                                    // Initialization > Content
                                                    let content = this;

                                                    // Modification > Element > State
                                                    setSortedAttribute(content, 'state', 'closed', 'open');

                                                    // Return
                                                    return !1
                                                },

                                                // Writable
                                                writable: !1
                                            },

                                            // Open
                                            open: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Value
                                                value: function open() {
                                                    // Initialization > Content
                                                    let content = this;

                                                    // Modification > Element > State
                                                    setSortedAttribute(content, 'state', 'open', 'closed');

                                                    // Return
                                                    return !0
                                                },

                                                // Writable
                                                writable: !1
                                            },

                                            // State
                                            state: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function getState() {
                                                    // Initialization > Content
                                                    let content = this;

                                                    // Return
                                                    return LDKF.includesArray(getSortedAttribute(content, 'state'), 'open')
                                                },

                                                // Set
                                                set: function setState() {
                                                    // Initialization > Element
                                                    let element = this;

                                                    // Return
                                                    return arguments[0] ?
                                                        subElementProperties.content.open.value.call(element) :
                                                        subElementProperties.content.close.value.call(element)
                                                }
                                            }
                                        },

                                        // Header
                                        header: {
                                            // Accordion
                                            accordion: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function accordion() {
                                                    // Initialization > (Element, Accordions, Parent)
                                                    let element = this,
                                                        accordions = getElements(primaryStorage.accordion),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(accordions, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        }
                                    }, watch = {
                                        // Mouse Up Event Listener
                                        mouseUpEventListener: function toggleParentAccordion() {
                                            // Initialization > Parent Accordion
                                            let header = this,
                                                parentAccordion = subElementProperties.header.accordion.get.call(header);

                                            // Parent Accordion > Toggle Content
                                            parentAccordion && properties.toggleContent.value.call(parentAccordion)
                                        }
                                    };

                                    // Correct Accordion
                                    function correctAccordion(accordion) {
                                        // Initialization > (Cooldown (Duration, Value), Timeout)
                                        let cooldownDuration = 100,
                                            cooldownValue = !0,
                                            timeout;

                                        /* Function > Correct
                                                --- NOTE ---
                                                    #Lapys:
                                                        - The function that does the actual correcting.
                                                        - Although we place this on a cooldown so as not to stress the DOM.
                                        */
                                        function correct() {
                                            // Initialization > (Headers, Iterator,)
                                            let headers = properties.headers.get.call(accordion),
                                                iterator = headers.length;

                                            // Loop > Deletion
                                            while (iterator > 1)
                                                LDKF.removeChildNode(accordion, headers[iterator -= 1]);

                                            // Initialization > Header
                                            let header = headers[0];

                                            // Insertion
                                            header && ((LDKF.get.$parentNodeFirstElementChild(accordion) === header) || LDKF.insertBeforeNode(accordion, header, LDKF.get.$parentNodeFirstElementChild(accordion)));

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.includesArray(getNodes(tmpObject.onHTMLChangeWatchList), accordion)) {
                                                /* Logic
                                                        [if statement]
                                                */
                                                if (LDKF.querySelectorElement(accordion, '[role*=content]:not([state=closed]):not([state=open])')) {
                                                    // Initialization > (Content, Iterator)
                                                    let content = properties.content.get.call(accordion),
                                                        iterator = content.length;

                                                    /* Loop
                                                            Index Content.
                                                    */
                                                    while (iterator) {
                                                        // Initialization > Content
                                                        let $content = content[iterator -= 1];

                                                        // Content > (Open | Close)
                                                        subElementProperties.content.state.get.call($content) ?
                                                            subElementProperties.content.open.value.call($content) :
                                                            subElementProperties.content.close.value.call($content)
                                                    }
                                                }
                                            }
                                        }

                                        // Correct
                                        correct();

                                        // Accordion > On HTML Change > Watch
                                        LDKF.includesArray(getElements(primaryStorage.accordion), accordion) && tmpObject.nodePrototypeOnHTMLChangeDescriptorValue.call(accordion, function correctAccordion() {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.includesArray(getElements(primaryStorage.accordion), accordion)) {
                                                /* Logic
                                                        [if statement]
                                                */
                                                if (cooldownValue) {
                                                    // Update > Allow Correction
                                                    cooldownValue = !1;

                                                    // Correct > Accordion
                                                    correct(accordion);

                                                    // Set Timeout
                                                    timeout = LDKF.setTimeout(function() {
                                                        // Update > Allow Correction
                                                        cooldownValue = !0;

                                                        // Clear Timeout > Timeout
                                                        LDKF.clearTimeout(timeout)
                                                    }, cooldownDuration)
                                                }
                                            }

                                            else
                                                // Accordion > Cancel On HTML Change
                                                tmpObject.nodePrototypeOnHTMLChangeDescriptorValue.call(accordion, correctAccordion)
                                        })
                                    }

                                    // Index Accordions
                                    function indexAccordions() {
                                        // Initialization > (Accordions, Length)
                                        let accordions = LDKF.getElementsByClassNameDocument('accordion'),
                                            length = LDKF.get.htmlCollectionLength(accordions);

                                        // Asynchronous Index > Set Accordions
                                        asyncIndex(function setAccordions(iterator) {
                                            // Set Accordion > Accordion
                                            setAccordion(accordions[iterator])
                                        }, length)
                                    }

                                    // Set Accordion
                                    function setAccordion(accordion) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (!LDKF.includesArray(getElements(primaryStorage.accordion), accordion)) {
                                            // Update > Primary Storage > Accordion
                                            LDKF.pushArray(primaryStorage.accordion, {element: accordion, type: ['accordion']});

                                            // Deletion
                                            delete accordion.closedContent;
                                            delete accordion.content;
                                            delete accordion.header;
                                            delete accordion.openContent;
                                            delete accordion.swapContent;
                                            delete accordion.toggleContent;

                                            // Modification > Accordion > ((Closed, Open, Swap, Toggle) Content, Header)
                                            LDKF.objectDefineProperty(accordion, 'closedContent', properties.closedContent);
                                            LDKF.objectDefineProperty(accordion, 'content', properties.content);
                                            LDKF.objectDefineProperty(accordion, 'header', properties.header);
                                            LDKF.objectDefineProperty(accordion, 'openContent', properties.openContent);
                                            LDKF.objectDefineProperty(accordion, 'swapContent', properties.swapContent);
                                            LDKF.objectDefineProperty(accordion, 'toggleContent', properties.toggleContent);

                                            // Initialization > (Content, Header)
                                            let content = properties.content.get.call(accordion),
                                                header = properties.header.get.call(accordion);

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.isArray(content)) {
                                                // Initialization > (Iterator, Length)
                                                let iterator = 0,
                                                    length = content.length;

                                                /* Loop
                                                        Index Content.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > Content
                                                    let $content = content[iterator];

                                                    // Deletion
                                                    delete $content.accordion;
                                                    delete $content.close;
                                                    delete $content.open;
                                                    delete $content.state;

                                                    // Modification > Content > (Accordion, Close, Open, State)
                                                    LDKF.objectDefineProperty($content, 'accordion', subElementProperties.content.accordion);
                                                    LDKF.objectDefineProperty($content, 'close', subElementProperties.content.close);
                                                    LDKF.objectDefineProperty($content, 'open', subElementProperties.content.open);
                                                    LDKF.objectDefineProperty($content, 'state', subElementProperties.content.state);
                                                    subElementProperties.content.state.set.call($content, subElementProperties.content.state.get.call($content))
                                                }
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (header) {
                                                // Deletion
                                                delete header.accordion;

                                                // Modification > Header > Accordion
                                                LDKF.objectDefineProperty(header, 'accordion', subElementProperties.header.accordion);

                                                // Event > Header > Mouse Up
                                                LDKF.addEvent(header, 'mouseup', watch.mouseUpEventListener)
                                            }

                                            // Correct Accordion > Accordion
                                            correctAccordion(accordion);

                                            // Watch Accordion
                                            (function watchAccordion() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (LDKF.hasClassHtmlElement(accordion, 'accordion'))
                                                    // Update > Request
                                                    request = LDKF.requestAnimationFrame(watchAccordion);

                                                else {
                                                    // Unset Accordion > Accordion
                                                    unsetAccordion(accordion);

                                                    // Cancel Animation Frame > Request
                                                    LDKF.cancelAnimationFrame(request)
                                                }
                                            })()
                                        }
                                    }

                                    // Unset Accordion
                                    function unsetAccordion(accordion) {
                                        // Initialization > (Content, Header, Index, Iterator)
                                        let content = properties.content.get.call(accordion),
                                            header = properties.header.get.call(accordion),
                                            index = LDKF.indexOfArray(getElements(primaryStorage.accordion), accordion),
                                            iterator = content.length;

                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(accordion, 'closedContent'), properties.closedContent) && delete accordion.closedContent;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(accordion, 'content'), properties.content) && delete accordion.content;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(accordion, 'header'), properties.header) && delete accordion.header;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(accordion, 'openContent'), properties.openContent) && delete accordion.openContent;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(accordion, 'swapContent'), properties.swapContent) && delete accordion.swapContent;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(accordion, 'toggleContent'), properties.toggleContent) && delete accordion.toggleContent;

                                        /* Loop
                                                Index Content.

                                            > Unset Accordion Content > Content
                                        */
                                        while (iterator)
                                            unsetAccordionContent(content[iterator -= 1]);

                                        // Unset Accordion Header > Header
                                        unsetAccordionHeader(header);

                                        // Update > (Primary Storage > Accordion)
                                        (index == -1) || LDKF.spliceArray(primaryStorage.accordion, index, 1)
                                    }

                                    // Unset Accordion Content
                                    function unsetAccordionContent(content) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(content, 'accordion'), subElementProperties.content.accordion) && delete content.accordion;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(content, 'close'), subElementProperties.content.close) && delete content.close;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(content, 'open'), subElementProperties.content.open) && delete content.open;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(content, 'state'), subElementProperties.content.state) && delete content.state
                                    }

                                    // Unset Accordion Header
                                    function unsetAccordionHeader(header) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(header, 'accordion'), subElementProperties.header.accordion) && delete header.accordion;

                                        // Event > Header > Mouse Up
                                        LDKF.delEvent(header, 'mouseup', watch.mouseUpEventListener)
                                    }

                                    // Index Accordions
                                    indexAccordions();

                                    // On DOM Element Added > Index Accordion
                                    tmpObject.windowOnDOMElementAddedDescriptionValue(function indexAccordion() {
                                        // Initialization > (Cooldown (Duration, Value), Timeout)
                                        let cooldownDuration = 250,
                                            cooldownValue = !0,
                                            timeout;

                                        /* Logic
                                                [if statement]
                                        */
                                        if (cooldownValue) {
                                            // Update > Cooldown Value
                                            cooldownValue = !1;

                                            // Index Accordions
                                            indexAccordions();

                                            // Update > Timeout
                                            timeout = LDKF.setTimeout(function() {
                                                // Update > Cooldown Value
                                                cooldownValue = !0;

                                                // Clear Timeout
                                                LDKF.clearTimeout(timeout)
                                            }, cooldownDuration)
                                        }
                                    })
                                })();

                                // Carousel
                                LDKF.includesArray(LDK.components, 'carousel') && (function carousel() {
                                    // Initialization > ((Sub Element) Properties, Watch)
                                    let properties = {
                                        // Active Slide
                                        activeSlide: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function activeSlide() {
                                                // Initialization > (Carousel, Slides, Iterator, Length)
                                                let carousel = this,
                                                    slides = properties.slides.get.call(carousel),
                                                    iterator = 0,
                                                    length = slides.length;

                                                /* Loop
                                                        Index Slides.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > (Slide, States)
                                                    let slide = slides[iterator],
                                                        states = getSortedAttribute(slide, 'state');

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (LDKF.includesArray(states, 'active') && !LDKF.includesArray(states, 'passive')) {
                                                        // Initialization > Slides Iterator
                                                        let slidesIterator = slides.length;

                                                        /* Loop
                                                                Index Slides.
                                                        */
                                                        while (slidesIterator) {
                                                            // Initialization > Slide
                                                            let slide = slides[slidesIterator -= 1];

                                                            // Modification > Slide > State
                                                            setSortedAttribute(slide, 'state', 'passive', 'active')
                                                        }

                                                        // Modification > Slide > State
                                                        setSortedAttribute(slide, 'state', 'active', 'passive');

                                                        // Return
                                                        return slide
                                                    }
                                                }

                                                // Return
                                                return null
                                            }
                                        },

                                        // Active Slide Index
                                        activeSlideIndex: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function activeSlideIndex() {
                                                // Initialization > (Carousel, Slides, Iterator, Length)
                                                let carousel = this,
                                                    slides = properties.slides.get.call(carousel),
                                                    iterator = 0,
                                                    length = slides.length;

                                                /* Loop
                                                        Index Slides.
                                                */
                                                for (iterator; iterator != length; iterator += 1) {
                                                    // Initialization > (Slide, States)
                                                    let slide = slides[iterator],
                                                        states = getSortedAttribute(slide, 'state');

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (LDKF.includesArray(states, 'active') && !LDKF.includesArray(states, 'passive')) {
                                                        // Initialization > Slides Iterator
                                                        let slidesIterator = slides.length;

                                                        /* Loop
                                                                Index Slides.
                                                        */
                                                        while (slidesIterator) {
                                                            // Initialization > Slide
                                                            let slide = slides[slidesIterator -= 1];

                                                            // Modification > Slide > State
                                                            setSortedAttribute(slide, 'state', 'passive', 'active')
                                                        }

                                                        // Modification > Slide > State
                                                        setSortedAttribute(slide, 'state', 'active', 'passive');

                                                        // Return
                                                        return iterator
                                                    }
                                                }

                                                // Return
                                                return -1
                                            }
                                        },

                                        /* Buttons
                                                --- NOTE ---
                                                    #Lapys: The first item is the left button,
                                                        the last item is the right button.
                                        */
                                        buttons: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function buttons() {
                                                // Initialization > (Carousel, Button Container, List)
                                                let carousel = this,
                                                    buttonContainer = properties.containers.get.call(carousel).button,
                                                    list = [];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (buttonContainer) {
                                                    // Initialization > (Children, Iterator, Length)
                                                    let children = LDKF.get.elementChildren(buttonContainer),
                                                        iterator = 0,
                                                        length = LDKF.get.htmlCollectionLength(children);

                                                    /* Loop
                                                            Index Children.
                                                    */
                                                    for (iterator; iterator != length; iterator += 1) {
                                                        // Initialization > Child
                                                        let child = children[iterator];

                                                        // Update > List
                                                        LDKF.includesArray(getSortedAttribute(child, 'role'), 'button') && LDKF.pushArray(list, child)
                                                    }
                                                }

                                                // Return
                                                return list
                                            }
                                        },

                                        // Containers
                                        containers: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function containers() {
                                                // Initialization > (Carousel, Children, Containers, Iterator)
                                                let carousel = this,
                                                    children = LDKF.get.elementChildren(carousel),
                                                    $containers = {button: null, indicator: null, slide: null},
                                                    iterator = LDKF.get.htmlCollectionLength(children);

                                                /* Loop
                                                        Index Children.
                                                */
                                                while (iterator) {
                                                    // Initialization > (Child, Roles, Stop Searching)
                                                    let child = children[iterator -= 1],
                                                        roles = getSortedAttribute(child, 'role'),
                                                        stopSearching = !0;

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (!$containers.slide && stopSearching)
                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (LDKF.includesArray(roles, 'slide-container')) {
                                                            // Modification > Containers > Slide
                                                            $containers.slide = child;
                                                                // Role
                                                                (LDKF.includesArray(roles, 'button-container') || LDKF.includesArray(roles, 'indicator-container')) && LDKF.setAttributeElement($containers.slide, 'role', LDKF.joinArray(LDKF.filterArray(roles, function(item) { return item !== 'button-container' && item !== 'indicator-container' }), ' '));

                                                            // Update > Stop Searching
                                                            stopSearching = !1
                                                        }

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (!$containers.button && stopSearching)
                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (LDKF.includesArray(roles, 'button-container')) {
                                                            // Modification > Containers > Button
                                                            $containers.button = child;
                                                                // Role
                                                                (LDKF.includesArray(roles, 'indicator-container') || LDKF.includesArray(roles, 'slide-container')) && LDKF.setAttributeElement($containers.button, 'role', LDKF.joinArray(LDKF.filterArray(roles, function(item) { return item !== 'indicator-container' && item !== 'slide-container' }), ' '));

                                                            // Update > Stop Searching
                                                            stopSearching = !1
                                                        }

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (!$containers.indicator && stopSearching)
                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (LDKF.includesArray(roles, 'indicator-container')) {
                                                            // Modification > Containers > Indicator
                                                            $containers.indicator = child;
                                                                // Role
                                                                (LDKF.includesArray(roles, 'button-container') || LDKF.includesArray(roles, 'slide-container')) && LDKF.setAttributeElement($containers.indicator, 'role', LDKF.joinArray(LDKF.filterArray(roles, function(item) { return item !== 'button-container' && item !== 'slide-container' }), ' '));

                                                            // Update > Stop Searching
                                                            stopSearching = !1
                                                        }
                                                }

                                                // Return
                                                return $containers
                                            }
                                        },

                                        // First
                                        first: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function first() {
                                                // Initialization > Carousel
                                                let carousel = this;

                                                // Return
                                                return properties.toggle.value.call(carousel, 0)
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Indicators
                                        indicators: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function indicators() {
                                                // Initialization > (Carousel, Indicator Container, List)
                                                let carousel = this,
                                                    indicatorContainer = properties.containers.get.call(carousel).indicator,
                                                    list = [];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (indicatorContainer) {
                                                    // Initialization > (Children, Iterator, Length)
                                                    let children = LDKF.get.elementChildren(indicatorContainer),
                                                        iterator = 0,
                                                        length = LDKF.get.htmlCollectionLength(children);

                                                    /* Loop
                                                            Index Children.
                                                    */
                                                    for (iterator; iterator != length; iterator += 1) {
                                                        // Initialization > Child
                                                        let child = children[iterator];

                                                        // Update > List
                                                        LDKF.includesArray(getSortedAttribute(child, 'role'), 'indicator') && LDKF.pushArray(list, child)
                                                    }
                                                }

                                                // Return
                                                return list
                                            }
                                        },

                                        // Last
                                        last: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function last() {
                                                // Initialization > (Carousel, Slides)
                                                let carousel = this,
                                                    slides = properties.slides.get.call(carousel);

                                                // Return
                                                return properties.toggle.value.call(carousel, (slides.length || 1) - 1)
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Left Button
                                        leftButton: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function leftButton() {
                                                // Initialization > (Carousel, Buttons Container)
                                                let carousel = this,
                                                    buttonsContainer = properties.containers.call(carousel).button;

                                                // Logic > Return
                                                if (LDKF.includesArray(getSortedAttribute(buttonsContainer[0], 'role'), 'left-button'))
                                                    return buttonsContainer[0];

                                                // Logic > Return
                                                if (LDKF.includesArray(getSortedAttribute(buttonsContainer[1], 'role'), 'left-button'))
                                                    return buttonsContainer[1];

                                                // Return
                                                return null
                                            }
                                        },

                                        // Next
                                        next: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function next() {
                                                // Initialization > (Carousel, Index, Number of Slides)
                                                let carousel = this,
                                                    index = properties.activeSlideIndex.get.call(carousel) + 1,
                                                    numberOfSlides = properties.slides.get.call(carousel).length;

                                                // Update > Index
                                                (index < 0) && (index = numberOfSlides - 1);
                                                (index > numberOfSlides - 1) && (index = 0);

                                                // Return
                                                return properties.toggle.value.call(carousel, index)
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Options
                                        options: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function options() {
                                                // Return
                                                return getSortedAttribute(this, 'options')
                                            }
                                        },

                                        // Previous
                                        prev: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function previous() {
                                                // Initialization > (Carousel, Index, Number of Slides)
                                                let carousel = this,
                                                    index = properties.activeSlideIndex.get.call(carousel) - 1,
                                                    numberOfSlides = properties.slides.get.call(carousel).length;

                                                // Update > Index
                                                (index < 0) && (index = numberOfSlides - 1);
                                                (index > numberOfSlides) && (index = 0);

                                                // Return
                                                return properties.toggle.value.call(carousel, index)
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Random
                                        random: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function random() {
                                                // Initialization > (Carousel, Number of Slides, Index)
                                                let carousel = this,
                                                    numberOfSlides = properties.slides.get.call(carousel).length,
                                                    index = LDKF.numberParseInt(LDKF.mathRandom() * numberOfSlides);

                                                // Loop > Update > Index
                                                while (index === properties.activeSlideIndex.get.call(carousel))
                                                    index = LDKF.numberParseInt(LDKF.mathRandom() * numberOfSlides);

                                                // Return
                                                return properties.toggle.value.call(carousel, index)
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Right Button
                                        rightButton: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function rightButton() {
                                                // Initialization > (Carousel, Buttons Container)
                                                let carousel = this,
                                                    buttonsContainer = properties.containers.call(carousel).button;

                                                // Logic > Return
                                                if (LDKF.includesArray(getSortedAttribute(buttonsContainer[0], 'role'), 'right-button'))
                                                    return buttonsContainer[0];

                                                // Logic > Return
                                                if (LDKF.includesArray(getSortedAttribute(buttonsContainer[1], 'role'), 'right-button'))
                                                    return buttonsContainer[1];

                                                // Return
                                                return null
                                            }
                                        },

                                        // Toggle
                                        toggle: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Value
                                            value: function toggle() {
                                                // Initialization > (Carousel, (Active Slide) Index, Slides, Number of Slides)
                                                let carousel = this,
                                                    activeSlideIndex = properties.activeSlideIndex.get.call(carousel),
                                                    index = arguments[0],
                                                    slides = properties.slides.get.call(carousel),
                                                    numberOfSlides = slides.length;

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (numberOfSlides)
                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (arguments.length) {
                                                        // Error
                                                        LDKF.isSafeInteger(index) || LDKF.error("'toggle'", 'argument', LDKF.debugMessage(index, ['must', 'a'], 'safe integer'));
                                                        (toggle < 0) && LDKF.error("'toggle'", 'argument', 'Index given must be greater than 0');
                                                        (toggle > numberOfSlides) && LDKF.error("'toggle'", 'argument', 'Index given must be less than the current number of slides (' + numberOfSlides + ')');

                                                        /* Loop
                                                                Index Slides.
                                                        */
                                                        while (numberOfSlides) {
                                                            // Initialization > Slide
                                                            let slide = slides[numberOfSlides -= 1];

                                                            // Modification > Slide > State
                                                            setSortedAttribute(slide, 'state', 'passive', 'active')
                                                        }

                                                        // Modification > Slide > State
                                                        setSortedAttribute(slides[index], 'state', 'active', 'passive')
                                                    }

                                                    else
                                                        // Error
                                                        LDKF.error("'toggle'", 'argument', [1, 0])
                                            },

                                            // Writable
                                            writable: !1
                                        },

                                        // Slides
                                        slides: {
                                            // Configurable
                                            configurable: !0,

                                            // Enumerable
                                            enumerable: !1,

                                            // Get
                                            get: function indicators() {
                                                // Initialization > (Carousel, Slide Container, List)
                                                let carousel = this,
                                                    slideContainer = properties.containers.get.call(carousel).slide,
                                                    list = [];

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (slideContainer) {
                                                    // Initialization > (Children, Iterator, Length)
                                                    let children = LDKF.get.elementChildren(slideContainer),
                                                        iterator = 0,
                                                        length = LDKF.get.htmlCollectionLength(children);

                                                    /* Loop
                                                            Index Children.
                                                    */
                                                    for (iterator; iterator != length; iterator += 1) {
                                                        // Initialization > Child
                                                        let child = children[iterator];

                                                        // Update > List
                                                        LDKF.includesArray(getSortedAttribute(child, 'role'), 'slide') && LDKF.pushArray(list, child)
                                                    }
                                                }

                                                // Return
                                                return list
                                            }
                                        }
                                    }, subElementProperties = {
                                        // Button
                                        button: {
                                            // Carousel
                                            carousel: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function carousel() {
                                                    // Initialization > (Element, Carousels, Parent)
                                                    let element = this,
                                                        carousels = getElements(primaryStorage.carousel),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(carousels, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        },

                                        // Buttons Container
                                        buttonsContainer: {
                                            // Carousel
                                            carousel: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function carousel() {
                                                    // Initialization > (Element, Carousels, Parent)
                                                    let element = this,
                                                        carousels = getElements(primaryStorage.carousel),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(carousels, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        },

                                        // Indicator
                                        indicator: {
                                            // Carousel
                                            carousel: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function carousel() {
                                                    // Initialization > (Element, Carousels, Parent)
                                                    let element = this,
                                                        carousels = getElements(primaryStorage.carousel),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(carousels, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        },

                                        // Indicators Container
                                        indicatorsContainer: {
                                            // Carousel
                                            carousel: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function carousel() {
                                                    // Initialization > (Element, Carousels, Parent)
                                                    let element = this,
                                                        carousels = getElements(primaryStorage.carousel),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(carousels, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        },

                                        // Slide
                                        slide: {
                                            // Carousel
                                            carousel: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function carousel() {
                                                    // Initialization > (Element, Carousels, Parent)
                                                    let element = this,
                                                        carousels = getElements(primaryStorage.carousel),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(carousels, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        },

                                        // Slides Container
                                        slidesContainer: {
                                            // Carousel
                                            carousel: {
                                                // Configurable
                                                configurable: !0,

                                                // Enumerable
                                                enumerable: !1,

                                                // Get
                                                get: function carousel() {
                                                    // Initialization > (Element, Carousels, Parent)
                                                    let element = this,
                                                        carousels = getElements(primaryStorage.carousel),
                                                        parent = element;

                                                    // Loop > Logic > Return
                                                    while (LDKF.isNode(parent) && LDKF.get.nodeParentElement(parent))
                                                        if (LDKF.includesArray(carousels, parent = LDKF.get.nodeParentElement(parent)))
                                                            return parent;

                                                    // Return
                                                    return null
                                                }
                                            }
                                        }
                                    }, watch = {
                                        // {Mouse Input} Button
                                            // Next Event Listener
                                            buttonNextEventListener: function next() {
                                                // Initialization > (Right Button, Carousel)
                                                let rightButton = this,
                                                    carousel = subElementProperties.button.carousel.get.call(rightButton);

                                                // Return
                                                return carousel ? properties.next.value.call(carousel) : null
                                            },

                                            // Previous Event Listener
                                            buttonPreviousEventListener: function previous() {
                                                // Initialization > (Left Button, Carousel)
                                                let leftButton = this,
                                                    carousel = subElementProperties.button.carousel.get.call(leftButton);

                                                // Return
                                                return carousel ? properties.prev.value.call(carousel) : null
                                            },

                                        // {Mouse Input} Indicator > Toggle Event Listener
                                        indicatorToggleEventListener: function toggle() {
                                            // Initialization > (Indicator, Carousel, Index)
                                            let indicator = this,
                                                carousel = subElementProperties.indicator.carousel.get.call(indicator),
                                                index = LDKF.indexOfArray(properties.indicators.get.call(carousel), indicator);

                                            // Return
                                            return index == -1 ? null : properties.toggle.value.call(carousel, index)
                                        },

                                        // {Drag/ Touch Input} Slide Container
                                            // Next Event Listener
                                            slideContainerNextEventListener: function next() {
                                                // Initialization > (Slide, Carousel)
                                                let slide = this,
                                                    carousel = subElementProperties.slide.carousel.get.call(slide);

                                                // Return
                                                return carousel ? properties.next.value.call(carousel) : null
                                            },

                                            // Previous Event Listener
                                            slideContainerPreviousEventListener: function previous() {
                                                // Initialization > (Slide, Carousel)
                                                let slide = this,
                                                    carousel = subElementProperties.slide.carousel.get.call(slide);

                                                // Return
                                                return carousel ? properties.prev.value.call(carousel) : null
                                            },

                                        // {Key Input} Window
                                            // Next Event Listener
                                            windowNextEventListener: function nextCarouselSlide() {
                                                // Initialization > (Document, Carousels, Iterator, Length)
                                                let document = this.document,
                                                    carousels = LDKF.$getElementsByClassNameDocument(LDKF.isDocument(document) ? document : LDKO.$document, 'carousel'),
                                                    iterator = 0,
                                                    length = LDKF.get.htmlCollectionLength(carousels);

                                                /* Loop
                                                        Index Carousels.

                                                    > Carousel > Next
                                                */
                                                for (iterator; iterator != length; iterator += 1)
                                                    properties.next.value.call(carousels[iterator])
                                            },

                                            // Previous Event Listener
                                            windowPreviousEventListener: function previousCarouselSlide() {
                                                // Initialization > (Document, Carousels, Iterator, Length)
                                                let document = this.document,
                                                    carousels = LDKF.$getElementsByClassNameDocument(LDKF.isDocument(document) ? document : LDKO.$document, 'carousel'),
                                                    iterator = 0,
                                                    length = LDKF.get.htmlCollectionLength(carousels);

                                                /* Loop
                                                        Index Carousels.

                                                    > Carousel > Previous
                                                */
                                                for (iterator; iterator != length; iterator += 1)
                                                    properties.prev.value.call(carousels[iterator])
                                            }
                                    };

                                    // Correct Carousel
                                    function correctCarousel(carousel) {
                                        // Initialization > (Cooldown (Duration, Value), Timeout)
                                        let cooldownDuration = 100,
                                            cooldownValue = !0,
                                            timeout;

                                        // Function > Correct
                                        function correct() {
                                            // Initialization > ((Button, Indicator, Slide) Container, Options)
                                            let buttonContainer = properties.containers.get.call(carousel).button,
                                                indicatorContainer = properties.containers.get.call(carousel).indicator,
                                                slideContainer = properties.containers.get.call(carousel).slide,
                                                options = getSortedAttribute(carousel, 'options');

                                            // Insertion | Deletion
                                            LDKF.includesArray(options, 'buttons') ?
                                                buttonContainer || LDKF.appendChildNode(carousel, buttonContainer = (function() {
                                                    // Initialization > Button Container
                                                    let buttonContainer = LDKF.createElementDocument('div');

                                                    // Modification > Button Container > (Carousel, Role)
                                                    LDKF.objectDefineProperty(buttonContainer, 'carousel', subElementProperties.buttonsContainer.carousel);
                                                    LDKF.setAttributeElement(buttonContainer, 'role', 'button-container');

                                                    // Return
                                                    return buttonContainer
                                                })()) :
                                                buttonContainer && LDKF.removeChildNode(carousel, buttonContainer);

                                            LDKF.includesArray(options, 'indicators') ?
                                                indicatorContainer || LDKF.appendChildNode(carousel, indicatorContainer = (function() {
                                                    // Initialization > Indicator Container
                                                    let indicatorContainer = LDKF.createElementDocument('div');

                                                    // Modification > Indicator Container > (Carousel, Role)
                                                    LDKF.objectDefineProperty(indicatorContainer, 'carousel', subElementProperties.indicatorsContainer.carousel);
                                                    LDKF.setAttributeElement(indicatorContainer, 'role', 'indicator-container');

                                                    // Return
                                                    return indicatorContainer
                                                })()) :
                                                indicatorContainer && LDKF.removeChildNode(carousel, indicatorContainer);

                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (slideContainer) {
                                                // Initialization > (Children, Iterator)
                                                let children = LDKF.get.elementChildren(slideContainer),
                                                    iterator = LDKF.get.htmlCollectionLength(children);

                                                /* Loop
                                                        Index Children.
                                                */
                                                while (iterator) {
                                                    // Initialization > Child
                                                    let child = children[iterator -= 1];

                                                    // Modification > Child > Role
                                                    LDKF.includesArray(getSortedAttribute(child, 'role'), 'slide') || setSortedAttribute(child, 'role', 'slide')
                                                }
                                            }

                                            else {
                                                // Initialization > (Slide Container, Children, Iterator)
                                                let slideContainer = LDKF.createElementDocument('div'),
                                                    children = LDKF.toArray(LDKF.get.elementChildren(carousel)),
                                                    iterator = children.length;

                                                // Modification > Slide Container > (Carousel, Role)
                                                LDKF.objectDefineProperty(slideContainer, 'carousel', subElementProperties.slidesContainer.carousel);
                                                LDKF.setAttributeElement(slideContainer, 'role', 'slide-container');

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (iterator) {
                                                    /* Loop
                                                            Index Children.
                                                    */
                                                    while (iterator) {
                                                        // Initialization > Child
                                                        let child = children[iterator -= 1];

                                                        // Insertion
                                                        (child === buttonContainer || child === indicatorContainer) || LDKF.appendChildNode(slideContainer, child)
                                                    }

                                                    // Insertion
                                                    LDKF.insertBeforeNode(carousel, slideContainer, LDKF.get.$parentNodeFirstElementChild(carousel))
                                                }

                                                else
                                                    // Insertion
                                                    LDKF.appendChildNode(carousel, slideContainer)
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (buttonContainer) {
                                                // Initialization > (Buttons, Children, Iterator)
                                                let buttons = properties.buttons.get.call(carousel),
                                                    children = LDKF.get.elementChildren(buttonContainer),
                                                    iterator = LDKF.get.htmlCollectionLength(children);

                                                /* Loop
                                                        Index Children.
                                                */
                                                while (iterator) {
                                                    // Initialization > (Child, Roles)
                                                    let child = children[iterator -= 1],
                                                        roles = getSortedAttribute(child, 'role');

                                                    // Deletion
                                                    (LDKF.includesArray(roles, 'button') || LDKF.includesArray(roles, 'left-button') || LDKF.includesArray(roles, 'right-button')) || LDKF.remove$ChildNode(child)
                                                }

                                                // Initialization > Length
                                                let length = LDKF.get.htmlCollectionLength(children = LDKF.get.elementChildren(buttonContainer));

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (length > 2)
                                                    /* Loop
                                                            [while statement]
                                                    */
                                                    while (length > 2) {
                                                        // Deletion
                                                        LDKF.removeChildNode(buttonContainer, children[length - 1]);

                                                        // Update > Length
                                                        length = LDKF.get.htmlCollectionLength(children = LDKF.get.elementChildren(buttonContainer))
                                                    }

                                                else if (!length) {
                                                    // Initialization > (Left, Right) Button
                                                    let leftButton = LDKF.createElementDocument('button'),
                                                        rightButton = LDKF.createElementDocument('button');

                                                    // Modification > (Left, Right) Button > Role
                                                    LDKF.setAttributeElement(leftButton, 'role', 'button left-button');
                                                    LDKF.setAttributeElement(rightButton, 'role', 'button right-button');

                                                    // Insertion
                                                    LDKF.appendChildNode(buttonContainer, leftButton);
                                                    LDKF.appendChildNode(buttonContainer, rightButton)
                                                }

                                                // Update > Iterator
                                                iterator = length;

                                                // Initialization > ((Left, Right) Button) Found
                                                let leftButton, leftButtonFound = !1,
                                                    rightButton, rightButtonFound = !1;

                                                /* Loop
                                                        Index Children.
                                                */
                                                while (iterator) {
                                                    // Initialization > (Button, Roles)
                                                    let button = children[iterator -= 1],
                                                        roles = getSortedAttribute(button, 'role');

                                                    /* Logic
                                                            [if statement]
                                                    */
                                                    if (!leftButtonFound || !rightButtonFound)
                                                        /* Logic
                                                                [if:else if:else statement]
                                                        */
                                                        if (LDKF.includesArray(roles, 'left-button')) {
                                                            // Modification > Left Button > Role
                                                            setSortedAttribute(leftButton = button, 'role', 'button');

                                                            // Update > Left Button Found
                                                            leftButtonFound = !0
                                                        }

                                                        else if (LDKF.includesArray(roles, 'right-button')) {
                                                            // Modification > Right Button > Role
                                                            setSortedAttribute(rightButton = button, 'role', 'button');

                                                            // Update > Right Button Found
                                                            rightButtonFound = !0
                                                        }

                                                        else if (!leftButtonFound) {
                                                            // Modification > Left Button > Role
                                                            setSortedAttribute(leftButton = button, 'role', ['button', 'left-button']);

                                                            // Update > Left Button Found
                                                            leftButtonFound = !0
                                                        }

                                                        else {
                                                            // Modification > Right Button > Role
                                                            setSortedAttribute(rightButton = button, 'role', ['button', 'right-button']);

                                                            // Update > Right Button Found
                                                            rightButtonFound = !0
                                                        }
                                                }

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (!LDKF.includesArray(buttons, leftButton)) {
                                                    // Unset Carousel Button > Left Button
                                                    unsetCarouselButton(leftButton);

                                                    // Modification > Left Button > Carousel
                                                    LDKF.objectDefineProperty(leftButton, 'carousel', subElementProperties.button.carousel);

                                                    // Event > Left Button > Mouse Up
                                                    LDKF.addEvent(leftButton, 'mouseup', watch.buttonPreviousEventListener)
                                                }

                                                /* Logic
                                                        [if statement]
                                                */
                                                if (!LDKF.includesArray(buttons, rightButton)) {
                                                    // Unset Carousel Button > Right Button
                                                    unsetCarouselButton(rightButton);

                                                    // Modification > Right Button > Carousel
                                                    LDKF.objectDefineProperty(rightButton, 'carousel', subElementProperties.button.carousel);

                                                    // Event > Right Button > Mouse Up
                                                    LDKF.addEvent(rightButton, 'mouseup', watch.buttonNextEventListener)
                                                }
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (indicatorContainer) {
                                                // Initialization > (Indicators, Children, Iterator)
                                                let indicators = properties.indicators.get.call(carousel),
                                                    children = LDKF.get.elementChildren(indicatorContainer),
                                                    iterator = LDKF.get.htmlCollectionLength(children);

                                                /* Loop
                                                        Index Children.
                                                */
                                                while (iterator) {
                                                    // Initialization > Child
                                                    let child = children[iterator -= 1];

                                                    // Deletion
                                                    LDKF.includesArray(getSortedAttribute(child, 'role'), 'indicator') || LDKF.remove$ChildNode(child)
                                                }

                                                // Initialization > Length
                                                let length = LDKF.get.htmlCollectionLength(children = LDKF.get.elementChildren(indicatorContainer));

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (length < properties.slides.get.call(carousel).length) {
                                                    // Initialization > Indicator
                                                    let indicator = LDKF.createElementDocument('button');

                                                    // Deletion
                                                    delete indicator.carousel;

                                                    // Modification > Indicator > (Carousel, Role)
                                                    LDKF.objectDefineProperty(indicator, 'carousel', subElementProperties.indicator.carousel);
                                                    LDKF.setAttributeElement(indicator, 'role', 'indicator');

                                                    // Event > Indicator > Mouse Up
                                                    LDKF.addEvent(indicator, 'mouseup', watch.indicatorToggleEventListener);

                                                    // Insertion
                                                    LDKF.appendChildNode(indicatorContainer, indicator);

                                                    // Update > Length
                                                    length = LDKF.get.htmlCollectionLength(children = LDKF.get.elementChildren(indicatorContainer))
                                                }
                                            }

                                            // Initialization > Active Slide Index
                                            let activeSlideIndex = properties.activeSlideIndex.get.call(carousel);

                                            // Carousel > Toggle
                                            properties.toggle.value.call(carousel, activeSlideIndex < 1 ? 0 : activeSlideIndex || 0)
                                        }

                                        // Correct
                                        correct();

                                        // Carousel > On HTML Change > Watch
                                        LDKF.includesArray(getElements(primaryStorage.carousel), carousel) && tmpObject.nodePrototypeOnHTMLChangeDescriptorValue.call(carousel, function correctCarousel() {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.includesArray(getElements(primaryStorage.carousel), carousel)) {
                                                /* Logic
                                                        [if statement]
                                                */
                                                if (cooldownValue) {
                                                    // Update > Allow Correction
                                                    cooldownValue = !1;

                                                    // Correct > Carousel
                                                    correct(carousel);

                                                    // Set Timeout
                                                    timeout = LDKF.setTimeout(function() {
                                                        // Update > Allow Correction
                                                        cooldownValue = !0;

                                                        // Clear Timeout > Timeout
                                                        LDKF.clearTimeout(timeout)
                                                    }, cooldownDuration)
                                                }
                                            }

                                            else
                                                // Carousel > Cancel On HTML Change
                                                tmpObject.nodePrototypeOnHTMLChangeDescriptorValue.call(carousel, correctAccordion)
                                        })
                                    }

                                    // Index Carousels
                                    function indexCarousels() {
                                        // Initialization > (Carousels, Length)
                                        let carousels = LDKF.getElementsByClassNameDocument('carousel'),
                                            length = LDKF.get.htmlCollectionLength(carousels);

                                        // Asynchronous Index > Set Carousels
                                        asyncIndex(function setCarousels(iterator) {
                                            // Set Carousel > Carousel
                                            setCarousel(carousels[iterator])
                                        }, length)
                                    }

                                    // Set Carousel
                                    function setCarousel(carousel) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (!LDKF.includesArray(getElements(primaryStorage.carousel), carousel)) {
                                            // Update > Primary Storage > Carousel
                                            LDKF.pushArray(primaryStorage.carousel, {element: carousel, type: ['carousel']});

                                            // Deletion
                                            delete carousel.activeSlide;
                                            delete carousel.activeSlideIndex;
                                            delete carousel.buttons;
                                            delete carousel.containers;
                                            delete carousel.first;
                                            delete carousel.last;
                                            delete carousel.leftButton;
                                            delete carousel.indicators;
                                            delete carousel.next;
                                            delete carousel.prev;
                                            delete carousel.random;
                                            delete carousel.rightButton;
                                            delete carousel.toggle;
                                            delete carousel.slides;

                                            // Modification > Carousel > (Active Slide (Index), Buttons, Containers, First, Last, Indicators, Next, Previous, Random, Toggle, Slides)
                                            LDKF.objectDefineProperty(carousel, 'activeSlide', properties.activeSlide);
                                            LDKF.objectDefineProperty(carousel, 'activeSlideIndex', properties.activeSlideIndex);
                                            LDKF.objectDefineProperty(carousel, 'buttons', properties.buttons);
                                            LDKF.objectDefineProperty(carousel, 'containers', properties.containers);
                                            LDKF.objectDefineProperty(carousel, 'first', properties.first);
                                            LDKF.objectDefineProperty(carousel, 'last', properties.last);
                                            LDKF.objectDefineProperty(carousel, 'leftButton', properties.leftButton);
                                            LDKF.objectDefineProperty(carousel, 'indicators', properties.indicators);
                                            LDKF.objectDefineProperty(carousel, 'next', properties.next);
                                            LDKF.objectDefineProperty(carousel, 'options', properties.options);
                                            LDKF.objectDefineProperty(carousel, 'prev', properties.prev);
                                            LDKF.objectDefineProperty(carousel, 'random', properties.random);
                                            LDKF.objectDefineProperty(carousel, 'rightButton', properties.rightButton);
                                            LDKF.objectDefineProperty(carousel, 'toggle', properties.toggle);
                                            LDKF.objectDefineProperty(carousel, 'slides', properties.slides);

                                            // Initialization > (Button, Indicator, Slide) Container
                                            let buttonContainer = LDKF.createElementDocument('div'),
                                                indicatorContainer = LDKF.createElementDocument('div'),
                                                slideContainer = LDKF.createElementDocument('div');

                                            // Initialization > (Active Child, Children, Options, Iterator, Length)
                                            let activeChild = null,
                                                children = LDKF.toArray(LDKF.get.elementChildren(carousel)),
                                                options = getSortedAttribute(carousel, 'options'),
                                                iterator = 0,
                                                length = children.length;

                                            // (Update > Slide Container) | Insertion
                                            properties.containers.get.call(carousel).slide ?
                                                slideContainer = properties.containers.get.call(carousel).slide :
                                                LDKF.appendChildNode(carousel, slideContainer);

                                            // (Update > Button Container) | Insertion
                                            properties.containers.get.call(carousel).button ?
                                                buttonContainer = properties.containers.get.call(carousel).button :
                                                LDKF.appendChildNode(carousel, buttonContainer);

                                            // (Update > Indicator Container) | Insertion
                                            properties.containers.get.call(carousel).indicator ?
                                                indicatorContainer = properties.containers.get.call(carousel).indicator :
                                                LDKF.appendChildNode(carousel, indicatorContainer);

                                            // Modification > (Button, Indicator, Slide) Container > Role
                                            setSortedAttribute(buttonContainer, 'role', 'button-container');
                                            setSortedAttribute(indicatorContainer, 'role', 'indicator-container');
                                            setSortedAttribute(slideContainer, 'role', 'slide-container');

                                            /* Loop
                                                    Index Children.
                                            */
                                            for (iterator; iterator != length; iterator += 1) {
                                                // Initialization > Child
                                                let child = children[iterator];

                                                // Update > Active Child
                                                LDKF.isNull(activeChild) && (LDKF.includesArray(getSortedAttribute(child, 'state'), 'active') && (activeChild = iterator));

                                                // Deletion
                                                delete child.carousel;

                                                // Modification > Child > (Carousel, Role)
                                                LDKF.objectDefineProperty(child, 'carousel', subElementProperties.slide.carousel);
                                                LDKF.includesArray(getSortedAttribute(child, 'role'), 'slide') || setSortedAttribute(child, 'role', 'slide');

                                                // Insertion
                                                LDKF.appendChildNode(slideContainer, child)
                                            }

                                            // Modification > Slide Container > Carousel
                                            LDKF.objectDefineProperty(slideContainer, 'carousel', subElementProperties.slidesContainer.carousel);

                                            // Carousel > Toggle
                                            properties.toggle.value.call(carousel, LDKF.isNull(activeChild) ? 0 : activeChild);

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.includesArray(options, 'buttons')) {
                                                let buttons = LDKF.get.elementChildren(buttonContainer),
                                                    iterator = 0,
                                                    length = LDKF.get.htmlCollectionLength(buttons),
                                                    leftButton, rightButton;

                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (length) {
                                                    // Loop > Deletion
                                                    while (LDKF.get.htmlCollectionLength(LDKF.get.elementChildren(buttonContainer)) > 2)
                                                        LDKF.removeChildNode(buttonContainer, LDKF.get.$parentNodeLastElementChild(buttonContainer));

                                                    // Update > (Left, Right) Button
                                                    leftButton = LDKF.get.elementChildren(buttonContainer)[0];
                                                    rightButton = LDKF.get.elementChildren(buttonContainer)[1];

                                                    // Modification > (Left, Right) Button > Role
                                                    setSortedAttribute(leftButton, 'role', ['button', 'left-button']);
                                                    setSortedAttribute(rightButton, 'role', ['button', 'right-button']);

                                                    // Insertion
                                                    LDKF.appendChildNode(buttonContainer, leftButton);
                                                    LDKF.appendChildNode(buttonContainer, rightButton)
                                                }

                                                else {
                                                    // Update > (Left, Right) Button
                                                    leftButton = LDKF.createElementDocument('button');
                                                    rightButton = LDKF.createElementDocument('button');

                                                    // Modification > (Left, Right) Button > (Inner HTML, Role)
                                                    LDKF.set.elementInnerHTML(leftButton, '&blacktriangleleft;');
                                                    LDKF.setAttributeElement(leftButton, 'role', 'button left-button');
                                                    LDKF.set.elementInnerHTML(rightButton, '&blacktriangleright;');
                                                    LDKF.setAttributeElement(rightButton, 'role', 'button right-button');

                                                    // Insertion
                                                    LDKF.appendChildNode(buttonContainer, leftButton);
                                                    LDKF.appendChildNode(buttonContainer, rightButton)
                                                }

                                                // Deletion
                                                delete leftButton.carousel;
                                                delete rightButton.carousel;

                                                // Modification > (Left, Right) Button > Carousel
                                                LDKF.objectDefineProperty(leftButton, 'carousel', subElementProperties.button.carousel);
                                                LDKF.objectDefineProperty(rightButton, 'carousel', subElementProperties.button.carousel);

                                                // Event > (Left, Right) Button > Mouse Up
                                                LDKF.addEvent(leftButton, 'mouseup', watch.buttonPreviousEventListener);
                                                LDKF.addEvent(rightButton, 'mouseup', watch.buttonNextEventListener);

                                                // Modification > Indicator Container > Carousel
                                                LDKF.objectDefineProperty(buttonContainer, 'carousel', subElementProperties.buttonsContainer.carousel);

                                                // Insertion
                                                LDKF.appendChildNode(carousel, buttonContainer)
                                            }

                                            /* Logic
                                                    [if statement]
                                            */
                                            if (LDKF.includesArray(options, 'indicators')) {
                                                // Modification > Indicator Container > Inner HTML
                                                LDKF.set.elementInnerHTML(indicatorContainer, '');

                                                /* Loop
                                                        [while statement]
                                                */
                                                while (iterator) {
                                                    // Initialization > Indicator
                                                    let indicator = LDKF.createElementDocument('button');

                                                    // Deletion
                                                    delete indicator.carousel;

                                                    // Modification > Indicator > (Carousel, Role)
                                                    LDKF.objectDefineProperty(indicator, 'carousel', subElementProperties.indicator.carousel);
                                                    LDKF.setAttributeElement(indicator, 'role', 'indicator');

                                                    // Event > Indicator > Mouse Up
                                                    LDKF.addEvent(indicator, 'mouseup', watch.indicatorToggleEventListener);

                                                    // Insertion
                                                    LDKF.appendChildNode(indicatorContainer, indicator);

                                                    // Update > Iterator
                                                    iterator -= 1
                                                }

                                                // Modification > Indicator Container > Carousel
                                                LDKF.objectDefineProperty(indicatorContainer, 'carousel', subElementProperties.indicatorsContainer.carousel);

                                                // Insertion
                                                LDKF.appendChildNode(carousel, indicatorContainer)
                                            }

                                            // Initialization > (Is Spinning, Interval)
                                            let isSpinning = !1, interval;

                                            // Update > Iterator
                                            iterator = options.length;

                                            // Correct Carousel > Carousel
                                            correctCarousel(carousel);

                                            // Watch Carousel
                                            (function watchCarousel() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (LDKF.hasClassHtmlElement(carousel, 'carousel')) {
                                                    // Initialization > (Interval Duration, Spinnable)
                                                    let intervalDuration = 3e3,
                                                        spinnable = !1;

                                                    // Update > Iterator
                                                    iterator = (options = properties.options.get.call(carousel)).length;

                                                    /* Loop
                                                            Index Options.
                                                    */
                                                    while (iterator) {
                                                        // Initialization > Option
                                                        let option = options[iterator -= 1];

                                                        /* Logic
                                                                [if statement]
                                                        */
                                                        if (option == 'auto' || (option[0] == 'a' && option[1] == 'u' && option[2] == 't' && option[3] == 'o')) {
                                                            // Update > (Interval Duration, Spinnable)
                                                            (option.length > 4) && (intervalDuration = (LDKF.numberParseInt(LDKF.sliceString(option, 'auto='.length)) || 3) * 1e3);
                                                            spinnable = !0;

                                                            // Break
                                                            break
                                                        }
                                                    }

                                                    /* Logic
                                                            [if:else statement]
                                                    */
                                                    if (spinnable) {
                                                        /* Logic
                                                                [if statement]

                                                            > Update > (Interval, Is Spinning)
                                                        */
                                                        if (!isSpinning) {
                                                            interval = LDKF.setInterval(function spin() {
                                                                // Initialization > Direction
                                                                let direction = 'next';

                                                                // Update > Iterator
                                                                iterator = options.length;

                                                                /* Loop
                                                                        Index Options.
                                                                */
                                                                while (iterator) {
                                                                    // Initialization > Option
                                                                    let option = options[iterator -= 1];

                                                                    /* Logic
                                                                            [if statement]
                                                                    */
                                                                    if (option[0] == 'd' && option[1] == 'i' && option[2] == 'r' && option[3] == 'e' && option[4] == 'c' && option[5] == 't' && option[6] == 'i' && option[7] == 'o' && option[8] == 'n' && option[9] == '=') {
                                                                        // Update > Direction
                                                                        direction = LDKF.sliceString(option, 'direction='.length);

                                                                        // Break
                                                                        break
                                                                    }
                                                                }

                                                                // Update > Direction
                                                                direction = direction == 'left' || direction == 'right' ? (direction == 'left' ? 'prev' : 'next') : 'next';

                                                                // Carousel > Next
                                                                properties[direction].value.call(carousel)
                                                            }, intervalDuration);
                                                            isSpinning = !0
                                                        }
                                                    }

                                                    else {
                                                        // Clear Interval > Interval
                                                        LDKF.clearInterval(interval);

                                                        // Update > Is Spinning
                                                        isSpinning = !1
                                                    }

                                                    // Update > Request
                                                    request = LDKF.requestAnimationFrame(watchCarousel)
                                                }

                                                else {
                                                    // Unset Carousel > Carousel
                                                    unsetCarousel(carousel);

                                                    // Cancel Animation Frame > Request
                                                    LDKF.cancelAnimationFrame(request)
                                                }
                                            })()
                                        }
                                    }

                                    // Unset Carousel
                                    function unsetCarousel(carousel) {
                                        // Initialization > (Button Container, Buttons, Index, Indicator Container, Indicators, Slide Container, Slides, Iterator, Length)
                                        let buttonContainer = properties.containers.get.call(carousel).button,
                                            buttons = properties.buttons.get.call(carousel),
                                            index = LDKF.indexOfArray(getElements(primaryStorage.carousel), carousel),
                                            indicatorContainer = properties.containers.get.call(carousel).indicator,
                                            indicators = properties.indicators.get.call(carousel),
                                            slideContainer = properties.containers.get.call(carousel).slide,
                                            slides = properties.slides.get.call(carousel),
                                            iterator = 0,
                                            length = buttons.length;

                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'activeSlide'), properties.activeSlide) && delete carousel.activeSlide;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'activeSlideIndex'), properties.activeSlideIndex) && delete carousel.activeSlideIndex;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'buttons'), properties.buttons) && delete carousel.buttons;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'containers'), properties.containers) && delete carousel.containers;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'first'), properties.first) && delete carousel.first;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'indicators'), properties.indicators) && delete carousel.indicators;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'last'), properties.last) && delete carousel.last;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'leftButton'), properties.leftButton) && delete carousel.leftButton;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'next'), properties.next) && delete carousel.next;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'options'), properties.options) && delete carousel.options;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'prev'), properties.prev) && delete carousel.prev;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'random'), properties.random) && delete carousel.random;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'rightButton'), properties.rightButton) && delete carousel.rightButton;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'toggle'), properties.toggle) && delete carousel.toggle;
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(carousel, 'slides'), properties.slides) && delete carousel.slides;

                                        /* Loop
                                                Index Buttons.

                                            > Unset Carousel Button > Button
                                        */
                                        for (iterator; iterator != length; iterator += 1)
                                            unsetCarouselButton(buttons[iterator]);

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = indicators.length;

                                        /* Loop
                                                Index Indicators.

                                            > Unset Carousel Indicator > Indicator
                                        */
                                        for (iterator; iterator != length; iterator += 1)
                                            unsetCarouselIndicator(indicators[iterator]);

                                        // Update > (Iterator, Length)
                                        iterator = 0;
                                        length = slides.length;

                                        /* Loop
                                                Index Slides.

                                            > Unset Carousel Slide > Slide
                                        */
                                        for (iterator; iterator != length; iterator += 1)
                                            unsetCarouselSlide(slides[iterator]);

                                        // Unset Carousel (Button, Indicator, Slide) Container > (Button, Indicator, Slide) Container
                                        unsetCarouselButtonContainer(buttonContainer);
                                        unsetCarouselIndicatorContainer(indicatorContainer);
                                        unsetCarouselSlideContainer(slideContainer);

                                        // Update > (Primary Storage > Carousel)
                                        (index == -1) || LDKF.spliceArray(primaryStorage.carousel, index, 1)
                                    }

                                    // Unset Carousel Button
                                    function unsetCarouselButton(button) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(button, 'carousel'), subElementProperties.button.carousel) && delete button.carousel;

                                        // Event > Button > Mouse Up
                                        LDKF.delEvent(button, 'mouseup', watch.buttonPreviousEventListener);
                                        LDKF.delEvent(button, 'mouseup', watch.buttonNextEventListener)
                                    }

                                    // Unset Carousel Button Container
                                    function unsetCarouselButtonContainer(buttonContainer) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(buttonContainer, 'carousel'), subElementProperties.buttonsContainer.carousel) && delete buttonContainer.carousel
                                    }

                                    // Unset Carousel Indicator
                                    function unsetCarouselIndicator(indicator) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(indicator, 'carousel'), subElementProperties.indicator.carousel) && delete indicator.carousel;

                                        // Event > Indicator > Mouse Up
                                        LDKF.delEvent(indicator, 'mouseup', watch.indicatorToggleEventListener)
                                    }

                                    // Unset Carousel Indicator Container
                                    function unsetCarouselIndicatorContainer(indicatorContainer) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(indicatorContainer, 'carousel'), subElementProperties.indicatorsContainer.carousel) && delete indicatorContainer.carousel
                                    }

                                    // Unset Carousel Slide
                                    function unsetCarouselSlide(slide) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(slide, 'carousel'), subElementProperties.slide.carousel) && delete slide.carousel
                                    }

                                    // Unset Carousel Slide Container
                                    function unsetCarouselSlideContainer(slideContainer) {
                                        // Deletion
                                        samePropertyDescription(LDKF.objectGetOwnPropertyDescriptor(slideContainer, 'carousel'), subElementProperties.slidesContainer.carousel) && delete slideContainer.carousel
                                    }

                                    // Index Carousels
                                    indexCarousels();

                                    // On DOM Element Added > Index Carousel
                                    tmpObject.windowOnDOMElementAddedDescriptionValue(function indexCarousel() {
                                        // Initialization > (Cooldown (Duration, Value), Timeout)
                                        let cooldownDuration = 250,
                                            cooldownValue = !0,
                                            timeout;

                                        /* Logic
                                                [if statement]
                                        */
                                        if (cooldownValue) {
                                            // Update > Cooldown Value
                                            cooldownValue = !1;

                                            // Index Carousels
                                            indexCarousels();

                                            // Update > Timeout
                                            timeout = LDKF.setTimeout(function() {
                                                // Update > Cooldown Value
                                                cooldownValue = !0;

                                                // Clear Timeout
                                                LDKF.clearTimeout(timeout)
                                            }, cooldownDuration)
                                        }
                                    })
                                })();

                                // Draggable
                                // Dropdown
                                // Dynamic Text
                                // Dynamic Time
                                // Marquee
                                // Table
                                // Toast
                                // Tooltip

                                /* [Template]
                                        --- UPDATE REQUIRED ---
                                            #Lapys: Remove when done.
                                */
                                LDKF.includesArray(LDK.components, 'template') && (function template() {
                                    // Initialization > ((Sub Element) Properties, Watch)
                                    let properties = {
                                    }, subElementProperties = {
                                    }, watch = {
                                    };

                                    // Correct Template
                                    function correctTemplate(template) {
                                        // Initialization > (Cooldown (Duration, Value), Timeout)
                                        let cooldownDuration = 100,
                                            cooldownValue = !0,
                                            timeout;

                                        // Function > Correct
                                        function correct() {}

                                        // Correct
                                        correct();

                                        // Template > On HTML Change > Watch
                                        LDKF.includesArray(getElements(primaryStorage.template), template) && tmpObject.nodePrototypeOnHTMLChangeDescriptorValue.call(template, function correctTemplate() {
                                            /* Logic
                                                    [if:else statement]
                                            */
                                            if (LDKF.includesArray(getElements(primaryStorage.template), template)) {
                                                /* Logic
                                                        [if statement]
                                                */
                                                if (cooldownValue) {
                                                    // Update > Allow Correction
                                                    cooldownValue = !1;

                                                    // Correct > Template
                                                    correct(template);

                                                    // Set Timeout
                                                    timeout = LDKF.setTimeout(function() {
                                                        // Update > Allow Correction
                                                        cooldownValue = !0;

                                                        // Clear Timeout > Timeout
                                                        LDKF.clearTimeout(timeout)
                                                    }, cooldownDuration)
                                                }
                                            }

                                            else
                                                // Template > Cancel On HTML Change
                                                tmpObject.nodePrototypeOnHTMLChangeDescriptorValue.call(template, correctTemplate)
                                        })
                                    }

                                    // Index Templates
                                    function indexTemplates() {
                                        // Initialization > (Templates, Length)
                                        let templates = LDKF.getElementsByClassNameDocument('template'),
                                            length = LDKF.get.htmlCollectionLength(templates);

                                        // Asynchronous Index > Set Templates
                                        asyncIndex(function setTemplates(iterator) {
                                            // Set Template > Template
                                            setTemplate(templates[iterator])
                                        }, length)
                                    }

                                    // Set Template
                                    function setTemplate(template) {
                                        /* Logic
                                                [if statement]
                                        */
                                        if (!LDKF.includesArray(getElements(primaryStorage.template), template)) {
                                            // Update > Primary Storage > Template
                                            LDKF.pushArray(primaryStorage.template, {element: template, type: ['template']});

                                            // Correct Template > Template
                                            correctTemplate(template);

                                            // Watch Template
                                            (function watchTemplate() {
                                                /* Logic
                                                        [if:else statement]
                                                */
                                                if (LDKF.hasClassHtmlElement(template, 'template'))
                                                    // Update > Request
                                                    request = LDKF.requestAnimationFrame(watchTemplate);

                                                else {
                                                    // Unset Template > Template
                                                    unsetTemplate(template);

                                                    // Cancel Animation Frame > Request
                                                    LDKF.cancelAnimationFrame(request)
                                                }
                                            })()
                                        }
                                    }

                                    // Unset Template
                                    function unsetTemplate(template) {
                                        let index = LDKF.indexOfArray(getElements(primaryStorage.template), template);

                                        // Update > (Primary Storage > Template)
                                        (index == -1) || LDKF.spliceArray(primaryStorage.template, index, 1)
                                    }

                                    // Index Templates
                                    indexTemplates();

                                    // On DOM Element Added > Index Template
                                    tmpObject.windowOnDOMElementAddedDescriptionValue(function indexTemplate() {
                                        // Initialization > (Cooldown (Duration, Value), Timeout)
                                        let cooldownDuration = 250,
                                            cooldownValue = !0,
                                            timeout;

                                        /* Logic
                                                [if statement]
                                        */
                                        if (cooldownValue) {
                                            // Update > Cooldown Value
                                            cooldownValue = !1;

                                            // Index Templates
                                            indexTemplates();

                                            // Update > Timeout
                                            timeout = LDKF.setTimeout(function() {
                                                // Update > Cooldown Value
                                                cooldownValue = !0;

                                                // Clear Timeout
                                                LDKF.clearTimeout(timeout)
                                            }, cooldownDuration)
                                        }
                                    })
                                })()
                        })
                }

                // Termination
                function terminate() {
                    // Initialization > (Processing Duration, Timeout (End, Start))
                    let processingDuration = LapysJS.tmp.processingDuration,
                        timeoutEnd,
                        timeoutStart = LDKC.timeoutStart;

                    // Update > Timeout End
                    timeoutEnd = LDKF.setTimeout(function() {
                        // Initialization > Script Source (Length)
                        let scriptSource = tmpObject.scriptSource,
                            scriptSourceLength = scriptSource.length;

                        // Update > Script Source
                        (scriptSourceLength > 150) && (scriptSource = LDKF.sliceString(scriptSource, 0, 150)) + '…';

                        // LapysJS Development Kit Functions > Console (Group (End), Log)
                        LDKF.consoleGroup('LapysJS | ' + scriptSource + ' (by ' + LDKG.AUTHOR + ')');
                            LDKF.consoleLog('    LapysJS.processingDuration =', (LDKF.objectDefineProperty(LapysJS, 'processingDuration', {value: processingDuration}), LapysJS.processingDuration));
                            LDKF.consoleLog('    LapysJS.ready =', (LDKF.objectDefineProperty(LapysJS, 'ready', {value: !0}), delete LapysJS.tmp.processingDuration));
                        LDKF.consoleGroupEnd();

                        /* Logic
                                [if statement]
                        */
                        if (LDKF.isSafeInteger(timeoutEnd) && LDKF.isSafeInteger(timeoutStart)) {
                            // Update > Timeout End
                            timeoutEnd += 1;

                            /* Loop > Clear Timeout
                                    --- NOTE ---
                                        #Lapys: Try to clear all timeouts done
                                            by LapysJS.
                            */
                            while (timeoutEnd != timeoutStart)
                                LDKF.clearTimeout(timeoutEnd -= 1)
                        }
                    });
                }

            // Error Handling
            try {
                // Modification > (LapysJS Development Kit > Information) > Current Phase
                LapysJSDevelopmentKit.info.currentPhase = 'initializing';

                // Initialization
                init();

                // Update > Initialization
                init = 0
            } catch (error) {
                // Initialization > Error
                let $error = new LapysJSError(LDKI.errorMessagePrefix + LDKF.debugMessage('LapysJS encountered an error during the installation process.\n\t' + error.message));

                // Modification > Error > Stack
                $error.stack = error.stack;

                // Error
                throw $error
            }

            try {
                /* Logic
                        If
                            Initialization ran properly.
                */
                if (!init) {
                    // Modification > (LapysJS Development Kit > Information) > Current Phase
                    LapysJSDevelopmentKit.info.currentPhase = 'updating';

                    // Update
                    update.call(init);

                    // Update > Update
                    update = 0
                }
            } catch (error) {
                // Initialization > Error
                let $error = new LapysJSError(LDKI.errorMessagePrefix + LDKF.debugMessage('LapysJS could not install library services.\n\t' + error.message));

                // Modification > Error > Stack
                $error.stack = error.stack;

                // Error
                throw $error
            }

            try {
                /* Logic
                        If
                            Update ran properly.
                */
                if (!update) {
                    // Modification > (LapysJS Development Kit > Information) > Current Phase
                    LapysJSDevelopmentKit.info.currentPhase = 'terminated';

                    // Terminate
                    terminate.call(update);

                    // Update > Terminate
                    terminate = 0
                }
            } catch (error) {
                // Initialization > Error
                let $error = new LapysJSError(LDKI.errorMessagePrefix + LDKF.debugMessage(error.message));

                // Modification > Error > Stack
                $error.stack = error.stack;

                // Error
                throw $error
            }

            // Return
            return terminate
        } catch (error) {
            // Initialization > Allow Error
            var allowError = !1;

            // Error Handling
            try {
                // Logic > Console (Group (End), Log)
                if (LapysJSDevelopmentKit.info.currentPhase != 'terminated') {
                    console.group('LapysJS | ' + document.currentScript.src + ' (by ' + AUTHOR + ')');
                        console.log('    LapysJS.processingDuration =', 0);
                        console.log('    LapysJS.ready =', !1);
                    console.groupEnd()
                }
            } catch (error) {}


            try {
                // Logic > Error
                if (typeof error == 'string') throw error;

                // Initialization > Error (Message, Name)
                var errorMessage = error.message,
                    errorName = error.constructor.name;

                // Logic > Error
                if (errorMessage == "'eval' must be a native function.")
                    throw new Error('[LapysJS v' + VERSION + '] => ' + errorMessage);

                /* Logic
                        If
                            the error is a LapysJSError variant.

                        --- NOTE ---
                            #Lapys: Try to mitigate the use of prototype methods & properties
                                in an insecure environment.

                    > Error
                */
                if (
                    (
                        typeof errorMessage != 'string' ||
                        typeof errorName != 'string'
                    ) ||
                    (
                        errorMessage[0] == '[' && errorMessage[1] == 'L' && errorMessage[2] == 'a' && errorMessage[3] == 'p' && errorMessage[4] == 'y' && errorMessage[5] == 's' && errorMessage[6] == ' ' && errorMessage[7] == 'v' &&
                        errorMessage[8] == '0' && errorMessage[9] == '.' && errorMessage[10] == '0' && errorMessage[11] == '.' && errorMessage[12] == '4' &&
                        errorMessage[13] == ']'
                    ) ||
                    (
                        errorName[0] == 'L' && errorName[1] == 'a' && errorName[2] == 'p' && errorName[3] == 'y' && errorName[4] == 's' &&
                        errorName[5] == 'J' && errorName[6] == 'S'
                    )
                ) {
                    allowError = !0;
                    throw error
                }
            } catch (error) {
                // Error
                throw allowError ? error : ('LapysJSError: [LapysJS v' + VERSION + '] => ' + (typeof error == 'string' ? error : 'Unable to parse errors, therefore LapysJS is not compatible with this browser.'))
            }

            // Return
            return 1
        }
    }

    else
        /* Return
                --- NOTE ---
                    #Lapys: There was an exception in running this script.
        */
        return 1;

    /* Return
            --- NOTE ---
                #Lapys:
                    - The script ran perfectly.
                    - 2 years of development... well worth it. Well, onto the next project: Lapys OS or LapysPHP
    */
    return 0
})(0, [
    /* {Location}
            --- NOTE ---
                #Lapys: Location is a default argument value.
    */
    (function location(){try{return document.currentScript.src}catch(error){}return'*'})(),

    // {Parent Window}
    (function parentWindow(){try{return window.parent}catch(error){}return null})()
])

<component lightWeight=true>
    <attach event=onresize for=window onevent="Update()"/>
    <attach event=ondetach onevent="Reset()"/>
    <attach event=onpropertychange onevent="checkPropertyChange()"/>

    <!-- Document Script --- CITE (Lapys) -> http://webfx.eae.net/dhtml/boxsizing/boxsizing.html -->
    <script language=javascript type=text/javascript>
        //<![CDATA[
            // Initialization >  (Apply Box Sizing, Document, On Resize Timeout, Viewport Width)
            var applyBoxSizing = false;
            var document = element.document;
            var onresizeTimeout = null; // NOTE (Lapys) -> Buffer for multiple resize events.
            var viewportWidth = (typeof innerWidth == "undefined" ? element.document.documentElement.clientWidth : innerWidth);

            // Logic --- NOTE (Lapys) -> Do not apply `box-sizing` to certain elements.
            switch (element.nodeName) {
                case "HEAD": case "HTML": case "LINK": case "META": case "SCRIPT": case "STYLE": case "TITLE": case "#comment": break;
                default: applyBoxSizing = true
            }

            /* Function */
                /* Check Property Change
                        --- NOTE (Lapys) -> Executes when an element property changes
                            and re-calculates height & width if any property influencing its dimensions has changed.
                */
                function checkPropertyChange() {
                    // Logic
                    if (applyBoxSizing) {
                        // Initialization > Property Name
                        var propertyName = event.propertyName;

                        // Logic
                        if (propertyName == "style.boxSizing" && !element.style.boxSizing) {
                            element.style.removeAttribute("boxSizing");
                            element.runtimeStyle.removeAttribute("boxSizing");
                            element.runtimeStyle.removeAttribute("width");
                            element.runtimeStyle.removeAttribute("height")
                        }

                        // Logic
                        switch (propertyName) {
                            case "className":
                            case "style.boxSizing":
                                // Update Border Box (Height, Width); [Break]
                                updateBorderBoxHeight(); updateBorderBoxWidth();
                                break;

                            case "style.borderBottomStyle": case "style.borderBottomWidth": case "style.borderTopStyle": case "style.borderTopWidth":
                            case "style.height":
                            case "style.maxHeight": case "style.minHeight":
                            case "style.paddingBottom": case "style.paddingTop":
                                // Update Border Box Height; [Break]
                                updateBorderBoxHeight();
                                break;

                            case "style.borderLeftStyle": case "style.borderLeftWidth": case "style.borderRightStyle": case "style.borderRightWidth":
                            case "style.maxWidth": case "style.minWidth":
                            case "style.paddingLeft": case "style.paddingRight":
                            case "style.width":
                                // Update Border Box Width
                                updateBorderBoxWidth()
                        }
                    }
                }

                // Get Border Width
                function getBorderWidth(side) { return element.currentStyle["border" + side + "Style"] == "none" ? +0 : getPixelValue(element.currentStyle["border" + side + "Width"]) || +0 }
                    // Get Border Bottom Width
                    function getBorderBottomWidth() { return getBorderWidth("Bottom") }

                    // Get Border Left Width
                    function getBorderLeftWidth() { return getBorderWidth("Left") }

                    // Get Border Right Width
                    function getBorderRightWidth() { return getBorderWidth("Right") }

                    // Get Border Top Width
                    function getBorderTopWidth() { return getBorderWidth("Top") }

                // Get Document Box Sizing --- NOTE (Lapys) -> Checks for Quirks Mode.
                function getDocumentBoxSizing() { return document.compatMode === null || document.compatMode === "BackCompat" ? "border-box" : "content-box" }

                // Get Box Sizing
                function getBoxSizing() {
                    // Initialization > Element (Current) Style
                    var elementCurrentStyle = element.currentStyle,
                        elementStyle = element.style;

                    // Logic > Return
                    if (typeof elementStyle.boxSizing != "undefined" && elementStyle.boxSizing) return elementStyle.boxSizing;
                    else if (typeof elementStyle["box-sizing"] != "undefined" && elementStyle["box-sizing"]) return elementStyle["box-sizing"];
                    else if (typeof elementCurrentStyle.boxSizing != "undefined" && elementCurrentStyle.boxSizing) return elementCurrentStyle.boxSizing;
                    else if (typeof elementCurrentStyle["box-sizing"] != "undefined" && elementCurrentStyle["box-sizing"]) return elementCurrentStyle["box-sizing"];
                    else return getDocumentBoxSizing()
                }

                // Get Padding
                function getPadding(side) { return getPixelValue(element.currentStyle["padding" + side]) || +0 }
                    // Get Padding Bottom
                    function getPaddingBottom() { return getPadding("Bottom") }

                    // Get Padding Left
                    function getPaddingLeft() { return getPadding("Left") }

                    // Get Padding Right
                    function getPaddingRight() { return getPadding("Right") }

                    // Get Padding Top
                    function getPaddingTop() { return getPadding("Top") }

                // Get Pixel [Measurement] Height
                function getPixelHeight(object, size) {
                    // Initialization > Pixel Measurement Regular Expression
                    var pixelMeasurementRegularExpression = /^\d+(px)?$/i;

                    // Logic
                    if (pixelMeasurementRegularExpression.test(size))
                        // Return
                        return (+size) | +0;

                    else {
                        // Initialization > Percentage Measurement Regular Expression
                        var percentageMeasurementRegularExpression = /^[\d\.]+%$/i;

                        // Logic
                        if (percentageMeasurementRegularExpression.text(size)) {
                            // Error Handling
                            try {
                                // Logic
                                if (object.parentElement.currentStyle.height == "auto")
                                    // Update > Value
                                    size = "auto";

                                else {
                                    // Logic
                                    switch (object.parentElement.nodeName) {
                                        // [HTML]
                                        case "HTML":
                                            // Update > (Parent Height, Value)
                                            parentHeight = element.document.documentElement.clientHeight;
                                            size = parentHeight == "auto" ? "auto" : (+size / 100) * parentHeight;

                                            // [Break]
                                            break;

                                        // [Default]
                                        default:
                                            if (object.parentElement.currentStyle.height == "auto")
                                                size = "auto";

                                            else {
                                                // Initialization > Parent Style ((Border, Padding) (Bottom, Top))
                                                var parentStyleBorderBottom = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderBottomWidth),
                                                    parentStyleBorderTop = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderTopWidth),
                                                    parentStylePaddingBottom = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingBottom),
                                                    parentStylePaddingTop = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingTop);

                                                // Initialization > Parent Style Height
                                                var parentHeight = object.parentElement.offsetHeight - parentStylePaddingTop - parentStylePaddingBottom - parentStyleBorderTop - parentStyleBorderBottom;

                                                // Update > Value
                                                size = (+size / 100) * parentHeight
                                            }
                                    }

                                    // Update > Value
                                    (size == "auto") || (size = (+size) | +0)
                                }
                            } catch (error) {
                                // Update > Value
                                size = "auto"
                            }

                            // Return
                            return size
                        }

                        // Initialization > Object (Runtime) Style Left
                        var objectStyleLeft = object.style.left,
                            objectRuntimeStyleLeft = object.runtimeStyle.left;

                        // Style > Object > Left
                        object.runtimeStyle.left = object.currentStyle.left;
                        object.style.left = size || +0;

                        // Update > Value
                        size = +(object.style.pixelLeft) | +0;

                        // Style > Object > Left
                        object.style.left = objectStyleLeft;
                        object.runtimeStyle.left = objectRuntimeStyleLeft;

                        // Return
                        return size
                    }
                }

                /* Get Pixel [Measurement] Value
                        --- CITE (Lapys) -> http://code.google.com/p/ie7-js/
                        --- NOTE (Lapys) -> Converts from relative to pixel sizes.
                */
                function getPixelValue(size) {
                    // Initialization > Pixel Measurement Regular Expression
                    var pixelMeasurementRegularExpression = /^\d+(px)?$/i;

                    // Logic
                    if (pixelMeasurementRegularExpression.test(size))
                        // Return
                        return (+size) | +0;

                    else {
                        // Initialization > Element (Runtime) Style Left
                        var elementStyleLeft = element.style.left,
                            elementRuntimeStyleLeft = element.runtimeStyle.left;

                        // Style > Element > Left
                        element.runtimeStyle.left = element.currentStyle.left;
                        element.style.left = size || +0;

                        // Update > Value
                        size = +(element.style.pixelLeft) | 0;

                        // Style > Element > Left
                        element.style.left = elementStyleLeft;
                        element.runtimeStyle.left = elementRuntimeStyleLeft;

                        // Return
                        return size
                    }
                }

                // Get Pixel [Measurement] Width
                function getPixelWidth(object, size) {
                    // Initialization > Pixel Measurement Regular Expression
                    var pixelMeasurementRegularExpression = /^\d+(px)?$/i;

                    // Logic
                    if (pixelMeasurementRegularExpression.text(size))
                        // Return
                        return (+size) | +0;

                    else {
                        // Initialization > Percentage Measurement Regular Expression
                        var percentageMeasurementRegularExpression = /^[\d\.]+%$/i;

                        // Logic
                        if (percentageMeasurementRegularExpression.test(size)) {
                            // Error Handling
                            try {
                                // Initialization > Parent Style ((Border, Padding) (Left, Right))
                                var parentStyleBorderLeft = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderLeftWidth),
                                    parentStyleBorderRight = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderRightWidth),
                                    parentStylePaddingLeft = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingLeft),
                                    parentStylePaddingRight = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingRight);

                                // Initialization > Parent Width
                                var parentWidth = object.parentElement.offsetWidth - parentStylePaddingLeft - parentStylePaddingRight - parentStyleBorderLeft - parentStyleBorderRight;

                                // Update > Value
                                size = (+size / 100) * parentWidth
                            }
                            catch (error) {
                                // Initialization > Value
                                var size = (+size / 100) * element.document.documentElement.clientWidth;

                                // Return
                                return (+size) | +0
                            }

                            // Return
                            return (+size) || +0
                        }

                        // Initialization > Object (Runtime) Style Left --- NOTE (Lapys) -> For `em` measurements.
                        var objectStyleLeft = object.style.left,
                            objectRuntimeStyleLeft = object.runtimeStyle.left;

                        // Style > Object > Left
                        object.runtimeStyle.left = object.currentStyle.left;
                        object.style.left = size || +0;

                        // Update > Value
                        size = +(object.style.pixelLeft) | +0;

                        // Style > Object > Left
                        object.style.left = objectStyleLeft;
                        object.runtimeStyle.left = objectRuntimeStyleLeft;

                        // Return
                        return size
                    }
                }

                // Set Border Box Width
                function setBorderBoxWidth(size) { element.runtimeStyle.width = Math.max(+0, size - getBorderLeftWidth() - getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px" }
                    // Set Border Box Height
                    function setBorderBoxHeight(size) { element.runtimeStyle.height = Math.max(+0, size - getBorderTopWidth() - getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px" }

                    // Set Border Box Maximum Height
                    function setBorderBoxMaximumHeight(size) { element.runtimeStyle.maxHeight = Math.max(+0, size - getBorderTopWidth() - getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px" }

                    // Set Border Box Maximum Width
                    function setBorderBoxMaximumWidth(size) { element.runtimeStyle.maxWidth = Math.max(+0, size - getBorderLeftWidth() - getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px" }

                    // Set Border Box Minimum Height
                    function setBorderBoxMinimumHeight(size) { element.runtimeStyle.minHeight = Math.max(+0, size - getBorderTopWidth() - getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px" }

                    // Set Border Box Minimum Width
                    function setBorderBoxMinimumWidth(size) { element.runtimeStyle.minWidth = Math.max(+0, size - getBorderLeftWidth() - getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px" }

                    // Set Border Box Width
                    function setBorderBoxWidth(size) { element.runtimeStyle.width = Math.max(+0, size - getBorderLeftWidth() - getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px" }

                    // Set Content Box Height
                    function setContentBoxHeight(size) { element.runtimeStyle.height = Math.max(+0, size + getBorderTopWidth() + getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px" }

                    // Set Content Box Maximum Height
                    function setContentBoxMaximumHeight(size) { element.runtimeStyle.maxHeight = Math.max(+0, size + getBorderTopWidth() + getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px" }

                    // Set Content Box Maximum Width
                    function setContentBoxMaximumWidth(size) { element.runtimeStyle.maxWidth = Math.max(+0, size + getBorderLeftWidth() + getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px" }

                    // Set Content Box Minimum Height
                    function setContentBoxMinimumHeight(size) { element.runtimeStyle.minHeight = Math.max(+0, size + getBorderTopWidth() + getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px" }

                    // Set Content Box Minimum Width
                    function setContentBoxMinimumWidth(size) { element.runtimeStyle.minWidth = Math.max(+0, size + getBorderLeftWidth() + getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px" }

                    // Set Content Box Width
                    function setContentBoxWidth(size) { element.runtimeStyle.width = Math.max(+0, size + getBorderLeftWidth() + getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px" }

                // Update Border Box Height
                function updateBorderBoxHeight() {
                	// Constant > Box Sizing
                	var boxSizing = getBoxSizing();

                	// Logic
                	if (getDocumentBoxSizing() != getBoxSizing()) {
                		// Constant > Height
                		var height = element.currentStyle.height;

                		// Logic
                		if (height != "auto") {
                			// Update > Height; ...
                			height = getPixelHeight(element, height);
                			(height == "auto") || (boxSizing == "border-box" ?
                				setBorderBoxHeight(+(height | +0)) :
                				setContentBoxWidth(+(height | +0))
                			)
                		}

            			// Update > Height; Logic
                		height = element.currentStyle.maxHeight;
                    	if (height != "none") {
                    		// Update > Height; ...
                    		height = getPixelHeight(element, height);
                    		(height == "auto") || (boxSizing == "border-box" ?
                				setBorderBoxMaximumHeight(+(height | +0)) :
                				setContentBoxMaximumWidth(+(height | +0))
                			)
                    	}

                		// Update > Height; Logic
                		height = element.currentStyle.minHeight;
                    	if (height != "none") {
                    		// Update > Height; ...
                    		height = getPixelHeight(element, height);
                    		(height == "auto") || (boxSizing == "border-box" ?
                				setBorderBoxMinimumHeight(+(height | +0)) :
                				setContentBoxMinimumWidth(+(height | +0))
                			)
                    	}
                	}
                }

                // Update Border Box Width
                function updateBorderBoxWidth() {
                	// Constant > Box Sizing
                	var boxSizing = getBoxSizing();

                	// Logic
                	if (getDocumentBoxSizing() != getBoxSizing()) {
                		// Constant > Width
                		var width = element.currentStyle.width;

                		// Logic
                    	if (width != "auto") {
                    		// Update > Width; ...
                    		width = getPixelWidth(element, width);
                    		boxSizing == "border-box" ?
                    			setBorderBoxWidth(+(width | +0)) :
                    			setContentBoxWidth(+(width | +0))
                    	}

                    	// Update > Width; Logic
            			width = element.currentStyle.maxWidth;
                		if (width != "none") {
                			// Update > Width; ...
                			width = getPixelWidth(element, width);
                			boxSizing == "border-box" ?
                				setBorderBoxMaximumWidth(+(width | +0)) :
                				setContentBoxMaximumWidth(+(width | +0))
                		}

                    	// Update > Width; Logic
                		width = element.currentStyle.minWidth;
                		if (width != "none") {
                			// Update > Width; ...
                			width = getPixelWidth(element, width);
                			boxSizing == "border-box" ?
                				setBorderBoxMinimumWidth(+(width | +0)) :
                				setContentBoxMinimumWidth(+(width | +0))
                		}
                	}
                }

            /* Phase */
                /* Initiate --- NOTE (Lapys) -> Triggers `box-sizing` calculations and updates the height & width. */
                function Initiate() { if (applyBoxSizing) { updateBorderBoxWidth(); updateBorderBoxHeight() } }

                /* Reset
                        --- NOTE ---
                            #Lapys: Called when the behavior is being detected.
                                It then resets everything as it was before applying said behavior.
                */
                function Reset() {
                    // Logic
                    if (applyBoxSizing)
                        // Error Handling
                        try {
                            // Style > Element > (Height, Width)
                            element.runtimeStyle.removeAttribute("height");
                            element.runtimeStyle.removeAttribute("width")
                        } catch (error) {}
                }

                /* Update --- NOTE (Lapys) -> Called during resize events, then waits until there are no further resize events before triggering a re-calculation. */
                function Update() {
                	// Clear Timeout; Update > On Resize Timeout
                    (onresizeTimeout === null) && clearTimeout(onresizeTimeout);
                    onresizeTimeout = setTimeout(function() {
                    	// Error Handling > (Reset, Initiate); Update > On Resize Timeout
                        try { Reset(); Initiate() } catch (error) {}
                        onresizeTimeout = null
                    }, 100)
                }

            // Initiate --- NOTE (Lapys) -> Run the calculations.
           	Initiate()
        // ]]>
    </script>
</component>

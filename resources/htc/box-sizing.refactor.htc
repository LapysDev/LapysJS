<component lightWeight=true>
    <attach event=onresize for=window onevent=update()>
    <attach event=ondetach onevent="restore()"/>
    <attach event=onpropertychange onevent="checkPropertyChange()"/>

    <script language=javascript type=text/javascript>
        //<![CDATA[
        /* Function > Main --- CITE (Lapys) -> http://webfx.eae.net/dhtml/boxsizing/boxsizing.html */
        +(function Main() {
                // Initialization >  (Apply Box Sizing, Document, On Resize Timeout, Viewport Width)
                var applyBoxSizing = false,
                    document = element.document,
                    onresizeTimeout = null, // NOTE (Lapys) -> Buffer for multiple resize events.
                    viewportWidth = (typeof innerWidth == "undefined" ? element.document.documentElement.clientWidth : innerWidth);

                // Logic --- NOTE (Lapys) -> Do not apply `box-sizing` to certain elements.
                switch (element.nodeName) {
                    case "HEAD": case "HTML": case "LINK": case "META": case "SCRIPT": case "STYLE": case "TITLE": case "#comment": break;
                    default: applyBoxSizing = true
                }

                /* Function */
                    /* Check Property Change
                            --- NOTE (Lapys) -> Executes when an element property changes
                                and re-calculates height & width if any property influencing its dimensions has changed.
                    */
                    function checkPropertyChange() {
                        // Logic
                        if (applyBoxSizing) {
                            // Initialization > Property Name
                            var propertyName = event.propertyName;

                            // Logic
                            if (propertyName == "style.boxSizing" && !element.style.boxSizing) {
                                element.style.removeAttribute("boxSizing");
                                element.runtimeStyle.removeAttribute("boxSizing");
                                element.runtimeStyle.removeAttribute("width");
                                element.runtimeStyle.removeAttribute("height")
                            }

                            // Logic
                            switch (propertyName) {
                                case "className":
                                case "style.boxSizing":
                                    // Update Border Box (Height, Width); [Break]
                                    updateBorderBoxHeight(); updateBorderBoxWidth();
                                    break;

                                case "style.borderBottomStyle": case "style.borderBottomWidth": case "style.borderTopStyle": case "style.borderTopWidth":
                                case "style.height":
                                case "style.maxHeight": case "style.minHeight":
                                case "style.paddingBottom": case "style.paddingTop":
                                    // Update Border Box Height; [Break]
                                    updateBorderBoxHeight();
                                    break;

                                case "style.borderLeftStyle": case "style.borderLeftWidth": case "style.borderRightStyle": case "style.borderRightWidth":
                                case "style.maxWidth": case "style.minWidth":
                                case "style.paddingLeft": case "style.paddingRight":
                                case "style.width":
                                    // Update Border Box Width
                                    updateBorderBoxWidth()
                            }
                        }
                    }

                    // Get Border Width
                    function getBorderWidth(side) { return element.currentStyle["border" + side + "Style"] == "none" ? +0 : getPixelValue(element.currentStyle["border" + side + "Width"]) || +0 }
                        // Get Border Bottom Width
                        function getBorderBottomWidth() { return getBorderWidth("Bottom") }

                        // Get Border Left Width
                        function getBorderLeftWidth() { return getBorderWidth("Left") }

                        // Get Border Right Width
                        function getBorderRightWidth() { return getBorderWidth("Right") }

                        // Get Border Top Width
                        function getBorderTopWidth() { return getBorderWidth("Top") }

                    // Get Document Box Sizing --- NOTE (Lapys) -> Checks for Quirks Mode.
                    function getDocumentBoxSizing() { return document.compatMode === null || document.compatMode === "BackCompat" ? "border-box" : "content-box" }

                    // Get Box Sizing
                    function getBoxSizing() {
                        // Initialization > Element (Current) Style
                        var elementCurrentStyle = element.currentStyle,
                            elementStyle = element.style;

                        // Logic > Return
                        if (typeof elementStyle.boxSizing != "undefined" && elementStyle.boxSizing) return elementStyle.boxSizing;
                        else if (typeof elementStyle["box-sizing"] != "undefined" && elementStyle["box-sizing"]) return elementStyle["box-sizing"];
                        else if (typeof elementCurrentStyle.boxSizing != "undefined" && elementCurrentStyle.boxSizing) return elementCurrentStyle.boxSizing;
                        else if (typeof elementCurrentStyle["box-sizing"] != "undefined" && elementCurrentStyle["box-sizing"]) return elementCurrentStyle["box-sizing"];
                        else return getDocumentBoxSizing()
                    }

                    // Get Padding
                    function getPadding(side) { return getPixelValue(element.currentStyle["padding" + side]) || +0 }
                        // Get Padding Bottom
                        function getPaddingBottom() { return getPadding("Bottom") }

                        // Get Padding Left
                        function getPaddingLeft() { return getPadding("Left") }

                        // Get Padding Right
                        function getPaddingRight() { return getPadding("Right") }

                        // Get Padding Top
                        function getPaddingTop() { return getPadding("Top") }

                    // Get Pixel [Measurement] Height
                    function getPixelHeight(object, value) {
                        // Initialization > Pixel Measurement Regular Expression
                        var pixelMeasurementRegularExpression = /^\d+(px)?$/i;

                        // Logic
                        if (pixelMeasurementRegularExpression.test(value))
                            // Return
                            return (+value) | +0;

                        else {
                            // Initialization > Percentage Measurement Regular Expression
                            var percentageMeasurementRegularExpression = /^[\d\.]+%$/i;

                            // Logic
                            if (percentageMeasurementRegularExpression.text(value)) {
                                // Error Handling
                                try {
                                    // Logic
                                    if (object.parentElement.currentStyle.height == "auto")
                                        // Update > Value
                                        value = "auto";

                                    else {
                                        // Logic
                                        switch (object.parentElement.nodeName) {
                                            // [HTML]
                                            case "HTML":
                                                // Update > (Parent Height, Value)
                                                parentHeight = element.document.documentElement.clientHeight;
                                                value = parentHeight == "auto" ? "auto" : (+value / 100) * parentHeight;

                                                // [Break]
                                                break;

                                            // [Default]
                                            default:
                                                if (object.parentElement.currentStyle.height == "auto")
                                                    value = "auto";

                                                else {
                                                    // Initialization > Parent Style ((Border, Padding) (Bottom, Top))
                                                    var parentStyleBorderBottom = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderBottomWidth),
                                                        parentStyleBorderTop = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderTopWidth),
                                                        parentStylePaddingBottom = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingBottom),
                                                        parentStylePaddingTop = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingTop);

                                                    // Initialization > Parent Style Height
                                                    var parentHeight = object.parentElement.offsetHeight - parentStylePaddingTop - parentStylePaddingBottom - parentStyleBorderTop - parentStyleBorderBottom;

                                                    // Update > Value
                                                    value = (+value / 100) * parentHeight
                                                }
                                        }

                                        // Update > Value
                                        (value == "auto") || (value = (+value) | +0)
                                    }
                                } catch (error) {
                                    // Update > Value
                                    value = "auto"
                                }

                                // Return
                                return value
                            }

                            // Initialization > Object (Runtime) Style Left
                            var objectStyleLeft = object.style.left,
                                objectRuntimeStyleLeft = object.runtimeStyle.left;

                            // Style > Object > Left
                            object.runtimeStyle.left = object.currentStyle.left;
                            object.style.left = value || +0;

                            // Update > Value
                            value = +(object.style.pixelLeft) | +0;

                            // Style > Object > Left
                            object.style.left = objectStyleLeft;
                            object.runtimeStyle.left = objectRuntimeStyleLeft;

                            // Return
                            return value
                        }
                    }

                    /* Get Pixel [Measurement] Value
                            --- CITE (Lapys) -> http://code.google.com/p/ie7-js/
                            --- NOTE (Lapys) -> Converts from relative to pixel values.
                    */
                    function getPixelValue(value) {
                        // Initialization > Pixel Measurement Regular Expression
                        var pixelMeasurementRegularExpression = /^\d+(px)?$/i;

                        // Logic
                        if (pixelMeasurementRegularExpression.test(value))
                            // Return
                            return (+value) | +0;

                        else {
                            // Initialization > Element (Runtime) Style Left
                            var elementStyleLeft = element.style.left,
                                elementRuntimeStyleLeft = element.runtimeStyle.left;

                            // Style > Element > Left
                            element.runtimeStyle.left = element.currentStyle.left;
                            element.style.left = value || +0;

                            // Update > Value
                            value = +(element.style.pixelLeft) | 0;

                            // Style > Element > Left
                            element.style.left = elementStyleLeft;
                            element.runtimeStyle.left = elementRuntimeStyleLeft;

                            // Return
                            return value
                        }
                    }

                    // Get Pixel [Measurement] Width
                    function getPixelWidth(object, value) {
                        // Initialization > Pixel Measurement Regular Expression
                        var pixelMeasurementRegularExpression = /^\d+(px)?$/i;

                        // Logic
                        if (pixelMeasurementRegularExpression.text(value))
                            // Return
                            return (+value) | +0;

                        else {
                            // Initialization > Percentage Measurement Regular Expression
                            var percentageMeasurementRegularExpression = /^[\d\.]+%$/i;

                            // Logic
                            if (percentageMeasurementRegularExpression.test(value)) {
                                // Error Handling
                                try {
                                    // Initialization > Parent Style ((Border, Padding) (Left, Right))
                                    var parentStyleBorderLeft = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderLeftWidth),
                                        parentStyleBorderRight = getPixelWidth(object.parentElement, object.parentElement.currentStyle.borderRightWidth),
                                        parentStylePaddingLeft = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingLeft),
                                        parentStylePaddingRight = getPixelWidth(object.parentElement, object.parentElement.currentStyle.paddingRight);

                                    // Initialization > Parent Width
                                    var parentWidth = object.parentElement.offsetWidth - parentStylePaddingLeft - parentStylePaddingRight - parentStyleBorderLeft - parentStyleBorderRight;

                                    // Update > Value
                                    value = (+value / 100) * parentWidth
                                }
                                catch (error) {
                                    // Initialization > Value
                                    var value = (+value / 100) * element.document.documentElement.clientWidth;

                                    // Return
                                    return (+value) | +0
                                }

                                // Return
                                return (+value) || +0
                            }

                            // Initialization > Object (Runtime) Style Left --- NOTE (Lapys) -> For `em` measurements.
                            var objectStyleLeft = object.style.left,
                                objectRuntimeStyleLeft = object.runtimeStyle.left;

                            // Style > Object > Left
                            object.runtimeStyle.left = object.currentStyle.left;
                            object.style.left = value || +0;

                            // Update > Value
                            value = +(object.style.pixelLeft) | +0;

                            // Style > Object > Left
                            object.style.left = objectStyleLeft;
                            object.runtimeStyle.left = objectRuntimeStyleLeft;

                            // Return
                            return value
                        }
                    }

                    // Set Border Box Width
                    function setBorderBoxWidth(size) { element.runtimeStyle.width = Math.max(+0, size - getBorderLeftWidth() - getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px" }
                        // Set Border Box Height
                        function setBorderBoxHeight(size) {
                            element.runtimeStyle.height = Math.max(+0, size - getBorderTopWidth())
                        }
                        // Set Border Box Minimum Height
                        // Set Border Box Minimum Width
                        // Set Border Box Maximum Width
                        // Set Border Box Minimum Width
                        // Set Border Box Width

                        // Set Content Box Height
                        // Set Content Box Minimum Height
                        // Set Content Box Minimum Width
                        // Set Content Box Maximum Width
                        // Set Content Box Minimum Width
                        // Set Content Box Width

                /* Phase */
                    /* Initiate --- NOTE (Lapys) -> Triggers `box-sizing` calculations and updates the height & width. */
                    function Initiate() { if (applyBoxSizing) { updateBorderBoxWidth(); updateBorderBoxHeight() } }

                    /* Reset
                            --- NOTE ---
                                #Lapys: Called when the behavior is being detected.
                                    It then resets everything as it was before applying said behavior.
                    */
                    function Reset() {
                        // Logic
                        if (applyBoxSizing)
                            // Error Handling
                            try {
                                // Style > Element > (Height, Width)
                                element.runtimeStyle.removeAttribute("height");
                                element.runtimeStyle.removeAttribute("width")
                            } catch (error) {}
                    }

                    /* Update --- NOTE (Lapys) -> Called during resize events, then waits until there are no further resize events before triggering a re-calculation. */
                    function Update() {
                        (onresizeTimeout === null) && clearTimeout(onresizeTimeout);
                        onresizeTimeout = setTimeout(function() {
                            try { Reset(); Initiate() } catch (error) {}
                            onresizeTimeout = null
                        }, 100)
                    }
            </script>

        <component lightWeight="true">
        <attach event="onpropertychange" onevent="checkPropertyChange()" />
        <attach event="ondetach" onevent="restore()" />
        <attach event="onresize" for="window" onevent="update()" />
        <script type="text/javascript">

        /*
         * setBorderBoxWidth & friends
         * Width and height setters
         */
        function setBorderBoxWidth(n){
            element.runtimeStyle.width = Math.max(0, n - getBorderLeftWidth() -
                getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px";
        }
        function setBorderBoxMinWidth(n){
            element.runtimeStyle.minWidth = Math.max(0, n - getBorderLeftWidth() -
                getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px";
        }
        function setBorderBoxMaxWidth(n){
            element.runtimeStyle.maxWidth = Math.max(0, n - getBorderLeftWidth() -
                getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px";
        }
        function setBorderBoxHeight(n){
            element.runtimeStyle.height = Math.max(0, n - getBorderTopWidth() -
                getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px";
        }
        function setBorderBoxMinHeight(n){
            element.runtimeStyle.minHeight = Math.max(0, n - getBorderTopWidth() -
                getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px";
        }
        function setBorderBoxMaxHeight(n){
            element.runtimeStyle.maxHeight = Math.max(0, n - getBorderTopWidth() -
                getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px";
        }
        function setContentBoxWidth(n){
            element.runtimeStyle.width = Math.max(0, n + getBorderLeftWidth() +
                getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px";
        }
        function setContentBoxMinWidth(n){
            element.runtimeStyle.minWidth = Math.max(0, n + getBorderLeftWidth() +
                getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px";
        }
        function setContentBoxMaxWidth(n){
            element.runtimeStyle.maxWidth = Math.max(0, n + getBorderLeftWidth() +
                getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px";
        }
        function setContentBoxHeight(n){
            element.runtimeStyle.height = Math.max(0, n + getBorderTopWidth() +
                getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px";
        }
        function setContentBoxMinHeight(n){
            element.runtimeStyle.minHeight = Math.max(0, n + getBorderTopWidth() +
                getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px";
        }
        function setContentBoxMaxHeight(n){
            element.runtimeStyle.maxHeight = Math.max(0, n + getBorderTopWidth() +
                getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px";
        }


        /*
         * updateBorderBoxWidth & updateBorderBoxHeight
         *
         */
        function updateBorderBoxWidth() {
            if(getDocumentBoxSizing() == getBoxSizing()){
                return;
            }

            var csw = element.currentStyle.width;
            if(csw != "auto"){
                csw = getPixelWidth(element,csw);
                if(getBoxSizing() == "border-box"){
                    setBorderBoxWidth(parseInt(csw));
                }
                else{
                    setContentBoxWidth(parseInt(csw));
                }
            }

            csw = element.currentStyle.minWidth;
            if(csw != "none"){
                csw = getPixelWidth(element,csw);
                if(getBoxSizing() == "border-box"){
                    setBorderBoxMinWidth(parseInt(csw));
                }
                else{
                    setContentBoxMinWidth(parseInt(csw));
                }
            }

            csw = element.currentStyle.maxWidth;
            if(csw != "none"){
                csw = getPixelWidth(element,csw);
                if(getBoxSizing() == "border-box"){
                    setBorderBoxMaxWidth(parseInt(csw));
                }
                else{
                    setContentBoxMaxWidth(parseInt(csw));
                }
            }
        }

        function updateBorderBoxHeight() {
            if(getDocumentBoxSizing() == getBoxSizing()){
                return;
            }

            var csh = element.currentStyle.height;
            if(csh != "auto"){
                csh = getPixelHeight(element,csh);
                if(csh !== "auto"){
                    if(getBoxSizing() == "border-box"){
                        setBorderBoxHeight(parseInt(csh));
                    }
                    else{
                        setContentBoxHeight(parseInt(csh));
                    }
                }
            }

            csh = element.currentStyle.minHeight;
            if(csh != "none"){
                csh = getPixelHeight(element,csh);
                if(csh !== "none"){
                    if(getBoxSizing() == "border-box"){
                        setBorderBoxMinHeight(parseInt(csh));
                    }
                    else{
                        setContentBoxMinHeight(parseInt(csh));
                    }
                }
            }

            csh = element.currentStyle.maxHeight;
            if(csh != "none"){
                csh = getPixelHeight(element,csh);
                if(csh !== "none"){
                    if(getBoxSizing() == "border-box"){
                        setBorderBoxMaxHeight(parseInt(csh));
                    }
                    else{
                        setContentBoxMaxHeight(parseInt(csh));
                    }
                }
            }
        }


        // Run the calculations
        init();

        //]]>

            // Return
            return +0
        })();
</script>
</component>
